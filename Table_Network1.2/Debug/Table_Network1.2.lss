
Table_Network1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006100  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00006100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000f2c  20000070  00006170  00020070  2**2
                  ALLOC
  3 .stack        00002004  20000f9c  0000709c  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005369c  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008f10  00000000  00000000  000737c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000f7a7  00000000  00000000  0007c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d38  00000000  00000000  0008be77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001538  00000000  00000000  0008cbaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000233a2  00000000  00000000  0008e0e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ecaf  00000000  00000000  000b1489  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a5a4  00000000  00000000  000d0138  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000025b0  00000000  00000000  0015a6dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
       0:	a0 2f 00 20 29 20 00 00 25 20 00 00 25 20 00 00     ./. ) ..% ..% ..
	...

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
      2c:	25 20 00 00 00 00 00 00 00 00 00 00 25 20 00 00     % ..........% ..
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
      3c:	25 20 00 00 25 20 00 00 25 20 00 00 25 20 00 00     % ..% ..% ..% ..
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
      4c:	b9 04 00 00 31 03 00 00 25 20 00 00 25 20 00 00     ....1...% ..% ..
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
      5c:	25 20 00 00 25 20 00 00 f5 08 00 00 05 09 00 00     % ..% ..........
				rtc_count_set_compare(module, config->compare_values[i],
      6c:	15 09 00 00 25 09 00 00 35 09 00 00 45 09 00 00     ....%...5...E...
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
      7c:	25 20 00 00 25 20 00 00 25 20 00 00 05 1d 00 00     % ..% ..% ......
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
      8c:	15 1d 00 00 25 1d 00 00 00 00 00 00 00 00 00 00     ....%...........
				while (rtc_count_is_syncing(module)) {
      9c:	25 20 00 00 25 20 00 00 00 00 00 00 25 20 00 00     % ..% ......% ..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
				rtc_count_set_compare(module, config->compare_values[i],
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00006100 	.word	0x00006100

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00006100 	.word	0x00006100
     10c:	00006100 	.word	0x00006100
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000019fd 	.word	0x000019fd
     140:	0000554d 	.word	0x0000554d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	2000008c 	.word	0x2000008c
     1b8:	20000090 	.word	0x20000090
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	2000008c 	.word	0x2000008c
     1e8:	20000090 	.word	0x20000090
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:




void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	46c6      	mov	lr, r8
     1f4:	b500      	push	{lr}
     1f6:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f8:	ac01      	add	r4, sp, #4
     1fa:	2601      	movs	r6, #1
     1fc:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     1fe:	2700      	movs	r7, #0
     200:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     202:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     204:	0021      	movs	r1, r4
     206:	2013      	movs	r0, #19
     208:	4d27      	ldr	r5, [pc, #156]	; (2a8 <system_board_init+0xb8>)
     20a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     20c:	4b27      	ldr	r3, [pc, #156]	; (2ac <system_board_init+0xbc>)
     20e:	4698      	mov	r8, r3
     210:	2380      	movs	r3, #128	; 0x80
     212:	031b      	lsls	r3, r3, #12
     214:	4642      	mov	r2, r8
     216:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     218:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     21a:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     21c:	0021      	movs	r1, r4
     21e:	201c      	movs	r0, #28
     220:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     222:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     224:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     226:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     228:	0021      	movs	r1, r4
     22a:	2052      	movs	r0, #82	; 0x52
     22c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     22e:	0021      	movs	r1, r4
     230:	203e      	movs	r0, #62	; 0x3e
     232:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     234:	0021      	movs	r1, r4
     236:	203f      	movs	r0, #63	; 0x3f
     238:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     23a:	0021      	movs	r1, r4
     23c:	202f      	movs	r0, #47	; 0x2f
     23e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     240:	0021      	movs	r1, r4
     242:	2014      	movs	r0, #20
     244:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     246:	2280      	movs	r2, #128	; 0x80
     248:	02d2      	lsls	r2, r2, #11
     24a:	4b19      	ldr	r3, [pc, #100]	; (2b0 <system_board_init+0xc0>)
     24c:	619a      	str	r2, [r3, #24]
     24e:	4b19      	ldr	r3, [pc, #100]	; (2b4 <system_board_init+0xc4>)
     250:	2280      	movs	r2, #128	; 0x80
     252:	05d2      	lsls	r2, r2, #23
     254:	619a      	str	r2, [r3, #24]
     256:	2280      	movs	r2, #128	; 0x80
     258:	0612      	lsls	r2, r2, #24
     25a:	619a      	str	r2, [r3, #24]
     25c:	2280      	movs	r2, #128	; 0x80
     25e:	0212      	lsls	r2, r2, #8
     260:	619a      	str	r2, [r3, #24]
     262:	2380      	movs	r3, #128	; 0x80
     264:	035b      	lsls	r3, r3, #13
     266:	4642      	mov	r2, r8
     268:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     26a:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     26c:	0021      	movs	r1, r4
     26e:	2053      	movs	r0, #83	; 0x53
     270:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     272:	4a11      	ldr	r2, [pc, #68]	; (2b8 <system_board_init+0xc8>)
     274:	6a11      	ldr	r1, [r2, #32]
     276:	2380      	movs	r3, #128	; 0x80
     278:	039b      	lsls	r3, r3, #14
     27a:	430b      	orrs	r3, r1
     27c:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     27e:	2204      	movs	r2, #4
     280:	4b0e      	ldr	r3, [pc, #56]	; (2bc <system_board_init+0xcc>)
     282:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     284:	466b      	mov	r3, sp
     286:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     288:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     28a:	2305      	movs	r3, #5
     28c:	466a      	mov	r2, sp
     28e:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     290:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     292:	4669      	mov	r1, sp
     294:	2009      	movs	r0, #9
     296:	4c0a      	ldr	r4, [pc, #40]	; (2c0 <system_board_init+0xd0>)
     298:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     29a:	4669      	mov	r1, sp
     29c:	200c      	movs	r0, #12
     29e:	47a0      	blx	r4
#endif

}
     2a0:	b002      	add	sp, #8
     2a2:	bc04      	pop	{r2}
     2a4:	4690      	mov	r8, r2
     2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a8:	00000495 	.word	0x00000495
     2ac:	41004400 	.word	0x41004400
     2b0:	41004500 	.word	0x41004500
     2b4:	41004480 	.word	0x41004480
     2b8:	40000400 	.word	0x40000400
     2bc:	42005400 	.word	0x42005400
     2c0:	00001c0d 	.word	0x00001c0d

000002c4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2c4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     2c6:	2a00      	cmp	r2, #0
     2c8:	d001      	beq.n	2ce <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     2ca:	0018      	movs	r0, r3
     2cc:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     2ce:	008b      	lsls	r3, r1, #2
     2d0:	4a06      	ldr	r2, [pc, #24]	; (2ec <extint_register_callback+0x28>)
     2d2:	589b      	ldr	r3, [r3, r2]
     2d4:	2b00      	cmp	r3, #0
     2d6:	d003      	beq.n	2e0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     2d8:	4283      	cmp	r3, r0
     2da:	d005      	beq.n	2e8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     2dc:	231d      	movs	r3, #29
     2de:	e7f4      	b.n	2ca <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     2e0:	0089      	lsls	r1, r1, #2
     2e2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     2e4:	2300      	movs	r3, #0
     2e6:	e7f0      	b.n	2ca <extint_register_callback+0x6>
		return STATUS_OK;
     2e8:	2300      	movs	r3, #0
     2ea:	e7ee      	b.n	2ca <extint_register_callback+0x6>
     2ec:	20000e18 	.word	0x20000e18

000002f0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2f0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     2f2:	2900      	cmp	r1, #0
     2f4:	d001      	beq.n	2fa <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     2f6:	0018      	movs	r0, r3
     2f8:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     2fa:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     2fc:	281f      	cmp	r0, #31
     2fe:	d800      	bhi.n	302 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     300:	4a02      	ldr	r2, [pc, #8]	; (30c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     302:	2301      	movs	r3, #1
     304:	4083      	lsls	r3, r0
     306:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     308:	2300      	movs	r3, #0
     30a:	e7f4      	b.n	2f6 <extint_chan_enable_callback+0x6>
     30c:	40001800 	.word	0x40001800

00000310 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     310:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     312:	2900      	cmp	r1, #0
     314:	d001      	beq.n	31a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
     316:	0018      	movs	r0, r3
     318:	4770      	bx	lr
		return NULL;
     31a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     31c:	281f      	cmp	r0, #31
     31e:	d800      	bhi.n	322 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
     320:	4a02      	ldr	r2, [pc, #8]	; (32c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
     322:	2301      	movs	r3, #1
     324:	4083      	lsls	r3, r0
     326:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
     328:	2300      	movs	r3, #0
     32a:	e7f4      	b.n	316 <extint_chan_disable_callback+0x6>
     32c:	40001800 	.word	0x40001800

00000330 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     330:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     332:	2200      	movs	r2, #0
     334:	4b10      	ldr	r3, [pc, #64]	; (378 <EIC_Handler+0x48>)
     336:	701a      	strb	r2, [r3, #0]
     338:	2300      	movs	r3, #0
     33a:	4910      	ldr	r1, [pc, #64]	; (37c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     33c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     33e:	4e10      	ldr	r6, [pc, #64]	; (380 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     340:	4c0d      	ldr	r4, [pc, #52]	; (378 <EIC_Handler+0x48>)
     342:	e00a      	b.n	35a <EIC_Handler+0x2a>
		return eics[eic_index];
     344:	490d      	ldr	r1, [pc, #52]	; (37c <EIC_Handler+0x4c>)
     346:	e008      	b.n	35a <EIC_Handler+0x2a>
     348:	7823      	ldrb	r3, [r4, #0]
     34a:	3301      	adds	r3, #1
     34c:	b2db      	uxtb	r3, r3
     34e:	7023      	strb	r3, [r4, #0]
     350:	2b0f      	cmp	r3, #15
     352:	d810      	bhi.n	376 <EIC_Handler+0x46>
		return NULL;
     354:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     356:	2b1f      	cmp	r3, #31
     358:	d9f4      	bls.n	344 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     35a:	0028      	movs	r0, r5
     35c:	4018      	ands	r0, r3
     35e:	2201      	movs	r2, #1
     360:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     362:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     364:	4210      	tst	r0, r2
     366:	d0ef      	beq.n	348 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     368:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     36a:	009b      	lsls	r3, r3, #2
     36c:	599b      	ldr	r3, [r3, r6]
     36e:	2b00      	cmp	r3, #0
     370:	d0ea      	beq.n	348 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     372:	4798      	blx	r3
     374:	e7e8      	b.n	348 <EIC_Handler+0x18>
			}
		}
	}
}
     376:	bd70      	pop	{r4, r5, r6, pc}
     378:	20000e14 	.word	0x20000e14
     37c:	40001800 	.word	0x40001800
     380:	20000e18 	.word	0x20000e18

00000384 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     384:	4a04      	ldr	r2, [pc, #16]	; (398 <_extint_enable+0x14>)
     386:	7813      	ldrb	r3, [r2, #0]
     388:	2102      	movs	r1, #2
     38a:	430b      	orrs	r3, r1
     38c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     38e:	7853      	ldrb	r3, [r2, #1]
     390:	b25b      	sxtb	r3, r3
     392:	2b00      	cmp	r3, #0
     394:	dbfb      	blt.n	38e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     396:	4770      	bx	lr
     398:	40001800 	.word	0x40001800

0000039c <_system_extint_init>:
{
     39c:	b500      	push	{lr}
     39e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     3a0:	4a12      	ldr	r2, [pc, #72]	; (3ec <_system_extint_init+0x50>)
     3a2:	6993      	ldr	r3, [r2, #24]
     3a4:	2140      	movs	r1, #64	; 0x40
     3a6:	430b      	orrs	r3, r1
     3a8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3aa:	a901      	add	r1, sp, #4
     3ac:	2300      	movs	r3, #0
     3ae:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3b0:	2005      	movs	r0, #5
     3b2:	4b0f      	ldr	r3, [pc, #60]	; (3f0 <_system_extint_init+0x54>)
     3b4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     3b6:	2005      	movs	r0, #5
     3b8:	4b0e      	ldr	r3, [pc, #56]	; (3f4 <_system_extint_init+0x58>)
     3ba:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3bc:	4a0e      	ldr	r2, [pc, #56]	; (3f8 <_system_extint_init+0x5c>)
     3be:	7813      	ldrb	r3, [r2, #0]
     3c0:	2101      	movs	r1, #1
     3c2:	430b      	orrs	r3, r1
     3c4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3c6:	7853      	ldrb	r3, [r2, #1]
     3c8:	b25b      	sxtb	r3, r3
     3ca:	2b00      	cmp	r3, #0
     3cc:	dbfb      	blt.n	3c6 <_system_extint_init+0x2a>
     3ce:	4b0b      	ldr	r3, [pc, #44]	; (3fc <_system_extint_init+0x60>)
     3d0:	0019      	movs	r1, r3
     3d2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     3d4:	2200      	movs	r2, #0
     3d6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     3d8:	4299      	cmp	r1, r3
     3da:	d1fc      	bne.n	3d6 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3dc:	2210      	movs	r2, #16
     3de:	4b08      	ldr	r3, [pc, #32]	; (400 <_system_extint_init+0x64>)
     3e0:	601a      	str	r2, [r3, #0]
	_extint_enable();
     3e2:	4b08      	ldr	r3, [pc, #32]	; (404 <_system_extint_init+0x68>)
     3e4:	4798      	blx	r3
}
     3e6:	b003      	add	sp, #12
     3e8:	bd00      	pop	{pc}
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	40000400 	.word	0x40000400
     3f0:	00001b15 	.word	0x00001b15
     3f4:	00001a89 	.word	0x00001a89
     3f8:	40001800 	.word	0x40001800
     3fc:	20000e18 	.word	0x20000e18
     400:	e000e100 	.word	0xe000e100
     404:	00000385 	.word	0x00000385

00000408 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     408:	2300      	movs	r3, #0
     40a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     40c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     40e:	2201      	movs	r2, #1
     410:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     412:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     414:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     416:	3302      	adds	r3, #2
     418:	72c3      	strb	r3, [r0, #11]
}
     41a:	4770      	bx	lr

0000041c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     41c:	b5f0      	push	{r4, r5, r6, r7, lr}
     41e:	b083      	sub	sp, #12
     420:	0005      	movs	r5, r0
     422:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     424:	a901      	add	r1, sp, #4
     426:	2300      	movs	r3, #0
     428:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     42a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     42c:	7923      	ldrb	r3, [r4, #4]
     42e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     430:	7a23      	ldrb	r3, [r4, #8]
     432:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     434:	7820      	ldrb	r0, [r4, #0]
     436:	4b15      	ldr	r3, [pc, #84]	; (48c <extint_chan_set_config+0x70>)
     438:	4798      	blx	r3
		return NULL;
     43a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     43c:	2d1f      	cmp	r5, #31
     43e:	d800      	bhi.n	442 <extint_chan_set_config+0x26>
		return eics[eic_index];
     440:	4813      	ldr	r0, [pc, #76]	; (490 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     442:	2207      	movs	r2, #7
     444:	402a      	ands	r2, r5
     446:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     448:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     44a:	7aa3      	ldrb	r3, [r4, #10]
     44c:	2b00      	cmp	r3, #0
     44e:	d001      	beq.n	454 <extint_chan_set_config+0x38>
     450:	2308      	movs	r3, #8
     452:	431f      	orrs	r7, r3
     454:	08eb      	lsrs	r3, r5, #3
     456:	009b      	lsls	r3, r3, #2
     458:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     45a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     45c:	260f      	movs	r6, #15
     45e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     460:	43b1      	bics	r1, r6
			(new_config << config_pos);
     462:	4097      	lsls	r7, r2
     464:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     466:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     468:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     46a:	7a63      	ldrb	r3, [r4, #9]
     46c:	2b00      	cmp	r3, #0
     46e:	d106      	bne.n	47e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     470:	6943      	ldr	r3, [r0, #20]
     472:	2201      	movs	r2, #1
     474:	40aa      	lsls	r2, r5
     476:	4393      	bics	r3, r2
     478:	6143      	str	r3, [r0, #20]
	}
}
     47a:	b003      	add	sp, #12
     47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     47e:	6942      	ldr	r2, [r0, #20]
     480:	2301      	movs	r3, #1
     482:	40ab      	lsls	r3, r5
     484:	4313      	orrs	r3, r2
     486:	6143      	str	r3, [r0, #20]
     488:	e7f7      	b.n	47a <extint_chan_set_config+0x5e>
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	00001c0d 	.word	0x00001c0d
     490:	40001800 	.word	0x40001800

00000494 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     494:	b500      	push	{lr}
     496:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     498:	ab01      	add	r3, sp, #4
     49a:	2280      	movs	r2, #128	; 0x80
     49c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     49e:	780a      	ldrb	r2, [r1, #0]
     4a0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4a2:	784a      	ldrb	r2, [r1, #1]
     4a4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4a6:	788a      	ldrb	r2, [r1, #2]
     4a8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4aa:	0019      	movs	r1, r3
     4ac:	4b01      	ldr	r3, [pc, #4]	; (4b4 <port_pin_set_config+0x20>)
     4ae:	4798      	blx	r3
}
     4b0:	b003      	add	sp, #12
     4b2:	bd00      	pop	{pc}
     4b4:	00001c0d 	.word	0x00001c0d

000004b8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     4b8:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     4ba:	4b14      	ldr	r3, [pc, #80]	; (50c <RTC_Handler+0x54>)
     4bc:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     4be:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
     4c0:	8ad1      	ldrh	r1, [r2, #22]
	callback_mask &= module->registered_callback;
     4c2:	8a93      	ldrh	r3, [r2, #20]
     4c4:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     4c6:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     4c8:	79e3      	ldrb	r3, [r4, #7]
     4ca:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     4cc:	b258      	sxtb	r0, r3
     4ce:	2800      	cmp	r0, #0
     4d0:	db06      	blt.n	4e0 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     4d2:	07d8      	lsls	r0, r3, #31
     4d4:	d50f      	bpl.n	4f6 <RTC_Handler+0x3e>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     4d6:	07cb      	lsls	r3, r1, #31
     4d8:	d40a      	bmi.n	4f0 <RTC_Handler+0x38>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     4da:	2301      	movs	r3, #1
     4dc:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
     4de:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     4e0:	074b      	lsls	r3, r1, #29
     4e2:	d402      	bmi.n	4ea <RTC_Handler+0x32>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     4e4:	2380      	movs	r3, #128	; 0x80
     4e6:	7223      	strb	r3, [r4, #8]
     4e8:	e7f9      	b.n	4de <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     4ea:	6913      	ldr	r3, [r2, #16]
     4ec:	4798      	blx	r3
     4ee:	e7f9      	b.n	4e4 <RTC_Handler+0x2c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     4f0:	6893      	ldr	r3, [r2, #8]
     4f2:	4798      	blx	r3
     4f4:	e7f1      	b.n	4da <RTC_Handler+0x22>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     4f6:	079b      	lsls	r3, r3, #30
     4f8:	d5f1      	bpl.n	4de <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     4fa:	078b      	lsls	r3, r1, #30
     4fc:	d402      	bmi.n	504 <RTC_Handler+0x4c>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     4fe:	2302      	movs	r3, #2
     500:	7223      	strb	r3, [r4, #8]
}
     502:	e7ec      	b.n	4de <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     504:	68d3      	ldr	r3, [r2, #12]
     506:	4798      	blx	r3
     508:	e7f9      	b.n	4fe <RTC_Handler+0x46>
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	20000e58 	.word	0x20000e58

00000510 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     510:	b5f0      	push	{r4, r5, r6, r7, lr}
     512:	46de      	mov	lr, fp
     514:	4657      	mov	r7, sl
     516:	464e      	mov	r6, r9
     518:	4645      	mov	r5, r8
     51a:	b5e0      	push	{r5, r6, r7, lr}
     51c:	b087      	sub	sp, #28
     51e:	4680      	mov	r8, r0
     520:	9104      	str	r1, [sp, #16]
     522:	0016      	movs	r6, r2
     524:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     526:	2200      	movs	r2, #0
     528:	2300      	movs	r3, #0
     52a:	2100      	movs	r1, #0
     52c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     52e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     530:	2001      	movs	r0, #1
     532:	0021      	movs	r1, r4
     534:	9600      	str	r6, [sp, #0]
     536:	9701      	str	r7, [sp, #4]
     538:	465c      	mov	r4, fp
     53a:	9403      	str	r4, [sp, #12]
     53c:	4644      	mov	r4, r8
     53e:	9405      	str	r4, [sp, #20]
     540:	e013      	b.n	56a <long_division+0x5a>
     542:	2420      	movs	r4, #32
     544:	1a64      	subs	r4, r4, r1
     546:	0005      	movs	r5, r0
     548:	40e5      	lsrs	r5, r4
     54a:	46a8      	mov	r8, r5
     54c:	e014      	b.n	578 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     54e:	9c00      	ldr	r4, [sp, #0]
     550:	9d01      	ldr	r5, [sp, #4]
     552:	1b12      	subs	r2, r2, r4
     554:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     556:	465c      	mov	r4, fp
     558:	464d      	mov	r5, r9
     55a:	432c      	orrs	r4, r5
     55c:	46a3      	mov	fp, r4
     55e:	9c03      	ldr	r4, [sp, #12]
     560:	4645      	mov	r5, r8
     562:	432c      	orrs	r4, r5
     564:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     566:	3901      	subs	r1, #1
     568:	d325      	bcc.n	5b6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     56a:	2420      	movs	r4, #32
     56c:	4264      	negs	r4, r4
     56e:	190c      	adds	r4, r1, r4
     570:	d4e7      	bmi.n	542 <long_division+0x32>
     572:	0005      	movs	r5, r0
     574:	40a5      	lsls	r5, r4
     576:	46a8      	mov	r8, r5
     578:	0004      	movs	r4, r0
     57a:	408c      	lsls	r4, r1
     57c:	46a1      	mov	r9, r4
		r = r << 1;
     57e:	1892      	adds	r2, r2, r2
     580:	415b      	adcs	r3, r3
     582:	0014      	movs	r4, r2
     584:	001d      	movs	r5, r3
		if (n & bit_shift) {
     586:	9e05      	ldr	r6, [sp, #20]
     588:	464f      	mov	r7, r9
     58a:	403e      	ands	r6, r7
     58c:	46b4      	mov	ip, r6
     58e:	9e04      	ldr	r6, [sp, #16]
     590:	4647      	mov	r7, r8
     592:	403e      	ands	r6, r7
     594:	46b2      	mov	sl, r6
     596:	4666      	mov	r6, ip
     598:	4657      	mov	r7, sl
     59a:	433e      	orrs	r6, r7
     59c:	d003      	beq.n	5a6 <long_division+0x96>
			r |= 0x01;
     59e:	0006      	movs	r6, r0
     5a0:	4326      	orrs	r6, r4
     5a2:	0032      	movs	r2, r6
     5a4:	002b      	movs	r3, r5
		if (r >= d) {
     5a6:	9c00      	ldr	r4, [sp, #0]
     5a8:	9d01      	ldr	r5, [sp, #4]
     5aa:	429d      	cmp	r5, r3
     5ac:	d8db      	bhi.n	566 <long_division+0x56>
     5ae:	d1ce      	bne.n	54e <long_division+0x3e>
     5b0:	4294      	cmp	r4, r2
     5b2:	d8d8      	bhi.n	566 <long_division+0x56>
     5b4:	e7cb      	b.n	54e <long_division+0x3e>
     5b6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     5b8:	4658      	mov	r0, fp
     5ba:	0019      	movs	r1, r3
     5bc:	b007      	add	sp, #28
     5be:	bc3c      	pop	{r2, r3, r4, r5}
     5c0:	4690      	mov	r8, r2
     5c2:	4699      	mov	r9, r3
     5c4:	46a2      	mov	sl, r4
     5c6:	46ab      	mov	fp, r5
     5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000005ca <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     5ca:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5cc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5ce:	2340      	movs	r3, #64	; 0x40
     5d0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     5d2:	4281      	cmp	r1, r0
     5d4:	d202      	bcs.n	5dc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     5d6:	0018      	movs	r0, r3
     5d8:	bd10      	pop	{r4, pc}
		baud_calculated++;
     5da:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     5dc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     5de:	1c63      	adds	r3, r4, #1
     5e0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     5e2:	4288      	cmp	r0, r1
     5e4:	d9f9      	bls.n	5da <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5e6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     5e8:	2cff      	cmp	r4, #255	; 0xff
     5ea:	d8f4      	bhi.n	5d6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     5ec:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     5ee:	2300      	movs	r3, #0
     5f0:	e7f1      	b.n	5d6 <_sercom_get_sync_baud_val+0xc>
	...

000005f4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5f6:	b083      	sub	sp, #12
     5f8:	000f      	movs	r7, r1
     5fa:	0016      	movs	r6, r2
     5fc:	aa08      	add	r2, sp, #32
     5fe:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     600:	0004      	movs	r4, r0
     602:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     604:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     606:	42bc      	cmp	r4, r7
     608:	d902      	bls.n	610 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     60a:	0010      	movs	r0, r2
     60c:	b003      	add	sp, #12
     60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     610:	2b00      	cmp	r3, #0
     612:	d114      	bne.n	63e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     614:	0002      	movs	r2, r0
     616:	0008      	movs	r0, r1
     618:	2100      	movs	r1, #0
     61a:	4c19      	ldr	r4, [pc, #100]	; (680 <_sercom_get_async_baud_val+0x8c>)
     61c:	47a0      	blx	r4
     61e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     620:	003a      	movs	r2, r7
     622:	2300      	movs	r3, #0
     624:	2000      	movs	r0, #0
     626:	4c17      	ldr	r4, [pc, #92]	; (684 <_sercom_get_async_baud_val+0x90>)
     628:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     62a:	2200      	movs	r2, #0
     62c:	2301      	movs	r3, #1
     62e:	1a12      	subs	r2, r2, r0
     630:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     632:	0c12      	lsrs	r2, r2, #16
     634:	041b      	lsls	r3, r3, #16
     636:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     638:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     63a:	2200      	movs	r2, #0
     63c:	e7e5      	b.n	60a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     63e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     640:	2b01      	cmp	r3, #1
     642:	d1f9      	bne.n	638 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     644:	000a      	movs	r2, r1
     646:	2300      	movs	r3, #0
     648:	2100      	movs	r1, #0
     64a:	4c0d      	ldr	r4, [pc, #52]	; (680 <_sercom_get_async_baud_val+0x8c>)
     64c:	47a0      	blx	r4
     64e:	0002      	movs	r2, r0
     650:	000b      	movs	r3, r1
     652:	9200      	str	r2, [sp, #0]
     654:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     656:	0038      	movs	r0, r7
     658:	2100      	movs	r1, #0
     65a:	4c0a      	ldr	r4, [pc, #40]	; (684 <_sercom_get_async_baud_val+0x90>)
     65c:	47a0      	blx	r4
     65e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     660:	2380      	movs	r3, #128	; 0x80
     662:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     664:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     666:	4298      	cmp	r0, r3
     668:	d8cf      	bhi.n	60a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     66a:	0f79      	lsrs	r1, r7, #29
     66c:	00f8      	lsls	r0, r7, #3
     66e:	9a00      	ldr	r2, [sp, #0]
     670:	9b01      	ldr	r3, [sp, #4]
     672:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     674:	00ea      	lsls	r2, r5, #3
     676:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     678:	b2d2      	uxtb	r2, r2
     67a:	0352      	lsls	r2, r2, #13
     67c:	432a      	orrs	r2, r5
     67e:	e7db      	b.n	638 <_sercom_get_async_baud_val+0x44>
     680:	00005665 	.word	0x00005665
     684:	00000511 	.word	0x00000511

00000688 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     688:	b510      	push	{r4, lr}
     68a:	b082      	sub	sp, #8
     68c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     68e:	4b0e      	ldr	r3, [pc, #56]	; (6c8 <sercom_set_gclk_generator+0x40>)
     690:	781b      	ldrb	r3, [r3, #0]
     692:	2b00      	cmp	r3, #0
     694:	d007      	beq.n	6a6 <sercom_set_gclk_generator+0x1e>
     696:	2900      	cmp	r1, #0
     698:	d105      	bne.n	6a6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     69a:	4b0b      	ldr	r3, [pc, #44]	; (6c8 <sercom_set_gclk_generator+0x40>)
     69c:	785b      	ldrb	r3, [r3, #1]
     69e:	4283      	cmp	r3, r0
     6a0:	d010      	beq.n	6c4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6a2:	201d      	movs	r0, #29
     6a4:	e00c      	b.n	6c0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     6a6:	a901      	add	r1, sp, #4
     6a8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6aa:	2013      	movs	r0, #19
     6ac:	4b07      	ldr	r3, [pc, #28]	; (6cc <sercom_set_gclk_generator+0x44>)
     6ae:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6b0:	2013      	movs	r0, #19
     6b2:	4b07      	ldr	r3, [pc, #28]	; (6d0 <sercom_set_gclk_generator+0x48>)
     6b4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     6b6:	4b04      	ldr	r3, [pc, #16]	; (6c8 <sercom_set_gclk_generator+0x40>)
     6b8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     6ba:	2201      	movs	r2, #1
     6bc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     6be:	2000      	movs	r0, #0
}
     6c0:	b002      	add	sp, #8
     6c2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     6c4:	2000      	movs	r0, #0
     6c6:	e7fb      	b.n	6c0 <sercom_set_gclk_generator+0x38>
     6c8:	20000094 	.word	0x20000094
     6cc:	00001b15 	.word	0x00001b15
     6d0:	00001a89 	.word	0x00001a89

000006d4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     6d4:	4b40      	ldr	r3, [pc, #256]	; (7d8 <_sercom_get_default_pad+0x104>)
     6d6:	4298      	cmp	r0, r3
     6d8:	d031      	beq.n	73e <_sercom_get_default_pad+0x6a>
     6da:	d90a      	bls.n	6f2 <_sercom_get_default_pad+0x1e>
     6dc:	4b3f      	ldr	r3, [pc, #252]	; (7dc <_sercom_get_default_pad+0x108>)
     6de:	4298      	cmp	r0, r3
     6e0:	d04d      	beq.n	77e <_sercom_get_default_pad+0xaa>
     6e2:	4b3f      	ldr	r3, [pc, #252]	; (7e0 <_sercom_get_default_pad+0x10c>)
     6e4:	4298      	cmp	r0, r3
     6e6:	d05a      	beq.n	79e <_sercom_get_default_pad+0xca>
     6e8:	4b3e      	ldr	r3, [pc, #248]	; (7e4 <_sercom_get_default_pad+0x110>)
     6ea:	4298      	cmp	r0, r3
     6ec:	d037      	beq.n	75e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     6ee:	2000      	movs	r0, #0
}
     6f0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     6f2:	4b3d      	ldr	r3, [pc, #244]	; (7e8 <_sercom_get_default_pad+0x114>)
     6f4:	4298      	cmp	r0, r3
     6f6:	d00c      	beq.n	712 <_sercom_get_default_pad+0x3e>
     6f8:	4b3c      	ldr	r3, [pc, #240]	; (7ec <_sercom_get_default_pad+0x118>)
     6fa:	4298      	cmp	r0, r3
     6fc:	d1f7      	bne.n	6ee <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6fe:	2901      	cmp	r1, #1
     700:	d017      	beq.n	732 <_sercom_get_default_pad+0x5e>
     702:	2900      	cmp	r1, #0
     704:	d05d      	beq.n	7c2 <_sercom_get_default_pad+0xee>
     706:	2902      	cmp	r1, #2
     708:	d015      	beq.n	736 <_sercom_get_default_pad+0x62>
     70a:	2903      	cmp	r1, #3
     70c:	d015      	beq.n	73a <_sercom_get_default_pad+0x66>
	return 0;
     70e:	2000      	movs	r0, #0
     710:	e7ee      	b.n	6f0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     712:	2901      	cmp	r1, #1
     714:	d007      	beq.n	726 <_sercom_get_default_pad+0x52>
     716:	2900      	cmp	r1, #0
     718:	d051      	beq.n	7be <_sercom_get_default_pad+0xea>
     71a:	2902      	cmp	r1, #2
     71c:	d005      	beq.n	72a <_sercom_get_default_pad+0x56>
     71e:	2903      	cmp	r1, #3
     720:	d005      	beq.n	72e <_sercom_get_default_pad+0x5a>
	return 0;
     722:	2000      	movs	r0, #0
     724:	e7e4      	b.n	6f0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     726:	4832      	ldr	r0, [pc, #200]	; (7f0 <_sercom_get_default_pad+0x11c>)
     728:	e7e2      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     72a:	4832      	ldr	r0, [pc, #200]	; (7f4 <_sercom_get_default_pad+0x120>)
     72c:	e7e0      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     72e:	4832      	ldr	r0, [pc, #200]	; (7f8 <_sercom_get_default_pad+0x124>)
     730:	e7de      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     732:	4832      	ldr	r0, [pc, #200]	; (7fc <_sercom_get_default_pad+0x128>)
     734:	e7dc      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     736:	4832      	ldr	r0, [pc, #200]	; (800 <_sercom_get_default_pad+0x12c>)
     738:	e7da      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     73a:	4832      	ldr	r0, [pc, #200]	; (804 <_sercom_get_default_pad+0x130>)
     73c:	e7d8      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     73e:	2901      	cmp	r1, #1
     740:	d007      	beq.n	752 <_sercom_get_default_pad+0x7e>
     742:	2900      	cmp	r1, #0
     744:	d03f      	beq.n	7c6 <_sercom_get_default_pad+0xf2>
     746:	2902      	cmp	r1, #2
     748:	d005      	beq.n	756 <_sercom_get_default_pad+0x82>
     74a:	2903      	cmp	r1, #3
     74c:	d005      	beq.n	75a <_sercom_get_default_pad+0x86>
	return 0;
     74e:	2000      	movs	r0, #0
     750:	e7ce      	b.n	6f0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     752:	482d      	ldr	r0, [pc, #180]	; (808 <_sercom_get_default_pad+0x134>)
     754:	e7cc      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     756:	482d      	ldr	r0, [pc, #180]	; (80c <_sercom_get_default_pad+0x138>)
     758:	e7ca      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     75a:	482d      	ldr	r0, [pc, #180]	; (810 <_sercom_get_default_pad+0x13c>)
     75c:	e7c8      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     75e:	2901      	cmp	r1, #1
     760:	d007      	beq.n	772 <_sercom_get_default_pad+0x9e>
     762:	2900      	cmp	r1, #0
     764:	d031      	beq.n	7ca <_sercom_get_default_pad+0xf6>
     766:	2902      	cmp	r1, #2
     768:	d005      	beq.n	776 <_sercom_get_default_pad+0xa2>
     76a:	2903      	cmp	r1, #3
     76c:	d005      	beq.n	77a <_sercom_get_default_pad+0xa6>
	return 0;
     76e:	2000      	movs	r0, #0
     770:	e7be      	b.n	6f0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     772:	4828      	ldr	r0, [pc, #160]	; (814 <_sercom_get_default_pad+0x140>)
     774:	e7bc      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     776:	4828      	ldr	r0, [pc, #160]	; (818 <_sercom_get_default_pad+0x144>)
     778:	e7ba      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     77a:	4828      	ldr	r0, [pc, #160]	; (81c <_sercom_get_default_pad+0x148>)
     77c:	e7b8      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     77e:	2901      	cmp	r1, #1
     780:	d007      	beq.n	792 <_sercom_get_default_pad+0xbe>
     782:	2900      	cmp	r1, #0
     784:	d023      	beq.n	7ce <_sercom_get_default_pad+0xfa>
     786:	2902      	cmp	r1, #2
     788:	d005      	beq.n	796 <_sercom_get_default_pad+0xc2>
     78a:	2903      	cmp	r1, #3
     78c:	d005      	beq.n	79a <_sercom_get_default_pad+0xc6>
	return 0;
     78e:	2000      	movs	r0, #0
     790:	e7ae      	b.n	6f0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     792:	4823      	ldr	r0, [pc, #140]	; (820 <_sercom_get_default_pad+0x14c>)
     794:	e7ac      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     796:	4823      	ldr	r0, [pc, #140]	; (824 <_sercom_get_default_pad+0x150>)
     798:	e7aa      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     79a:	4823      	ldr	r0, [pc, #140]	; (828 <_sercom_get_default_pad+0x154>)
     79c:	e7a8      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     79e:	2901      	cmp	r1, #1
     7a0:	d007      	beq.n	7b2 <_sercom_get_default_pad+0xde>
     7a2:	2900      	cmp	r1, #0
     7a4:	d015      	beq.n	7d2 <_sercom_get_default_pad+0xfe>
     7a6:	2902      	cmp	r1, #2
     7a8:	d005      	beq.n	7b6 <_sercom_get_default_pad+0xe2>
     7aa:	2903      	cmp	r1, #3
     7ac:	d005      	beq.n	7ba <_sercom_get_default_pad+0xe6>
	return 0;
     7ae:	2000      	movs	r0, #0
     7b0:	e79e      	b.n	6f0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7b2:	481e      	ldr	r0, [pc, #120]	; (82c <_sercom_get_default_pad+0x158>)
     7b4:	e79c      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     7b6:	481e      	ldr	r0, [pc, #120]	; (830 <_sercom_get_default_pad+0x15c>)
     7b8:	e79a      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     7ba:	481e      	ldr	r0, [pc, #120]	; (834 <_sercom_get_default_pad+0x160>)
     7bc:	e798      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     7be:	481e      	ldr	r0, [pc, #120]	; (838 <_sercom_get_default_pad+0x164>)
     7c0:	e796      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     7c2:	2003      	movs	r0, #3
     7c4:	e794      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     7c6:	481d      	ldr	r0, [pc, #116]	; (83c <_sercom_get_default_pad+0x168>)
     7c8:	e792      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     7ca:	481d      	ldr	r0, [pc, #116]	; (840 <_sercom_get_default_pad+0x16c>)
     7cc:	e790      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     7ce:	481d      	ldr	r0, [pc, #116]	; (844 <_sercom_get_default_pad+0x170>)
     7d0:	e78e      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     7d2:	481d      	ldr	r0, [pc, #116]	; (848 <_sercom_get_default_pad+0x174>)
     7d4:	e78c      	b.n	6f0 <_sercom_get_default_pad+0x1c>
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	42001000 	.word	0x42001000
     7dc:	42001800 	.word	0x42001800
     7e0:	42001c00 	.word	0x42001c00
     7e4:	42001400 	.word	0x42001400
     7e8:	42000800 	.word	0x42000800
     7ec:	42000c00 	.word	0x42000c00
     7f0:	00050003 	.word	0x00050003
     7f4:	00060003 	.word	0x00060003
     7f8:	00070003 	.word	0x00070003
     7fc:	00010003 	.word	0x00010003
     800:	001e0003 	.word	0x001e0003
     804:	001f0003 	.word	0x001f0003
     808:	000d0002 	.word	0x000d0002
     80c:	000e0002 	.word	0x000e0002
     810:	000f0002 	.word	0x000f0002
     814:	00110003 	.word	0x00110003
     818:	00120003 	.word	0x00120003
     81c:	00130003 	.word	0x00130003
     820:	003f0005 	.word	0x003f0005
     824:	003e0005 	.word	0x003e0005
     828:	00520005 	.word	0x00520005
     82c:	00170003 	.word	0x00170003
     830:	00180003 	.word	0x00180003
     834:	00190003 	.word	0x00190003
     838:	00040003 	.word	0x00040003
     83c:	000c0002 	.word	0x000c0002
     840:	00100003 	.word	0x00100003
     844:	00530005 	.word	0x00530005
     848:	00160003 	.word	0x00160003

0000084c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     84c:	b530      	push	{r4, r5, lr}
     84e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     850:	4b0b      	ldr	r3, [pc, #44]	; (880 <_sercom_get_sercom_inst_index+0x34>)
     852:	466a      	mov	r2, sp
     854:	cb32      	ldmia	r3!, {r1, r4, r5}
     856:	c232      	stmia	r2!, {r1, r4, r5}
     858:	cb32      	ldmia	r3!, {r1, r4, r5}
     85a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     85c:	9b00      	ldr	r3, [sp, #0]
     85e:	4283      	cmp	r3, r0
     860:	d00b      	beq.n	87a <_sercom_get_sercom_inst_index+0x2e>
     862:	2301      	movs	r3, #1
     864:	009a      	lsls	r2, r3, #2
     866:	4669      	mov	r1, sp
     868:	5852      	ldr	r2, [r2, r1]
     86a:	4282      	cmp	r2, r0
     86c:	d006      	beq.n	87c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     86e:	3301      	adds	r3, #1
     870:	2b06      	cmp	r3, #6
     872:	d1f7      	bne.n	864 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     874:	2000      	movs	r0, #0
}
     876:	b007      	add	sp, #28
     878:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     87a:	2300      	movs	r3, #0
			return i;
     87c:	b2d8      	uxtb	r0, r3
     87e:	e7fa      	b.n	876 <_sercom_get_sercom_inst_index+0x2a>
     880:	00005fb4 	.word	0x00005fb4

00000884 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     884:	4770      	bx	lr
	...

00000888 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     888:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     88a:	4b0a      	ldr	r3, [pc, #40]	; (8b4 <_sercom_set_handler+0x2c>)
     88c:	781b      	ldrb	r3, [r3, #0]
     88e:	2b00      	cmp	r3, #0
     890:	d10c      	bne.n	8ac <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     892:	4f09      	ldr	r7, [pc, #36]	; (8b8 <_sercom_set_handler+0x30>)
     894:	4e09      	ldr	r6, [pc, #36]	; (8bc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     896:	4d0a      	ldr	r5, [pc, #40]	; (8c0 <_sercom_set_handler+0x38>)
     898:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     89a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     89c:	195a      	adds	r2, r3, r5
     89e:	6014      	str	r4, [r2, #0]
     8a0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8a2:	2b18      	cmp	r3, #24
     8a4:	d1f9      	bne.n	89a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     8a6:	2201      	movs	r2, #1
     8a8:	4b02      	ldr	r3, [pc, #8]	; (8b4 <_sercom_set_handler+0x2c>)
     8aa:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     8ac:	0080      	lsls	r0, r0, #2
     8ae:	4b02      	ldr	r3, [pc, #8]	; (8b8 <_sercom_set_handler+0x30>)
     8b0:	50c1      	str	r1, [r0, r3]
}
     8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8b4:	20000096 	.word	0x20000096
     8b8:	20000098 	.word	0x20000098
     8bc:	00000885 	.word	0x00000885
     8c0:	20000e5c 	.word	0x20000e5c

000008c4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     8c4:	b500      	push	{lr}
     8c6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     8c8:	2309      	movs	r3, #9
     8ca:	466a      	mov	r2, sp
     8cc:	7013      	strb	r3, [r2, #0]
     8ce:	3301      	adds	r3, #1
     8d0:	7053      	strb	r3, [r2, #1]
     8d2:	3301      	adds	r3, #1
     8d4:	7093      	strb	r3, [r2, #2]
     8d6:	3301      	adds	r3, #1
     8d8:	70d3      	strb	r3, [r2, #3]
     8da:	3301      	adds	r3, #1
     8dc:	7113      	strb	r3, [r2, #4]
     8de:	3301      	adds	r3, #1
     8e0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     8e2:	4b03      	ldr	r3, [pc, #12]	; (8f0 <_sercom_get_interrupt_vector+0x2c>)
     8e4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     8e6:	466b      	mov	r3, sp
     8e8:	5618      	ldrsb	r0, [r3, r0]
}
     8ea:	b003      	add	sp, #12
     8ec:	bd00      	pop	{pc}
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	0000084d 	.word	0x0000084d

000008f4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     8f4:	b510      	push	{r4, lr}
     8f6:	4b02      	ldr	r3, [pc, #8]	; (900 <SERCOM0_Handler+0xc>)
     8f8:	681b      	ldr	r3, [r3, #0]
     8fa:	2000      	movs	r0, #0
     8fc:	4798      	blx	r3
     8fe:	bd10      	pop	{r4, pc}
     900:	20000098 	.word	0x20000098

00000904 <SERCOM1_Handler>:
     904:	b510      	push	{r4, lr}
     906:	4b02      	ldr	r3, [pc, #8]	; (910 <SERCOM1_Handler+0xc>)
     908:	685b      	ldr	r3, [r3, #4]
     90a:	2001      	movs	r0, #1
     90c:	4798      	blx	r3
     90e:	bd10      	pop	{r4, pc}
     910:	20000098 	.word	0x20000098

00000914 <SERCOM2_Handler>:
     914:	b510      	push	{r4, lr}
     916:	4b02      	ldr	r3, [pc, #8]	; (920 <SERCOM2_Handler+0xc>)
     918:	689b      	ldr	r3, [r3, #8]
     91a:	2002      	movs	r0, #2
     91c:	4798      	blx	r3
     91e:	bd10      	pop	{r4, pc}
     920:	20000098 	.word	0x20000098

00000924 <SERCOM3_Handler>:
     924:	b510      	push	{r4, lr}
     926:	4b02      	ldr	r3, [pc, #8]	; (930 <SERCOM3_Handler+0xc>)
     928:	68db      	ldr	r3, [r3, #12]
     92a:	2003      	movs	r0, #3
     92c:	4798      	blx	r3
     92e:	bd10      	pop	{r4, pc}
     930:	20000098 	.word	0x20000098

00000934 <SERCOM4_Handler>:
     934:	b510      	push	{r4, lr}
     936:	4b02      	ldr	r3, [pc, #8]	; (940 <SERCOM4_Handler+0xc>)
     938:	691b      	ldr	r3, [r3, #16]
     93a:	2004      	movs	r0, #4
     93c:	4798      	blx	r3
     93e:	bd10      	pop	{r4, pc}
     940:	20000098 	.word	0x20000098

00000944 <SERCOM5_Handler>:
     944:	b510      	push	{r4, lr}
     946:	4b02      	ldr	r3, [pc, #8]	; (950 <SERCOM5_Handler+0xc>)
     948:	695b      	ldr	r3, [r3, #20]
     94a:	2005      	movs	r0, #5
     94c:	4798      	blx	r3
     94e:	bd10      	pop	{r4, pc}
     950:	20000098 	.word	0x20000098

00000954 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     954:	b5f0      	push	{r4, r5, r6, r7, lr}
     956:	46d6      	mov	lr, sl
     958:	464f      	mov	r7, r9
     95a:	b580      	push	{r7, lr}
     95c:	b08b      	sub	sp, #44	; 0x2c
     95e:	4681      	mov	r9, r0
     960:	000f      	movs	r7, r1
     962:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     964:	0003      	movs	r3, r0
     966:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     968:	680b      	ldr	r3, [r1, #0]
     96a:	079b      	lsls	r3, r3, #30
     96c:	d409      	bmi.n	982 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     96e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     970:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     972:	07db      	lsls	r3, r3, #31
     974:	d400      	bmi.n	978 <spi_init+0x24>
     976:	e098      	b.n	aaa <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     978:	b00b      	add	sp, #44	; 0x2c
     97a:	bc0c      	pop	{r2, r3}
     97c:	4691      	mov	r9, r2
     97e:	469a      	mov	sl, r3
     980:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     982:	6a93      	ldr	r3, [r2, #40]	; 0x28
     984:	9305      	str	r3, [sp, #20]
     986:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     988:	9306      	str	r3, [sp, #24]
     98a:	6b13      	ldr	r3, [r2, #48]	; 0x30
     98c:	9307      	str	r3, [sp, #28]
     98e:	6b53      	ldr	r3, [r2, #52]	; 0x34
     990:	9308      	str	r3, [sp, #32]
     992:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     994:	ab05      	add	r3, sp, #20
     996:	9301      	str	r3, [sp, #4]
     998:	e00a      	b.n	9b0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     99a:	0038      	movs	r0, r7
     99c:	4b93      	ldr	r3, [pc, #588]	; (bec <spi_init+0x298>)
     99e:	4798      	blx	r3
     9a0:	e00c      	b.n	9bc <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     9a2:	230f      	movs	r3, #15
     9a4:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     9a6:	4281      	cmp	r1, r0
     9a8:	d12d      	bne.n	a06 <spi_init+0xb2>
     9aa:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     9ac:	2e04      	cmp	r6, #4
     9ae:	d02f      	beq.n	a10 <spi_init+0xbc>
     9b0:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	9a01      	ldr	r2, [sp, #4]
     9b6:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     9b8:	2800      	cmp	r0, #0
     9ba:	d0ee      	beq.n	99a <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     9bc:	1c43      	adds	r3, r0, #1
     9be:	d0f4      	beq.n	9aa <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     9c0:	0401      	lsls	r1, r0, #16
     9c2:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     9c4:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     9c6:	b2c3      	uxtb	r3, r0
     9c8:	469c      	mov	ip, r3
		return NULL;
     9ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9cc:	0602      	lsls	r2, r0, #24
     9ce:	d405      	bmi.n	9dc <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     9d0:	4663      	mov	r3, ip
     9d2:	095b      	lsrs	r3, r3, #5
     9d4:	01db      	lsls	r3, r3, #7
     9d6:	4a86      	ldr	r2, [pc, #536]	; (bf0 <spi_init+0x29c>)
     9d8:	4692      	mov	sl, r2
     9da:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     9dc:	221f      	movs	r2, #31
     9de:	4660      	mov	r0, ip
     9e0:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     9e2:	1898      	adds	r0, r3, r2
     9e4:	3040      	adds	r0, #64	; 0x40
     9e6:	7800      	ldrb	r0, [r0, #0]
     9e8:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     9ea:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     9ec:	4655      	mov	r5, sl
     9ee:	07ed      	lsls	r5, r5, #31
     9f0:	d5d9      	bpl.n	9a6 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     9f2:	0852      	lsrs	r2, r2, #1
     9f4:	189b      	adds	r3, r3, r2
     9f6:	3330      	adds	r3, #48	; 0x30
     9f8:	7818      	ldrb	r0, [r3, #0]
     9fa:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     9fc:	4663      	mov	r3, ip
     9fe:	07db      	lsls	r3, r3, #31
     a00:	d5cf      	bpl.n	9a2 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     a02:	0900      	lsrs	r0, r0, #4
     a04:	e7cf      	b.n	9a6 <spi_init+0x52>
			module->hw = NULL;
     a06:	2300      	movs	r3, #0
     a08:	464a      	mov	r2, r9
     a0a:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     a0c:	201c      	movs	r0, #28
     a0e:	e7b3      	b.n	978 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     a10:	2013      	movs	r0, #19
     a12:	4b78      	ldr	r3, [pc, #480]	; (bf4 <spi_init+0x2a0>)
     a14:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     a16:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     a18:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     a1a:	2a01      	cmp	r2, #1
     a1c:	d027      	beq.n	a6e <spi_init+0x11a>
	ctrla |= config->mux_setting;
     a1e:	6863      	ldr	r3, [r4, #4]
     a20:	68a2      	ldr	r2, [r4, #8]
     a22:	4313      	orrs	r3, r2
     a24:	68e2      	ldr	r2, [r4, #12]
     a26:	4313      	orrs	r3, r2
     a28:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     a2a:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
     a2c:	7c61      	ldrb	r1, [r4, #17]
     a2e:	2900      	cmp	r1, #0
     a30:	d001      	beq.n	a36 <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     a32:	2180      	movs	r1, #128	; 0x80
     a34:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     a36:	7ca1      	ldrb	r1, [r4, #18]
     a38:	2900      	cmp	r1, #0
     a3a:	d002      	beq.n	a42 <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     a3c:	2180      	movs	r1, #128	; 0x80
     a3e:	0289      	lsls	r1, r1, #10
     a40:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     a42:	7ce1      	ldrb	r1, [r4, #19]
     a44:	2900      	cmp	r1, #0
     a46:	d002      	beq.n	a4e <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     a48:	2180      	movs	r1, #128	; 0x80
     a4a:	0089      	lsls	r1, r1, #2
     a4c:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     a4e:	7d21      	ldrb	r1, [r4, #20]
     a50:	2900      	cmp	r1, #0
     a52:	d002      	beq.n	a5a <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     a54:	2180      	movs	r1, #128	; 0x80
     a56:	0189      	lsls	r1, r1, #6
     a58:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
     a5a:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     a5c:	2002      	movs	r0, #2
     a5e:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
     a60:	428b      	cmp	r3, r1
     a62:	d018      	beq.n	a96 <spi_init+0x142>
	module->hw = NULL;
     a64:	2300      	movs	r3, #0
     a66:	464a      	mov	r2, r9
     a68:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     a6a:	201c      	movs	r0, #28
     a6c:	e784      	b.n	978 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
     a6e:	aa04      	add	r2, sp, #16
     a70:	0001      	movs	r1, r0
     a72:	69a0      	ldr	r0, [r4, #24]
     a74:	4b60      	ldr	r3, [pc, #384]	; (bf8 <spi_init+0x2a4>)
     a76:	4798      	blx	r3
     a78:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     a7a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     a7c:	2b00      	cmp	r3, #0
     a7e:	d000      	beq.n	a82 <spi_init+0x12e>
     a80:	e77a      	b.n	978 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a82:	7b3b      	ldrb	r3, [r7, #12]
     a84:	b2db      	uxtb	r3, r3
     a86:	aa04      	add	r2, sp, #16
     a88:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     a8a:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a8c:	429a      	cmp	r2, r3
     a8e:	d000      	beq.n	a92 <spi_init+0x13e>
     a90:	e772      	b.n	978 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     a92:	350c      	adds	r5, #12
     a94:	e7c3      	b.n	a1e <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
     a96:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     a98:	4293      	cmp	r3, r2
     a9a:	d1e3      	bne.n	a64 <spi_init+0x110>
		module->mode           = config->mode;
     a9c:	7823      	ldrb	r3, [r4, #0]
     a9e:	464a      	mov	r2, r9
     aa0:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
     aa2:	7c23      	ldrb	r3, [r4, #16]
     aa4:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     aa6:	2000      	movs	r0, #0
     aa8:	e766      	b.n	978 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     aaa:	0008      	movs	r0, r1
     aac:	4b53      	ldr	r3, [pc, #332]	; (bfc <spi_init+0x2a8>)
     aae:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ab0:	4a53      	ldr	r2, [pc, #332]	; (c00 <spi_init+0x2ac>)
     ab2:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ab4:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ab6:	2301      	movs	r3, #1
     ab8:	40ab      	lsls	r3, r5
     aba:	430b      	orrs	r3, r1
     abc:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     abe:	a909      	add	r1, sp, #36	; 0x24
     ac0:	2624      	movs	r6, #36	; 0x24
     ac2:	5da3      	ldrb	r3, [r4, r6]
     ac4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ac6:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ac8:	b2c5      	uxtb	r5, r0
     aca:	0028      	movs	r0, r5
     acc:	4b4d      	ldr	r3, [pc, #308]	; (c04 <spi_init+0x2b0>)
     ace:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ad0:	0028      	movs	r0, r5
     ad2:	4b4d      	ldr	r3, [pc, #308]	; (c08 <spi_init+0x2b4>)
     ad4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ad6:	5da0      	ldrb	r0, [r4, r6]
     ad8:	2100      	movs	r1, #0
     ada:	4b4c      	ldr	r3, [pc, #304]	; (c0c <spi_init+0x2b8>)
     adc:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     ade:	7823      	ldrb	r3, [r4, #0]
     ae0:	2b01      	cmp	r3, #1
     ae2:	d019      	beq.n	b18 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ae4:	464b      	mov	r3, r9
     ae6:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ae8:	ab04      	add	r3, sp, #16
     aea:	2280      	movs	r2, #128	; 0x80
     aec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     aee:	2200      	movs	r2, #0
     af0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     af2:	2101      	movs	r1, #1
     af4:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     af6:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     af8:	7823      	ldrb	r3, [r4, #0]
     afa:	2b00      	cmp	r3, #0
     afc:	d101      	bne.n	b02 <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     afe:	ab04      	add	r3, sp, #16
     b00:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     b02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b04:	9305      	str	r3, [sp, #20]
     b06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b08:	9306      	str	r3, [sp, #24]
     b0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
     b0c:	9307      	str	r3, [sp, #28]
     b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
     b10:	9308      	str	r3, [sp, #32]
     b12:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b14:	ad05      	add	r5, sp, #20
     b16:	e011      	b.n	b3c <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b18:	683b      	ldr	r3, [r7, #0]
     b1a:	220c      	movs	r2, #12
     b1c:	4313      	orrs	r3, r2
     b1e:	603b      	str	r3, [r7, #0]
     b20:	e7e0      	b.n	ae4 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b22:	0030      	movs	r0, r6
     b24:	4b31      	ldr	r3, [pc, #196]	; (bec <spi_init+0x298>)
     b26:	4798      	blx	r3
     b28:	e00d      	b.n	b46 <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b2a:	a904      	add	r1, sp, #16
     b2c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b2e:	0c00      	lsrs	r0, r0, #16
     b30:	b2c0      	uxtb	r0, r0
     b32:	4b37      	ldr	r3, [pc, #220]	; (c10 <spi_init+0x2bc>)
     b34:	4798      	blx	r3
     b36:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     b38:	2f04      	cmp	r7, #4
     b3a:	d007      	beq.n	b4c <spi_init+0x1f8>
     b3c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b3e:	00bb      	lsls	r3, r7, #2
     b40:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     b42:	2800      	cmp	r0, #0
     b44:	d0ed      	beq.n	b22 <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
     b46:	1c43      	adds	r3, r0, #1
     b48:	d1ef      	bne.n	b2a <spi_init+0x1d6>
     b4a:	e7f4      	b.n	b36 <spi_init+0x1e2>
	module->mode             = config->mode;
     b4c:	7823      	ldrb	r3, [r4, #0]
     b4e:	464a      	mov	r2, r9
     b50:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     b52:	7c23      	ldrb	r3, [r4, #16]
     b54:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     b56:	7ca3      	ldrb	r3, [r4, #18]
     b58:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     b5a:	7d23      	ldrb	r3, [r4, #20]
     b5c:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
     b5e:	2200      	movs	r2, #0
     b60:	ab02      	add	r3, sp, #8
     b62:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     b64:	7823      	ldrb	r3, [r4, #0]
     b66:	2b01      	cmp	r3, #1
     b68:	d028      	beq.n	bbc <spi_init+0x268>
	ctrla |= config->transfer_mode;
     b6a:	6863      	ldr	r3, [r4, #4]
     b6c:	68a2      	ldr	r2, [r4, #8]
     b6e:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
     b70:	68e2      	ldr	r2, [r4, #12]
     b72:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
     b74:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
     b76:	7c62      	ldrb	r2, [r4, #17]
     b78:	2a00      	cmp	r2, #0
     b7a:	d103      	bne.n	b84 <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b7c:	4a25      	ldr	r2, [pc, #148]	; (c14 <spi_init+0x2c0>)
     b7e:	7892      	ldrb	r2, [r2, #2]
     b80:	0792      	lsls	r2, r2, #30
     b82:	d501      	bpl.n	b88 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     b84:	2280      	movs	r2, #128	; 0x80
     b86:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
     b88:	7ca2      	ldrb	r2, [r4, #18]
     b8a:	2a00      	cmp	r2, #0
     b8c:	d002      	beq.n	b94 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     b8e:	2280      	movs	r2, #128	; 0x80
     b90:	0292      	lsls	r2, r2, #10
     b92:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
     b94:	7ce2      	ldrb	r2, [r4, #19]
     b96:	2a00      	cmp	r2, #0
     b98:	d002      	beq.n	ba0 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     b9a:	2280      	movs	r2, #128	; 0x80
     b9c:	0092      	lsls	r2, r2, #2
     b9e:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
     ba0:	7d22      	ldrb	r2, [r4, #20]
     ba2:	2a00      	cmp	r2, #0
     ba4:	d002      	beq.n	bac <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     ba6:	2280      	movs	r2, #128	; 0x80
     ba8:	0192      	lsls	r2, r2, #6
     baa:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
     bac:	6832      	ldr	r2, [r6, #0]
     bae:	4313      	orrs	r3, r2
     bb0:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
     bb2:	6873      	ldr	r3, [r6, #4]
     bb4:	430b      	orrs	r3, r1
     bb6:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
     bb8:	2000      	movs	r0, #0
     bba:	e6dd      	b.n	978 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bbc:	464b      	mov	r3, r9
     bbe:	6818      	ldr	r0, [r3, #0]
     bc0:	4b0e      	ldr	r3, [pc, #56]	; (bfc <spi_init+0x2a8>)
     bc2:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bc4:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     bc6:	b2c0      	uxtb	r0, r0
     bc8:	4b0a      	ldr	r3, [pc, #40]	; (bf4 <spi_init+0x2a0>)
     bca:	4798      	blx	r3
     bcc:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     bce:	ab02      	add	r3, sp, #8
     bd0:	1d9a      	adds	r2, r3, #6
     bd2:	69a0      	ldr	r0, [r4, #24]
     bd4:	4b08      	ldr	r3, [pc, #32]	; (bf8 <spi_init+0x2a4>)
     bd6:	4798      	blx	r3
     bd8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     bda:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     bdc:	2b00      	cmp	r3, #0
     bde:	d000      	beq.n	be2 <spi_init+0x28e>
     be0:	e6ca      	b.n	978 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
     be2:	ab02      	add	r3, sp, #8
     be4:	3306      	adds	r3, #6
     be6:	781b      	ldrb	r3, [r3, #0]
     be8:	7333      	strb	r3, [r6, #12]
     bea:	e7be      	b.n	b6a <spi_init+0x216>
     bec:	000006d5 	.word	0x000006d5
     bf0:	41004400 	.word	0x41004400
     bf4:	00001b31 	.word	0x00001b31
     bf8:	000005cb 	.word	0x000005cb
     bfc:	0000084d 	.word	0x0000084d
     c00:	40000400 	.word	0x40000400
     c04:	00001b15 	.word	0x00001b15
     c08:	00001a89 	.word	0x00001a89
     c0c:	00000689 	.word	0x00000689
     c10:	00001c0d 	.word	0x00001c0d
     c14:	41002000 	.word	0x41002000

00000c18 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     c18:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     c1a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     c1c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     c1e:	2c01      	cmp	r4, #1
     c20:	d001      	beq.n	c26 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     c22:	0018      	movs	r0, r3
     c24:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     c26:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
     c28:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
     c2a:	2c00      	cmp	r4, #0
     c2c:	d1f9      	bne.n	c22 <spi_select_slave+0xa>
		if (select) {
     c2e:	2a00      	cmp	r2, #0
     c30:	d058      	beq.n	ce4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
     c32:	784b      	ldrb	r3, [r1, #1]
     c34:	2b00      	cmp	r3, #0
     c36:	d044      	beq.n	cc2 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c38:	6803      	ldr	r3, [r0, #0]
     c3a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     c3c:	07db      	lsls	r3, r3, #31
     c3e:	d410      	bmi.n	c62 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
     c40:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     c42:	09d1      	lsrs	r1, r2, #7
		return NULL;
     c44:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c46:	2900      	cmp	r1, #0
     c48:	d104      	bne.n	c54 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
     c4a:	0953      	lsrs	r3, r2, #5
     c4c:	01db      	lsls	r3, r3, #7
     c4e:	492e      	ldr	r1, [pc, #184]	; (d08 <spi_select_slave+0xf0>)
     c50:	468c      	mov	ip, r1
     c52:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c54:	211f      	movs	r1, #31
     c56:	4011      	ands	r1, r2
     c58:	2201      	movs	r2, #1
     c5a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     c5c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     c5e:	2305      	movs	r3, #5
     c60:	e7df      	b.n	c22 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     c62:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     c64:	09d4      	lsrs	r4, r2, #7
		return NULL;
     c66:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c68:	2c00      	cmp	r4, #0
     c6a:	d104      	bne.n	c76 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     c6c:	0953      	lsrs	r3, r2, #5
     c6e:	01db      	lsls	r3, r3, #7
     c70:	4c25      	ldr	r4, [pc, #148]	; (d08 <spi_select_slave+0xf0>)
     c72:	46a4      	mov	ip, r4
     c74:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c76:	241f      	movs	r4, #31
     c78:	4014      	ands	r4, r2
     c7a:	2201      	movs	r2, #1
     c7c:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     c7e:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c80:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c82:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     c84:	07d2      	lsls	r2, r2, #31
     c86:	d501      	bpl.n	c8c <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     c88:	788a      	ldrb	r2, [r1, #2]
     c8a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     c8c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
     c8e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
     c90:	2a00      	cmp	r2, #0
     c92:	d1c6      	bne.n	c22 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
     c94:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
     c96:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     c98:	7e13      	ldrb	r3, [r2, #24]
     c9a:	420b      	tst	r3, r1
     c9c:	d0fc      	beq.n	c98 <spi_select_slave+0x80>
     c9e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
     ca0:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     ca2:	0749      	lsls	r1, r1, #29
     ca4:	d5bd      	bpl.n	c22 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     ca6:	8b53      	ldrh	r3, [r2, #26]
     ca8:	075b      	lsls	r3, r3, #29
     caa:	d501      	bpl.n	cb0 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     cac:	2304      	movs	r3, #4
     cae:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     cb0:	7983      	ldrb	r3, [r0, #6]
     cb2:	2b01      	cmp	r3, #1
     cb4:	d002      	beq.n	cbc <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     cb6:	6a93      	ldr	r3, [r2, #40]	; 0x28
     cb8:	2300      	movs	r3, #0
     cba:	e7b2      	b.n	c22 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     cbc:	6a93      	ldr	r3, [r2, #40]	; 0x28
     cbe:	2300      	movs	r3, #0
     cc0:	e7af      	b.n	c22 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     cc2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     cc4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     cc6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     cc8:	2900      	cmp	r1, #0
     cca:	d104      	bne.n	cd6 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
     ccc:	0953      	lsrs	r3, r2, #5
     cce:	01db      	lsls	r3, r3, #7
     cd0:	490d      	ldr	r1, [pc, #52]	; (d08 <spi_select_slave+0xf0>)
     cd2:	468c      	mov	ip, r1
     cd4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cd6:	211f      	movs	r1, #31
     cd8:	4011      	ands	r1, r2
     cda:	2201      	movs	r2, #1
     cdc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     cde:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     ce0:	2300      	movs	r3, #0
     ce2:	e79e      	b.n	c22 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
     ce4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     ce6:	09d1      	lsrs	r1, r2, #7
		return NULL;
     ce8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     cea:	2900      	cmp	r1, #0
     cec:	d104      	bne.n	cf8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
     cee:	0953      	lsrs	r3, r2, #5
     cf0:	01db      	lsls	r3, r3, #7
     cf2:	4905      	ldr	r1, [pc, #20]	; (d08 <spi_select_slave+0xf0>)
     cf4:	468c      	mov	ip, r1
     cf6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cf8:	211f      	movs	r1, #31
     cfa:	4011      	ands	r1, r2
     cfc:	2201      	movs	r2, #1
     cfe:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     d00:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     d02:	2300      	movs	r3, #0
     d04:	e78d      	b.n	c22 <spi_select_slave+0xa>
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	41004400 	.word	0x41004400

00000d0c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0e:	46de      	mov	lr, fp
     d10:	4657      	mov	r7, sl
     d12:	464e      	mov	r6, r9
     d14:	4645      	mov	r5, r8
     d16:	b5e0      	push	{r5, r6, r7, lr}
     d18:	b091      	sub	sp, #68	; 0x44
     d1a:	0005      	movs	r5, r0
     d1c:	000c      	movs	r4, r1
     d1e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     d20:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d22:	0008      	movs	r0, r1
     d24:	4bbc      	ldr	r3, [pc, #752]	; (1018 <usart_init+0x30c>)
     d26:	4798      	blx	r3
     d28:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d2a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d2c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d2e:	07db      	lsls	r3, r3, #31
     d30:	d506      	bpl.n	d40 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     d32:	b011      	add	sp, #68	; 0x44
     d34:	bc3c      	pop	{r2, r3, r4, r5}
     d36:	4690      	mov	r8, r2
     d38:	4699      	mov	r9, r3
     d3a:	46a2      	mov	sl, r4
     d3c:	46ab      	mov	fp, r5
     d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d40:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     d42:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d44:	079b      	lsls	r3, r3, #30
     d46:	d4f4      	bmi.n	d32 <usart_init+0x26>
     d48:	49b4      	ldr	r1, [pc, #720]	; (101c <usart_init+0x310>)
     d4a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d4c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d4e:	2301      	movs	r3, #1
     d50:	40bb      	lsls	r3, r7
     d52:	4303      	orrs	r3, r0
     d54:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     d56:	a90f      	add	r1, sp, #60	; 0x3c
     d58:	272d      	movs	r7, #45	; 0x2d
     d5a:	5df3      	ldrb	r3, [r6, r7]
     d5c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d5e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d60:	b2d3      	uxtb	r3, r2
     d62:	9302      	str	r3, [sp, #8]
     d64:	0018      	movs	r0, r3
     d66:	4bae      	ldr	r3, [pc, #696]	; (1020 <usart_init+0x314>)
     d68:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d6a:	9802      	ldr	r0, [sp, #8]
     d6c:	4bad      	ldr	r3, [pc, #692]	; (1024 <usart_init+0x318>)
     d6e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d70:	5df0      	ldrb	r0, [r6, r7]
     d72:	2100      	movs	r1, #0
     d74:	4bac      	ldr	r3, [pc, #688]	; (1028 <usart_init+0x31c>)
     d76:	4798      	blx	r3
	module->character_size = config->character_size;
     d78:	7af3      	ldrb	r3, [r6, #11]
     d7a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     d7c:	2324      	movs	r3, #36	; 0x24
     d7e:	5cf3      	ldrb	r3, [r6, r3]
     d80:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     d82:	2325      	movs	r3, #37	; 0x25
     d84:	5cf3      	ldrb	r3, [r6, r3]
     d86:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     d88:	7ef3      	ldrb	r3, [r6, #27]
     d8a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     d8c:	7f33      	ldrb	r3, [r6, #28]
     d8e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     d90:	682b      	ldr	r3, [r5, #0]
     d92:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d94:	0018      	movs	r0, r3
     d96:	4ba0      	ldr	r3, [pc, #640]	; (1018 <usart_init+0x30c>)
     d98:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d9a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     d9c:	2200      	movs	r2, #0
     d9e:	230e      	movs	r3, #14
     da0:	a906      	add	r1, sp, #24
     da2:	468c      	mov	ip, r1
     da4:	4463      	add	r3, ip
     da6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     da8:	8a32      	ldrh	r2, [r6, #16]
     daa:	9202      	str	r2, [sp, #8]
     dac:	2380      	movs	r3, #128	; 0x80
     dae:	01db      	lsls	r3, r3, #7
     db0:	429a      	cmp	r2, r3
     db2:	d100      	bne.n	db6 <usart_init+0xaa>
     db4:	e09e      	b.n	ef4 <usart_init+0x1e8>
     db6:	d90f      	bls.n	dd8 <usart_init+0xcc>
     db8:	23c0      	movs	r3, #192	; 0xc0
     dba:	01db      	lsls	r3, r3, #7
     dbc:	9a02      	ldr	r2, [sp, #8]
     dbe:	429a      	cmp	r2, r3
     dc0:	d100      	bne.n	dc4 <usart_init+0xb8>
     dc2:	e092      	b.n	eea <usart_init+0x1de>
     dc4:	2380      	movs	r3, #128	; 0x80
     dc6:	021b      	lsls	r3, r3, #8
     dc8:	429a      	cmp	r2, r3
     dca:	d000      	beq.n	dce <usart_init+0xc2>
     dcc:	e11f      	b.n	100e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     dce:	2303      	movs	r3, #3
     dd0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     dd2:	2300      	movs	r3, #0
     dd4:	9307      	str	r3, [sp, #28]
     dd6:	e008      	b.n	dea <usart_init+0xde>
	switch (config->sample_rate) {
     dd8:	2380      	movs	r3, #128	; 0x80
     dda:	019b      	lsls	r3, r3, #6
     ddc:	429a      	cmp	r2, r3
     dde:	d000      	beq.n	de2 <usart_init+0xd6>
     de0:	e115      	b.n	100e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     de2:	2310      	movs	r3, #16
     de4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     de6:	3b0f      	subs	r3, #15
     de8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     dea:	6833      	ldr	r3, [r6, #0]
     dec:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     dee:	68f3      	ldr	r3, [r6, #12]
     df0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     df2:	6973      	ldr	r3, [r6, #20]
     df4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     df6:	7e33      	ldrb	r3, [r6, #24]
     df8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     dfa:	2326      	movs	r3, #38	; 0x26
     dfc:	5cf3      	ldrb	r3, [r6, r3]
     dfe:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     e00:	6873      	ldr	r3, [r6, #4]
     e02:	4699      	mov	r9, r3
	switch (transfer_mode)
     e04:	2b00      	cmp	r3, #0
     e06:	d100      	bne.n	e0a <usart_init+0xfe>
     e08:	e0a0      	b.n	f4c <usart_init+0x240>
     e0a:	2380      	movs	r3, #128	; 0x80
     e0c:	055b      	lsls	r3, r3, #21
     e0e:	4599      	cmp	r9, r3
     e10:	d100      	bne.n	e14 <usart_init+0x108>
     e12:	e084      	b.n	f1e <usart_init+0x212>
	if(config->encoding_format_enable) {
     e14:	7e73      	ldrb	r3, [r6, #25]
     e16:	2b00      	cmp	r3, #0
     e18:	d002      	beq.n	e20 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     e1a:	7eb3      	ldrb	r3, [r6, #26]
     e1c:	4642      	mov	r2, r8
     e1e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     e20:	682a      	ldr	r2, [r5, #0]
     e22:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     e24:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     e26:	2b00      	cmp	r3, #0
     e28:	d1fc      	bne.n	e24 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     e2a:	330e      	adds	r3, #14
     e2c:	aa06      	add	r2, sp, #24
     e2e:	4694      	mov	ip, r2
     e30:	4463      	add	r3, ip
     e32:	881b      	ldrh	r3, [r3, #0]
     e34:	4642      	mov	r2, r8
     e36:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     e38:	9b05      	ldr	r3, [sp, #20]
     e3a:	9a03      	ldr	r2, [sp, #12]
     e3c:	4313      	orrs	r3, r2
     e3e:	9a04      	ldr	r2, [sp, #16]
     e40:	4313      	orrs	r3, r2
     e42:	464a      	mov	r2, r9
     e44:	4313      	orrs	r3, r2
     e46:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e48:	465b      	mov	r3, fp
     e4a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     e4c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e4e:	4653      	mov	r3, sl
     e50:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     e52:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     e54:	2327      	movs	r3, #39	; 0x27
     e56:	5cf3      	ldrb	r3, [r6, r3]
     e58:	2b00      	cmp	r3, #0
     e5a:	d101      	bne.n	e60 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     e5c:	3304      	adds	r3, #4
     e5e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     e60:	7e73      	ldrb	r3, [r6, #25]
     e62:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     e64:	7f32      	ldrb	r2, [r6, #28]
     e66:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     e68:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     e6a:	7f72      	ldrb	r2, [r6, #29]
     e6c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     e6e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     e70:	2224      	movs	r2, #36	; 0x24
     e72:	5cb2      	ldrb	r2, [r6, r2]
     e74:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     e76:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     e78:	2225      	movs	r2, #37	; 0x25
     e7a:	5cb2      	ldrb	r2, [r6, r2]
     e7c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     e7e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     e80:	7ab1      	ldrb	r1, [r6, #10]
     e82:	7af2      	ldrb	r2, [r6, #11]
     e84:	4311      	orrs	r1, r2
     e86:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     e88:	8933      	ldrh	r3, [r6, #8]
     e8a:	2bff      	cmp	r3, #255	; 0xff
     e8c:	d100      	bne.n	e90 <usart_init+0x184>
     e8e:	e081      	b.n	f94 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     e90:	2280      	movs	r2, #128	; 0x80
     e92:	0452      	lsls	r2, r2, #17
     e94:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     e96:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     e98:	232c      	movs	r3, #44	; 0x2c
     e9a:	5cf3      	ldrb	r3, [r6, r3]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d103      	bne.n	ea8 <usart_init+0x19c>
     ea0:	4b62      	ldr	r3, [pc, #392]	; (102c <usart_init+0x320>)
     ea2:	789b      	ldrb	r3, [r3, #2]
     ea4:	079b      	lsls	r3, r3, #30
     ea6:	d501      	bpl.n	eac <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     ea8:	2380      	movs	r3, #128	; 0x80
     eaa:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     eac:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     eae:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     eb0:	2b00      	cmp	r3, #0
     eb2:	d1fc      	bne.n	eae <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     eb4:	4643      	mov	r3, r8
     eb6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     eb8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     eba:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     ebc:	2b00      	cmp	r3, #0
     ebe:	d1fc      	bne.n	eba <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     ec0:	4643      	mov	r3, r8
     ec2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ec4:	ab0e      	add	r3, sp, #56	; 0x38
     ec6:	2280      	movs	r2, #128	; 0x80
     ec8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     eca:	2200      	movs	r2, #0
     ecc:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     ece:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ed0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     ed2:	6b33      	ldr	r3, [r6, #48]	; 0x30
     ed4:	930a      	str	r3, [sp, #40]	; 0x28
     ed6:	6b73      	ldr	r3, [r6, #52]	; 0x34
     ed8:	930b      	str	r3, [sp, #44]	; 0x2c
     eda:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     edc:	930c      	str	r3, [sp, #48]	; 0x30
     ede:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     ee0:	9302      	str	r3, [sp, #8]
     ee2:	930d      	str	r3, [sp, #52]	; 0x34
     ee4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ee6:	ae0a      	add	r6, sp, #40	; 0x28
     ee8:	e063      	b.n	fb2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     eea:	2308      	movs	r3, #8
     eec:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     eee:	3b07      	subs	r3, #7
     ef0:	9307      	str	r3, [sp, #28]
     ef2:	e77a      	b.n	dea <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     ef4:	6833      	ldr	r3, [r6, #0]
     ef6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     ef8:	68f3      	ldr	r3, [r6, #12]
     efa:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     efc:	6973      	ldr	r3, [r6, #20]
     efe:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f00:	7e33      	ldrb	r3, [r6, #24]
     f02:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f04:	2326      	movs	r3, #38	; 0x26
     f06:	5cf3      	ldrb	r3, [r6, r3]
     f08:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     f0a:	6873      	ldr	r3, [r6, #4]
     f0c:	4699      	mov	r9, r3
	switch (transfer_mode)
     f0e:	2b00      	cmp	r3, #0
     f10:	d018      	beq.n	f44 <usart_init+0x238>
     f12:	2380      	movs	r3, #128	; 0x80
     f14:	055b      	lsls	r3, r3, #21
     f16:	4599      	cmp	r9, r3
     f18:	d001      	beq.n	f1e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     f1a:	2000      	movs	r0, #0
     f1c:	e025      	b.n	f6a <usart_init+0x25e>
			if (!config->use_external_clock) {
     f1e:	2327      	movs	r3, #39	; 0x27
     f20:	5cf3      	ldrb	r3, [r6, r3]
     f22:	2b00      	cmp	r3, #0
     f24:	d000      	beq.n	f28 <usart_init+0x21c>
     f26:	e775      	b.n	e14 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     f28:	6a33      	ldr	r3, [r6, #32]
     f2a:	001f      	movs	r7, r3
     f2c:	b2c0      	uxtb	r0, r0
     f2e:	4b40      	ldr	r3, [pc, #256]	; (1030 <usart_init+0x324>)
     f30:	4798      	blx	r3
     f32:	0001      	movs	r1, r0
     f34:	220e      	movs	r2, #14
     f36:	ab06      	add	r3, sp, #24
     f38:	469c      	mov	ip, r3
     f3a:	4462      	add	r2, ip
     f3c:	0038      	movs	r0, r7
     f3e:	4b3d      	ldr	r3, [pc, #244]	; (1034 <usart_init+0x328>)
     f40:	4798      	blx	r3
     f42:	e012      	b.n	f6a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f44:	2308      	movs	r3, #8
     f46:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f48:	2300      	movs	r3, #0
     f4a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     f4c:	2327      	movs	r3, #39	; 0x27
     f4e:	5cf3      	ldrb	r3, [r6, r3]
     f50:	2b00      	cmp	r3, #0
     f52:	d00e      	beq.n	f72 <usart_init+0x266>
				status_code =
     f54:	9b06      	ldr	r3, [sp, #24]
     f56:	9300      	str	r3, [sp, #0]
     f58:	9b07      	ldr	r3, [sp, #28]
     f5a:	220e      	movs	r2, #14
     f5c:	a906      	add	r1, sp, #24
     f5e:	468c      	mov	ip, r1
     f60:	4462      	add	r2, ip
     f62:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     f64:	6a30      	ldr	r0, [r6, #32]
     f66:	4f34      	ldr	r7, [pc, #208]	; (1038 <usart_init+0x32c>)
     f68:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     f6a:	2800      	cmp	r0, #0
     f6c:	d000      	beq.n	f70 <usart_init+0x264>
     f6e:	e6e0      	b.n	d32 <usart_init+0x26>
     f70:	e750      	b.n	e14 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     f72:	6a33      	ldr	r3, [r6, #32]
     f74:	001f      	movs	r7, r3
     f76:	b2c0      	uxtb	r0, r0
     f78:	4b2d      	ldr	r3, [pc, #180]	; (1030 <usart_init+0x324>)
     f7a:	4798      	blx	r3
     f7c:	0001      	movs	r1, r0
				status_code =
     f7e:	9b06      	ldr	r3, [sp, #24]
     f80:	9300      	str	r3, [sp, #0]
     f82:	9b07      	ldr	r3, [sp, #28]
     f84:	220e      	movs	r2, #14
     f86:	a806      	add	r0, sp, #24
     f88:	4684      	mov	ip, r0
     f8a:	4462      	add	r2, ip
     f8c:	0038      	movs	r0, r7
     f8e:	4f2a      	ldr	r7, [pc, #168]	; (1038 <usart_init+0x32c>)
     f90:	47b8      	blx	r7
     f92:	e7ea      	b.n	f6a <usart_init+0x25e>
		if(config->lin_slave_enable) {
     f94:	7ef3      	ldrb	r3, [r6, #27]
     f96:	2b00      	cmp	r3, #0
     f98:	d100      	bne.n	f9c <usart_init+0x290>
     f9a:	e77d      	b.n	e98 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     f9c:	2380      	movs	r3, #128	; 0x80
     f9e:	04db      	lsls	r3, r3, #19
     fa0:	431f      	orrs	r7, r3
     fa2:	e779      	b.n	e98 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     fa4:	0020      	movs	r0, r4
     fa6:	4b25      	ldr	r3, [pc, #148]	; (103c <usart_init+0x330>)
     fa8:	4798      	blx	r3
     faa:	e007      	b.n	fbc <usart_init+0x2b0>
     fac:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     fae:	2f04      	cmp	r7, #4
     fb0:	d00d      	beq.n	fce <usart_init+0x2c2>
     fb2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fb4:	00bb      	lsls	r3, r7, #2
     fb6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     fb8:	2800      	cmp	r0, #0
     fba:	d0f3      	beq.n	fa4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     fbc:	1c43      	adds	r3, r0, #1
     fbe:	d0f5      	beq.n	fac <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     fc0:	a90e      	add	r1, sp, #56	; 0x38
     fc2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     fc4:	0c00      	lsrs	r0, r0, #16
     fc6:	b2c0      	uxtb	r0, r0
     fc8:	4b1d      	ldr	r3, [pc, #116]	; (1040 <usart_init+0x334>)
     fca:	4798      	blx	r3
     fcc:	e7ee      	b.n	fac <usart_init+0x2a0>
		module->callback[i]            = NULL;
     fce:	2300      	movs	r3, #0
     fd0:	60eb      	str	r3, [r5, #12]
     fd2:	612b      	str	r3, [r5, #16]
     fd4:	616b      	str	r3, [r5, #20]
     fd6:	61ab      	str	r3, [r5, #24]
     fd8:	61eb      	str	r3, [r5, #28]
     fda:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     fdc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     fde:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     fe0:	2200      	movs	r2, #0
     fe2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     fe4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     fe6:	3330      	adds	r3, #48	; 0x30
     fe8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     fea:	3301      	adds	r3, #1
     fec:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     fee:	3301      	adds	r3, #1
     ff0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     ff2:	3301      	adds	r3, #1
     ff4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     ff6:	6828      	ldr	r0, [r5, #0]
     ff8:	4b07      	ldr	r3, [pc, #28]	; (1018 <usart_init+0x30c>)
     ffa:	4798      	blx	r3
     ffc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     ffe:	4911      	ldr	r1, [pc, #68]	; (1044 <usart_init+0x338>)
    1000:	4b11      	ldr	r3, [pc, #68]	; (1048 <usart_init+0x33c>)
    1002:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1004:	00a4      	lsls	r4, r4, #2
    1006:	4b11      	ldr	r3, [pc, #68]	; (104c <usart_init+0x340>)
    1008:	50e5      	str	r5, [r4, r3]
	return status_code;
    100a:	2000      	movs	r0, #0
    100c:	e691      	b.n	d32 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    100e:	2310      	movs	r3, #16
    1010:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1012:	2300      	movs	r3, #0
    1014:	9307      	str	r3, [sp, #28]
    1016:	e6e8      	b.n	dea <usart_init+0xde>
    1018:	0000084d 	.word	0x0000084d
    101c:	40000400 	.word	0x40000400
    1020:	00001b15 	.word	0x00001b15
    1024:	00001a89 	.word	0x00001a89
    1028:	00000689 	.word	0x00000689
    102c:	41002000 	.word	0x41002000
    1030:	00001b31 	.word	0x00001b31
    1034:	000005cb 	.word	0x000005cb
    1038:	000005f5 	.word	0x000005f5
    103c:	000006d5 	.word	0x000006d5
    1040:	00001c0d 	.word	0x00001c0d
    1044:	00001245 	.word	0x00001245
    1048:	00000889 	.word	0x00000889
    104c:	20000e5c 	.word	0x20000e5c

00001050 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1050:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1052:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1054:	2a00      	cmp	r2, #0
    1056:	d101      	bne.n	105c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1058:	0018      	movs	r0, r3
    105a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    105c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    105e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1060:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1062:	2a00      	cmp	r2, #0
    1064:	d1f8      	bne.n	1058 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1066:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1068:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    106a:	2a00      	cmp	r2, #0
    106c:	d1fc      	bne.n	1068 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    106e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1070:	2102      	movs	r1, #2
    1072:	7e1a      	ldrb	r2, [r3, #24]
    1074:	420a      	tst	r2, r1
    1076:	d0fc      	beq.n	1072 <usart_write_wait+0x22>
	return STATUS_OK;
    1078:	2300      	movs	r3, #0
    107a:	e7ed      	b.n	1058 <usart_write_wait+0x8>

0000107c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    107c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    107e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1080:	2a00      	cmp	r2, #0
    1082:	d101      	bne.n	1088 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1084:	0018      	movs	r0, r3
    1086:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1088:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    108a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    108c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    108e:	2a00      	cmp	r2, #0
    1090:	d1f8      	bne.n	1084 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1092:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1094:	7e10      	ldrb	r0, [r2, #24]
    1096:	0740      	lsls	r0, r0, #29
    1098:	d5f4      	bpl.n	1084 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    109a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    109c:	2b00      	cmp	r3, #0
    109e:	d1fc      	bne.n	109a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    10a0:	8b53      	ldrh	r3, [r2, #26]
    10a2:	b2db      	uxtb	r3, r3
	if (error_code) {
    10a4:	0698      	lsls	r0, r3, #26
    10a6:	d01d      	beq.n	10e4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    10a8:	0798      	lsls	r0, r3, #30
    10aa:	d503      	bpl.n	10b4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    10ac:	2302      	movs	r3, #2
    10ae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    10b0:	3318      	adds	r3, #24
    10b2:	e7e7      	b.n	1084 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    10b4:	0758      	lsls	r0, r3, #29
    10b6:	d503      	bpl.n	10c0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    10b8:	2304      	movs	r3, #4
    10ba:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    10bc:	331a      	adds	r3, #26
    10be:	e7e1      	b.n	1084 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    10c0:	07d8      	lsls	r0, r3, #31
    10c2:	d503      	bpl.n	10cc <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    10c4:	2301      	movs	r3, #1
    10c6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    10c8:	3312      	adds	r3, #18
    10ca:	e7db      	b.n	1084 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    10cc:	06d8      	lsls	r0, r3, #27
    10ce:	d503      	bpl.n	10d8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    10d0:	2310      	movs	r3, #16
    10d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    10d4:	3332      	adds	r3, #50	; 0x32
    10d6:	e7d5      	b.n	1084 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    10d8:	069b      	lsls	r3, r3, #26
    10da:	d503      	bpl.n	10e4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    10dc:	2320      	movs	r3, #32
    10de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    10e0:	3321      	adds	r3, #33	; 0x21
    10e2:	e7cf      	b.n	1084 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    10e4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    10e6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    10e8:	2300      	movs	r3, #0
    10ea:	e7cb      	b.n	1084 <usart_read_wait+0x8>

000010ec <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    10ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ee:	46ce      	mov	lr, r9
    10f0:	4647      	mov	r7, r8
    10f2:	b580      	push	{r7, lr}
    10f4:	b083      	sub	sp, #12
    10f6:	0005      	movs	r5, r0
    10f8:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    10fa:	2017      	movs	r0, #23
	if (length == 0) {
    10fc:	2a00      	cmp	r2, #0
    10fe:	d104      	bne.n	110a <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    1100:	b003      	add	sp, #12
    1102:	bc0c      	pop	{r2, r3}
    1104:	4690      	mov	r8, r2
    1106:	4699      	mov	r9, r3
    1108:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    110a:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    110c:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    110e:	2b00      	cmp	r3, #0
    1110:	d0f6      	beq.n	1100 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1112:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1114:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1116:	2b00      	cmp	r3, #0
    1118:	d1fc      	bne.n	1114 <usart_write_buffer_wait+0x28>
	while (length--) {
    111a:	3a01      	subs	r2, #1
    111c:	b293      	uxth	r3, r2
    111e:	4699      	mov	r9, r3
    1120:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1122:	2701      	movs	r7, #1
	while (length--) {
    1124:	4b1f      	ldr	r3, [pc, #124]	; (11a4 <usart_write_buffer_wait+0xb8>)
    1126:	4698      	mov	r8, r3
    1128:	e011      	b.n	114e <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    112a:	1c73      	adds	r3, r6, #1
    112c:	b29b      	uxth	r3, r3
    112e:	9a01      	ldr	r2, [sp, #4]
    1130:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1132:	796a      	ldrb	r2, [r5, #5]
    1134:	2a01      	cmp	r2, #1
    1136:	d017      	beq.n	1168 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    1138:	b289      	uxth	r1, r1
    113a:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    113c:	0028      	movs	r0, r5
    113e:	4b1a      	ldr	r3, [pc, #104]	; (11a8 <usart_write_buffer_wait+0xbc>)
    1140:	4798      	blx	r3
	while (length--) {
    1142:	464b      	mov	r3, r9
    1144:	3b01      	subs	r3, #1
    1146:	b29b      	uxth	r3, r3
    1148:	4699      	mov	r9, r3
    114a:	4543      	cmp	r3, r8
    114c:	d013      	beq.n	1176 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    114e:	7e23      	ldrb	r3, [r4, #24]
    1150:	423b      	tst	r3, r7
    1152:	d1ea      	bne.n	112a <usart_write_buffer_wait+0x3e>
    1154:	4b13      	ldr	r3, [pc, #76]	; (11a4 <usart_write_buffer_wait+0xb8>)
    1156:	7e22      	ldrb	r2, [r4, #24]
    1158:	423a      	tst	r2, r7
    115a:	d1e6      	bne.n	112a <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    115c:	2b01      	cmp	r3, #1
    115e:	d019      	beq.n	1194 <usart_write_buffer_wait+0xa8>
    1160:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1162:	2b00      	cmp	r3, #0
    1164:	d1f7      	bne.n	1156 <usart_write_buffer_wait+0x6a>
    1166:	e7e0      	b.n	112a <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1168:	3602      	adds	r6, #2
    116a:	b2b6      	uxth	r6, r6
    116c:	9a01      	ldr	r2, [sp, #4]
    116e:	5cd3      	ldrb	r3, [r2, r3]
    1170:	021b      	lsls	r3, r3, #8
    1172:	4319      	orrs	r1, r3
    1174:	e7e2      	b.n	113c <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1176:	7e23      	ldrb	r3, [r4, #24]
    1178:	079b      	lsls	r3, r3, #30
    117a:	d40d      	bmi.n	1198 <usart_write_buffer_wait+0xac>
    117c:	4b09      	ldr	r3, [pc, #36]	; (11a4 <usart_write_buffer_wait+0xb8>)
    117e:	2102      	movs	r1, #2
    1180:	7e22      	ldrb	r2, [r4, #24]
    1182:	420a      	tst	r2, r1
    1184:	d10a      	bne.n	119c <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    1186:	2b01      	cmp	r3, #1
    1188:	d00a      	beq.n	11a0 <usart_write_buffer_wait+0xb4>
    118a:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    118c:	2b00      	cmp	r3, #0
    118e:	d1f7      	bne.n	1180 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    1190:	2000      	movs	r0, #0
    1192:	e7b5      	b.n	1100 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    1194:	2012      	movs	r0, #18
    1196:	e7b3      	b.n	1100 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    1198:	2000      	movs	r0, #0
    119a:	e7b1      	b.n	1100 <usart_write_buffer_wait+0x14>
    119c:	2000      	movs	r0, #0
    119e:	e7af      	b.n	1100 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    11a0:	2012      	movs	r0, #18
    11a2:	e7ad      	b.n	1100 <usart_write_buffer_wait+0x14>
    11a4:	0000ffff 	.word	0x0000ffff
    11a8:	00001051 	.word	0x00001051

000011ac <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    11ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ae:	46d6      	mov	lr, sl
    11b0:	b500      	push	{lr}
    11b2:	b084      	sub	sp, #16
    11b4:	0004      	movs	r4, r0
    11b6:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    11b8:	2017      	movs	r0, #23
	if (length == 0) {
    11ba:	2a00      	cmp	r2, #0
    11bc:	d103      	bne.n	11c6 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    11be:	b004      	add	sp, #16
    11c0:	bc04      	pop	{r2}
    11c2:	4692      	mov	sl, r2
    11c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    11c6:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    11c8:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    11ca:	2b00      	cmp	r3, #0
    11cc:	d0f7      	beq.n	11be <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11ce:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    11d0:	3a01      	subs	r2, #1
    11d2:	b293      	uxth	r3, r2
    11d4:	469a      	mov	sl, r3
    11d6:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    11d8:	2704      	movs	r7, #4
    11da:	e019      	b.n	1210 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    11dc:	2300      	movs	r3, #0
    11de:	aa02      	add	r2, sp, #8
    11e0:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    11e2:	1d91      	adds	r1, r2, #6
    11e4:	0020      	movs	r0, r4
    11e6:	4b15      	ldr	r3, [pc, #84]	; (123c <usart_read_buffer_wait+0x90>)
    11e8:	4798      	blx	r3
		if (retval != STATUS_OK) {
    11ea:	2800      	cmp	r0, #0
    11ec:	d1e7      	bne.n	11be <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    11ee:	1c69      	adds	r1, r5, #1
    11f0:	b289      	uxth	r1, r1
    11f2:	ab02      	add	r3, sp, #8
    11f4:	88db      	ldrh	r3, [r3, #6]
    11f6:	9a01      	ldr	r2, [sp, #4]
    11f8:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    11fa:	7962      	ldrb	r2, [r4, #5]
    11fc:	2a01      	cmp	r2, #1
    11fe:	d014      	beq.n	122a <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    1200:	000d      	movs	r5, r1
	while (length--) {
    1202:	4653      	mov	r3, sl
    1204:	3b01      	subs	r3, #1
    1206:	b29b      	uxth	r3, r3
    1208:	469a      	mov	sl, r3
    120a:	4b0d      	ldr	r3, [pc, #52]	; (1240 <usart_read_buffer_wait+0x94>)
    120c:	459a      	cmp	sl, r3
    120e:	d0d6      	beq.n	11be <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1210:	7e33      	ldrb	r3, [r6, #24]
    1212:	423b      	tst	r3, r7
    1214:	d1e2      	bne.n	11dc <usart_read_buffer_wait+0x30>
    1216:	4b0a      	ldr	r3, [pc, #40]	; (1240 <usart_read_buffer_wait+0x94>)
    1218:	7e32      	ldrb	r2, [r6, #24]
    121a:	423a      	tst	r2, r7
    121c:	d1de      	bne.n	11dc <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    121e:	2b01      	cmp	r3, #1
    1220:	d009      	beq.n	1236 <usart_read_buffer_wait+0x8a>
    1222:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1224:	2b00      	cmp	r3, #0
    1226:	d1f7      	bne.n	1218 <usart_read_buffer_wait+0x6c>
    1228:	e7d8      	b.n	11dc <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    122a:	3502      	adds	r5, #2
    122c:	b2ad      	uxth	r5, r5
    122e:	0a1b      	lsrs	r3, r3, #8
    1230:	9a01      	ldr	r2, [sp, #4]
    1232:	5453      	strb	r3, [r2, r1]
    1234:	e7e5      	b.n	1202 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    1236:	2012      	movs	r0, #18
    1238:	e7c1      	b.n	11be <usart_read_buffer_wait+0x12>
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	0000107d 	.word	0x0000107d
    1240:	0000ffff 	.word	0x0000ffff

00001244 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1246:	0080      	lsls	r0, r0, #2
    1248:	4b62      	ldr	r3, [pc, #392]	; (13d4 <_usart_interrupt_handler+0x190>)
    124a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    124c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    124e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1250:	2b00      	cmp	r3, #0
    1252:	d1fc      	bne.n	124e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1254:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1256:	7da6      	ldrb	r6, [r4, #22]
    1258:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    125a:	2330      	movs	r3, #48	; 0x30
    125c:	5ceb      	ldrb	r3, [r5, r3]
    125e:	2231      	movs	r2, #49	; 0x31
    1260:	5caf      	ldrb	r7, [r5, r2]
    1262:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1264:	07f3      	lsls	r3, r6, #31
    1266:	d522      	bpl.n	12ae <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1268:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    126a:	b29b      	uxth	r3, r3
    126c:	2b00      	cmp	r3, #0
    126e:	d01c      	beq.n	12aa <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1270:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1272:	7813      	ldrb	r3, [r2, #0]
    1274:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1276:	1c51      	adds	r1, r2, #1
    1278:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    127a:	7969      	ldrb	r1, [r5, #5]
    127c:	2901      	cmp	r1, #1
    127e:	d00e      	beq.n	129e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1280:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1282:	05db      	lsls	r3, r3, #23
    1284:	0ddb      	lsrs	r3, r3, #23
    1286:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1288:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    128a:	3b01      	subs	r3, #1
    128c:	b29b      	uxth	r3, r3
    128e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1290:	2b00      	cmp	r3, #0
    1292:	d10c      	bne.n	12ae <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1294:	3301      	adds	r3, #1
    1296:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1298:	3301      	adds	r3, #1
    129a:	75a3      	strb	r3, [r4, #22]
    129c:	e007      	b.n	12ae <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    129e:	7851      	ldrb	r1, [r2, #1]
    12a0:	0209      	lsls	r1, r1, #8
    12a2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    12a4:	3202      	adds	r2, #2
    12a6:	62aa      	str	r2, [r5, #40]	; 0x28
    12a8:	e7eb      	b.n	1282 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    12aa:	2301      	movs	r3, #1
    12ac:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    12ae:	07b3      	lsls	r3, r6, #30
    12b0:	d506      	bpl.n	12c0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    12b2:	2302      	movs	r3, #2
    12b4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    12b6:	2200      	movs	r2, #0
    12b8:	3331      	adds	r3, #49	; 0x31
    12ba:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    12bc:	07fb      	lsls	r3, r7, #31
    12be:	d41a      	bmi.n	12f6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    12c0:	0773      	lsls	r3, r6, #29
    12c2:	d565      	bpl.n	1390 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    12c4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    12c6:	b29b      	uxth	r3, r3
    12c8:	2b00      	cmp	r3, #0
    12ca:	d05f      	beq.n	138c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12cc:	8b63      	ldrh	r3, [r4, #26]
    12ce:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    12d0:	071a      	lsls	r2, r3, #28
    12d2:	d414      	bmi.n	12fe <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12d4:	223f      	movs	r2, #63	; 0x3f
    12d6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    12d8:	2b00      	cmp	r3, #0
    12da:	d034      	beq.n	1346 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    12dc:	079a      	lsls	r2, r3, #30
    12de:	d511      	bpl.n	1304 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    12e0:	221a      	movs	r2, #26
    12e2:	2332      	movs	r3, #50	; 0x32
    12e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    12e6:	3b30      	subs	r3, #48	; 0x30
    12e8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    12ea:	077b      	lsls	r3, r7, #29
    12ec:	d550      	bpl.n	1390 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    12ee:	0028      	movs	r0, r5
    12f0:	696b      	ldr	r3, [r5, #20]
    12f2:	4798      	blx	r3
    12f4:	e04c      	b.n	1390 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    12f6:	0028      	movs	r0, r5
    12f8:	68eb      	ldr	r3, [r5, #12]
    12fa:	4798      	blx	r3
    12fc:	e7e0      	b.n	12c0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    12fe:	2237      	movs	r2, #55	; 0x37
    1300:	4013      	ands	r3, r2
    1302:	e7e9      	b.n	12d8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1304:	075a      	lsls	r2, r3, #29
    1306:	d505      	bpl.n	1314 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1308:	221e      	movs	r2, #30
    130a:	2332      	movs	r3, #50	; 0x32
    130c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    130e:	3b2e      	subs	r3, #46	; 0x2e
    1310:	8363      	strh	r3, [r4, #26]
    1312:	e7ea      	b.n	12ea <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1314:	07da      	lsls	r2, r3, #31
    1316:	d505      	bpl.n	1324 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1318:	2213      	movs	r2, #19
    131a:	2332      	movs	r3, #50	; 0x32
    131c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    131e:	3b31      	subs	r3, #49	; 0x31
    1320:	8363      	strh	r3, [r4, #26]
    1322:	e7e2      	b.n	12ea <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1324:	06da      	lsls	r2, r3, #27
    1326:	d505      	bpl.n	1334 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1328:	2242      	movs	r2, #66	; 0x42
    132a:	2332      	movs	r3, #50	; 0x32
    132c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    132e:	3b22      	subs	r3, #34	; 0x22
    1330:	8363      	strh	r3, [r4, #26]
    1332:	e7da      	b.n	12ea <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1334:	2220      	movs	r2, #32
    1336:	421a      	tst	r2, r3
    1338:	d0d7      	beq.n	12ea <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    133a:	3221      	adds	r2, #33	; 0x21
    133c:	2332      	movs	r3, #50	; 0x32
    133e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1340:	3b12      	subs	r3, #18
    1342:	8363      	strh	r3, [r4, #26]
    1344:	e7d1      	b.n	12ea <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1346:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1348:	05db      	lsls	r3, r3, #23
    134a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    134c:	b2da      	uxtb	r2, r3
    134e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1350:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1352:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1354:	1c51      	adds	r1, r2, #1
    1356:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1358:	7969      	ldrb	r1, [r5, #5]
    135a:	2901      	cmp	r1, #1
    135c:	d010      	beq.n	1380 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    135e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1360:	3b01      	subs	r3, #1
    1362:	b29b      	uxth	r3, r3
    1364:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1366:	2b00      	cmp	r3, #0
    1368:	d112      	bne.n	1390 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    136a:	3304      	adds	r3, #4
    136c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    136e:	2200      	movs	r2, #0
    1370:	332e      	adds	r3, #46	; 0x2e
    1372:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1374:	07bb      	lsls	r3, r7, #30
    1376:	d50b      	bpl.n	1390 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1378:	0028      	movs	r0, r5
    137a:	692b      	ldr	r3, [r5, #16]
    137c:	4798      	blx	r3
    137e:	e007      	b.n	1390 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1380:	0a1b      	lsrs	r3, r3, #8
    1382:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1384:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1386:	3301      	adds	r3, #1
    1388:	626b      	str	r3, [r5, #36]	; 0x24
    138a:	e7e8      	b.n	135e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    138c:	2304      	movs	r3, #4
    138e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1390:	06f3      	lsls	r3, r6, #27
    1392:	d504      	bpl.n	139e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1394:	2310      	movs	r3, #16
    1396:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1398:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    139a:	06fb      	lsls	r3, r7, #27
    139c:	d40e      	bmi.n	13bc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    139e:	06b3      	lsls	r3, r6, #26
    13a0:	d504      	bpl.n	13ac <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    13a2:	2320      	movs	r3, #32
    13a4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    13a6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    13a8:	073b      	lsls	r3, r7, #28
    13aa:	d40b      	bmi.n	13c4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    13ac:	0733      	lsls	r3, r6, #28
    13ae:	d504      	bpl.n	13ba <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    13b0:	2308      	movs	r3, #8
    13b2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    13b4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    13b6:	06bb      	lsls	r3, r7, #26
    13b8:	d408      	bmi.n	13cc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    13ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    13bc:	0028      	movs	r0, r5
    13be:	69eb      	ldr	r3, [r5, #28]
    13c0:	4798      	blx	r3
    13c2:	e7ec      	b.n	139e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    13c4:	0028      	movs	r0, r5
    13c6:	69ab      	ldr	r3, [r5, #24]
    13c8:	4798      	blx	r3
    13ca:	e7ef      	b.n	13ac <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    13cc:	6a2b      	ldr	r3, [r5, #32]
    13ce:	0028      	movs	r0, r5
    13d0:	4798      	blx	r3
}
    13d2:	e7f2      	b.n	13ba <_usart_interrupt_handler+0x176>
    13d4:	20000e5c 	.word	0x20000e5c

000013d8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    13d8:	b510      	push	{r4, lr}
	switch (clock_source) {
    13da:	2808      	cmp	r0, #8
    13dc:	d803      	bhi.n	13e6 <system_clock_source_get_hz+0xe>
    13de:	0080      	lsls	r0, r0, #2
    13e0:	4b1b      	ldr	r3, [pc, #108]	; (1450 <system_clock_source_get_hz+0x78>)
    13e2:	581b      	ldr	r3, [r3, r0]
    13e4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    13e6:	2000      	movs	r0, #0
    13e8:	e030      	b.n	144c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    13ea:	4b1a      	ldr	r3, [pc, #104]	; (1454 <system_clock_source_get_hz+0x7c>)
    13ec:	6918      	ldr	r0, [r3, #16]
    13ee:	e02d      	b.n	144c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    13f0:	4b19      	ldr	r3, [pc, #100]	; (1458 <system_clock_source_get_hz+0x80>)
    13f2:	6a1b      	ldr	r3, [r3, #32]
    13f4:	059b      	lsls	r3, r3, #22
    13f6:	0f9b      	lsrs	r3, r3, #30
    13f8:	4818      	ldr	r0, [pc, #96]	; (145c <system_clock_source_get_hz+0x84>)
    13fa:	40d8      	lsrs	r0, r3
    13fc:	e026      	b.n	144c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    13fe:	4b15      	ldr	r3, [pc, #84]	; (1454 <system_clock_source_get_hz+0x7c>)
    1400:	6958      	ldr	r0, [r3, #20]
    1402:	e023      	b.n	144c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1404:	4b13      	ldr	r3, [pc, #76]	; (1454 <system_clock_source_get_hz+0x7c>)
    1406:	681b      	ldr	r3, [r3, #0]
			return 0;
    1408:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    140a:	079b      	lsls	r3, r3, #30
    140c:	d51e      	bpl.n	144c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    140e:	4912      	ldr	r1, [pc, #72]	; (1458 <system_clock_source_get_hz+0x80>)
    1410:	2210      	movs	r2, #16
    1412:	68cb      	ldr	r3, [r1, #12]
    1414:	421a      	tst	r2, r3
    1416:	d0fc      	beq.n	1412 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1418:	4b0e      	ldr	r3, [pc, #56]	; (1454 <system_clock_source_get_hz+0x7c>)
    141a:	681b      	ldr	r3, [r3, #0]
    141c:	075b      	lsls	r3, r3, #29
    141e:	d401      	bmi.n	1424 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1420:	480f      	ldr	r0, [pc, #60]	; (1460 <system_clock_source_get_hz+0x88>)
    1422:	e013      	b.n	144c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1424:	2000      	movs	r0, #0
    1426:	4b0f      	ldr	r3, [pc, #60]	; (1464 <system_clock_source_get_hz+0x8c>)
    1428:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    142a:	4b0a      	ldr	r3, [pc, #40]	; (1454 <system_clock_source_get_hz+0x7c>)
    142c:	689b      	ldr	r3, [r3, #8]
    142e:	041b      	lsls	r3, r3, #16
    1430:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1432:	4358      	muls	r0, r3
    1434:	e00a      	b.n	144c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1436:	2350      	movs	r3, #80	; 0x50
    1438:	4a07      	ldr	r2, [pc, #28]	; (1458 <system_clock_source_get_hz+0x80>)
    143a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    143c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    143e:	075b      	lsls	r3, r3, #29
    1440:	d504      	bpl.n	144c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1442:	4b04      	ldr	r3, [pc, #16]	; (1454 <system_clock_source_get_hz+0x7c>)
    1444:	68d8      	ldr	r0, [r3, #12]
    1446:	e001      	b.n	144c <system_clock_source_get_hz+0x74>
		return 32768UL;
    1448:	2080      	movs	r0, #128	; 0x80
    144a:	0200      	lsls	r0, r0, #8
	}
}
    144c:	bd10      	pop	{r4, pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	00005fcc 	.word	0x00005fcc
    1454:	200000b0 	.word	0x200000b0
    1458:	40000800 	.word	0x40000800
    145c:	007a1200 	.word	0x007a1200
    1460:	02dc6c00 	.word	0x02dc6c00
    1464:	00001b31 	.word	0x00001b31

00001468 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1468:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    146a:	490c      	ldr	r1, [pc, #48]	; (149c <system_clock_source_osc8m_set_config+0x34>)
    146c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    146e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1470:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1472:	7840      	ldrb	r0, [r0, #1]
    1474:	2201      	movs	r2, #1
    1476:	4010      	ands	r0, r2
    1478:	0180      	lsls	r0, r0, #6
    147a:	2640      	movs	r6, #64	; 0x40
    147c:	43b3      	bics	r3, r6
    147e:	4303      	orrs	r3, r0
    1480:	402a      	ands	r2, r5
    1482:	01d2      	lsls	r2, r2, #7
    1484:	2080      	movs	r0, #128	; 0x80
    1486:	4383      	bics	r3, r0
    1488:	4313      	orrs	r3, r2
    148a:	2203      	movs	r2, #3
    148c:	4022      	ands	r2, r4
    148e:	0212      	lsls	r2, r2, #8
    1490:	4803      	ldr	r0, [pc, #12]	; (14a0 <system_clock_source_osc8m_set_config+0x38>)
    1492:	4003      	ands	r3, r0
    1494:	4313      	orrs	r3, r2
    1496:	620b      	str	r3, [r1, #32]
}
    1498:	bd70      	pop	{r4, r5, r6, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	40000800 	.word	0x40000800
    14a0:	fffffcff 	.word	0xfffffcff

000014a4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    14a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14a6:	46ce      	mov	lr, r9
    14a8:	4647      	mov	r7, r8
    14aa:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    14ac:	4b19      	ldr	r3, [pc, #100]	; (1514 <system_clock_source_osc32k_set_config+0x70>)
    14ae:	4699      	mov	r9, r3
    14b0:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    14b2:	7841      	ldrb	r1, [r0, #1]
    14b4:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    14b6:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    14b8:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    14ba:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    14bc:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    14be:	7880      	ldrb	r0, [r0, #2]
    14c0:	2101      	movs	r1, #1
    14c2:	4008      	ands	r0, r1
    14c4:	0080      	lsls	r0, r0, #2
    14c6:	2204      	movs	r2, #4
    14c8:	4393      	bics	r3, r2
    14ca:	4303      	orrs	r3, r0
    14cc:	4660      	mov	r0, ip
    14ce:	4008      	ands	r0, r1
    14d0:	00c0      	lsls	r0, r0, #3
    14d2:	3204      	adds	r2, #4
    14d4:	4393      	bics	r3, r2
    14d6:	4303      	orrs	r3, r0
    14d8:	0038      	movs	r0, r7
    14da:	4008      	ands	r0, r1
    14dc:	0180      	lsls	r0, r0, #6
    14de:	2740      	movs	r7, #64	; 0x40
    14e0:	43bb      	bics	r3, r7
    14e2:	4303      	orrs	r3, r0
    14e4:	0030      	movs	r0, r6
    14e6:	4008      	ands	r0, r1
    14e8:	01c0      	lsls	r0, r0, #7
    14ea:	2680      	movs	r6, #128	; 0x80
    14ec:	43b3      	bics	r3, r6
    14ee:	4303      	orrs	r3, r0
    14f0:	2007      	movs	r0, #7
    14f2:	4005      	ands	r5, r0
    14f4:	022d      	lsls	r5, r5, #8
    14f6:	4808      	ldr	r0, [pc, #32]	; (1518 <system_clock_source_osc32k_set_config+0x74>)
    14f8:	4003      	ands	r3, r0
    14fa:	432b      	orrs	r3, r5
    14fc:	4021      	ands	r1, r4
    14fe:	0309      	lsls	r1, r1, #12
    1500:	4806      	ldr	r0, [pc, #24]	; (151c <system_clock_source_osc32k_set_config+0x78>)
    1502:	4003      	ands	r3, r0
    1504:	430b      	orrs	r3, r1
    1506:	464a      	mov	r2, r9
    1508:	6193      	str	r3, [r2, #24]
}
    150a:	bc0c      	pop	{r2, r3}
    150c:	4690      	mov	r8, r2
    150e:	4699      	mov	r9, r3
    1510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	40000800 	.word	0x40000800
    1518:	fffff8ff 	.word	0xfffff8ff
    151c:	ffffefff 	.word	0xffffefff

00001520 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1520:	b5f0      	push	{r4, r5, r6, r7, lr}
    1522:	46de      	mov	lr, fp
    1524:	4657      	mov	r7, sl
    1526:	464e      	mov	r6, r9
    1528:	4645      	mov	r5, r8
    152a:	b5e0      	push	{r5, r6, r7, lr}
    152c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    152e:	4b26      	ldr	r3, [pc, #152]	; (15c8 <system_clock_source_xosc32k_set_config+0xa8>)
    1530:	469b      	mov	fp, r3
    1532:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1534:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1536:	7800      	ldrb	r0, [r0, #0]
    1538:	4242      	negs	r2, r0
    153a:	4142      	adcs	r2, r0
    153c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    153e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1540:	78ca      	ldrb	r2, [r1, #3]
    1542:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1544:	790a      	ldrb	r2, [r1, #4]
    1546:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1548:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    154a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    154c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    154e:	688a      	ldr	r2, [r1, #8]
    1550:	491e      	ldr	r1, [pc, #120]	; (15cc <system_clock_source_xosc32k_set_config+0xac>)
    1552:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1554:	2101      	movs	r1, #1
    1556:	464a      	mov	r2, r9
    1558:	0092      	lsls	r2, r2, #2
    155a:	4691      	mov	r9, r2
    155c:	2204      	movs	r2, #4
    155e:	4393      	bics	r3, r2
    1560:	464a      	mov	r2, r9
    1562:	4313      	orrs	r3, r2
    1564:	4642      	mov	r2, r8
    1566:	400a      	ands	r2, r1
    1568:	00d2      	lsls	r2, r2, #3
    156a:	4690      	mov	r8, r2
    156c:	2208      	movs	r2, #8
    156e:	4393      	bics	r3, r2
    1570:	4642      	mov	r2, r8
    1572:	4313      	orrs	r3, r2
    1574:	4662      	mov	r2, ip
    1576:	400a      	ands	r2, r1
    1578:	0112      	lsls	r2, r2, #4
    157a:	4694      	mov	ip, r2
    157c:	2210      	movs	r2, #16
    157e:	4393      	bics	r3, r2
    1580:	4662      	mov	r2, ip
    1582:	4313      	orrs	r3, r2
    1584:	4008      	ands	r0, r1
    1586:	0140      	lsls	r0, r0, #5
    1588:	2220      	movs	r2, #32
    158a:	4393      	bics	r3, r2
    158c:	4303      	orrs	r3, r0
    158e:	400f      	ands	r7, r1
    1590:	01bf      	lsls	r7, r7, #6
    1592:	2040      	movs	r0, #64	; 0x40
    1594:	4383      	bics	r3, r0
    1596:	433b      	orrs	r3, r7
    1598:	400e      	ands	r6, r1
    159a:	01f6      	lsls	r6, r6, #7
    159c:	3040      	adds	r0, #64	; 0x40
    159e:	4383      	bics	r3, r0
    15a0:	4333      	orrs	r3, r6
    15a2:	3879      	subs	r0, #121	; 0x79
    15a4:	4005      	ands	r5, r0
    15a6:	022d      	lsls	r5, r5, #8
    15a8:	4809      	ldr	r0, [pc, #36]	; (15d0 <system_clock_source_xosc32k_set_config+0xb0>)
    15aa:	4003      	ands	r3, r0
    15ac:	432b      	orrs	r3, r5
    15ae:	4021      	ands	r1, r4
    15b0:	0309      	lsls	r1, r1, #12
    15b2:	4808      	ldr	r0, [pc, #32]	; (15d4 <system_clock_source_xosc32k_set_config+0xb4>)
    15b4:	4003      	ands	r3, r0
    15b6:	430b      	orrs	r3, r1
    15b8:	465a      	mov	r2, fp
    15ba:	8293      	strh	r3, [r2, #20]
}
    15bc:	bc3c      	pop	{r2, r3, r4, r5}
    15be:	4690      	mov	r8, r2
    15c0:	4699      	mov	r9, r3
    15c2:	46a2      	mov	sl, r4
    15c4:	46ab      	mov	fp, r5
    15c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15c8:	40000800 	.word	0x40000800
    15cc:	200000b0 	.word	0x200000b0
    15d0:	fffff8ff 	.word	0xfffff8ff
    15d4:	ffffefff 	.word	0xffffefff

000015d8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    15d8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    15da:	7a03      	ldrb	r3, [r0, #8]
    15dc:	069b      	lsls	r3, r3, #26
    15de:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    15e0:	8942      	ldrh	r2, [r0, #10]
    15e2:	0592      	lsls	r2, r2, #22
    15e4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    15e6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    15e8:	4918      	ldr	r1, [pc, #96]	; (164c <system_clock_source_dfll_set_config+0x74>)
    15ea:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    15ec:	7983      	ldrb	r3, [r0, #6]
    15ee:	79c2      	ldrb	r2, [r0, #7]
    15f0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    15f2:	8842      	ldrh	r2, [r0, #2]
    15f4:	8884      	ldrh	r4, [r0, #4]
    15f6:	4322      	orrs	r2, r4
    15f8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    15fa:	7842      	ldrb	r2, [r0, #1]
    15fc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    15fe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1600:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1602:	7803      	ldrb	r3, [r0, #0]
    1604:	2b04      	cmp	r3, #4
    1606:	d011      	beq.n	162c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1608:	2b20      	cmp	r3, #32
    160a:	d10e      	bne.n	162a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    160c:	7b03      	ldrb	r3, [r0, #12]
    160e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1610:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1612:	4313      	orrs	r3, r2
    1614:	89c2      	ldrh	r2, [r0, #14]
    1616:	0412      	lsls	r2, r2, #16
    1618:	490d      	ldr	r1, [pc, #52]	; (1650 <system_clock_source_dfll_set_config+0x78>)
    161a:	400a      	ands	r2, r1
    161c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    161e:	4a0b      	ldr	r2, [pc, #44]	; (164c <system_clock_source_dfll_set_config+0x74>)
    1620:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1622:	6811      	ldr	r1, [r2, #0]
    1624:	4b0b      	ldr	r3, [pc, #44]	; (1654 <system_clock_source_dfll_set_config+0x7c>)
    1626:	430b      	orrs	r3, r1
    1628:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    162a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    162c:	7b03      	ldrb	r3, [r0, #12]
    162e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1630:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1632:	4313      	orrs	r3, r2
    1634:	89c2      	ldrh	r2, [r0, #14]
    1636:	0412      	lsls	r2, r2, #16
    1638:	4905      	ldr	r1, [pc, #20]	; (1650 <system_clock_source_dfll_set_config+0x78>)
    163a:	400a      	ands	r2, r1
    163c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    163e:	4a03      	ldr	r2, [pc, #12]	; (164c <system_clock_source_dfll_set_config+0x74>)
    1640:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1642:	6813      	ldr	r3, [r2, #0]
    1644:	2104      	movs	r1, #4
    1646:	430b      	orrs	r3, r1
    1648:	6013      	str	r3, [r2, #0]
    164a:	e7ee      	b.n	162a <system_clock_source_dfll_set_config+0x52>
    164c:	200000b0 	.word	0x200000b0
    1650:	03ff0000 	.word	0x03ff0000
    1654:	00000424 	.word	0x00000424

00001658 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1658:	2808      	cmp	r0, #8
    165a:	d803      	bhi.n	1664 <system_clock_source_enable+0xc>
    165c:	0080      	lsls	r0, r0, #2
    165e:	4b25      	ldr	r3, [pc, #148]	; (16f4 <system_clock_source_enable+0x9c>)
    1660:	581b      	ldr	r3, [r3, r0]
    1662:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1664:	2017      	movs	r0, #23
    1666:	e044      	b.n	16f2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1668:	4a23      	ldr	r2, [pc, #140]	; (16f8 <system_clock_source_enable+0xa0>)
    166a:	6a13      	ldr	r3, [r2, #32]
    166c:	2102      	movs	r1, #2
    166e:	430b      	orrs	r3, r1
    1670:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1672:	2000      	movs	r0, #0
    1674:	e03d      	b.n	16f2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1676:	4a20      	ldr	r2, [pc, #128]	; (16f8 <system_clock_source_enable+0xa0>)
    1678:	6993      	ldr	r3, [r2, #24]
    167a:	2102      	movs	r1, #2
    167c:	430b      	orrs	r3, r1
    167e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1680:	2000      	movs	r0, #0
		break;
    1682:	e036      	b.n	16f2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1684:	4a1c      	ldr	r2, [pc, #112]	; (16f8 <system_clock_source_enable+0xa0>)
    1686:	8a13      	ldrh	r3, [r2, #16]
    1688:	2102      	movs	r1, #2
    168a:	430b      	orrs	r3, r1
    168c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    168e:	2000      	movs	r0, #0
		break;
    1690:	e02f      	b.n	16f2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1692:	4a19      	ldr	r2, [pc, #100]	; (16f8 <system_clock_source_enable+0xa0>)
    1694:	8a93      	ldrh	r3, [r2, #20]
    1696:	2102      	movs	r1, #2
    1698:	430b      	orrs	r3, r1
    169a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    169c:	2000      	movs	r0, #0
		break;
    169e:	e028      	b.n	16f2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    16a0:	4916      	ldr	r1, [pc, #88]	; (16fc <system_clock_source_enable+0xa4>)
    16a2:	680b      	ldr	r3, [r1, #0]
    16a4:	2202      	movs	r2, #2
    16a6:	4313      	orrs	r3, r2
    16a8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    16aa:	4b13      	ldr	r3, [pc, #76]	; (16f8 <system_clock_source_enable+0xa0>)
    16ac:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    16ae:	0019      	movs	r1, r3
    16b0:	320e      	adds	r2, #14
    16b2:	68cb      	ldr	r3, [r1, #12]
    16b4:	421a      	tst	r2, r3
    16b6:	d0fc      	beq.n	16b2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    16b8:	4a10      	ldr	r2, [pc, #64]	; (16fc <system_clock_source_enable+0xa4>)
    16ba:	6891      	ldr	r1, [r2, #8]
    16bc:	4b0e      	ldr	r3, [pc, #56]	; (16f8 <system_clock_source_enable+0xa0>)
    16be:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    16c0:	6852      	ldr	r2, [r2, #4]
    16c2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    16c4:	2200      	movs	r2, #0
    16c6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    16c8:	0019      	movs	r1, r3
    16ca:	3210      	adds	r2, #16
    16cc:	68cb      	ldr	r3, [r1, #12]
    16ce:	421a      	tst	r2, r3
    16d0:	d0fc      	beq.n	16cc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    16d2:	4b0a      	ldr	r3, [pc, #40]	; (16fc <system_clock_source_enable+0xa4>)
    16d4:	681b      	ldr	r3, [r3, #0]
    16d6:	b29b      	uxth	r3, r3
    16d8:	4a07      	ldr	r2, [pc, #28]	; (16f8 <system_clock_source_enable+0xa0>)
    16da:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    16dc:	2000      	movs	r0, #0
    16de:	e008      	b.n	16f2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    16e0:	4905      	ldr	r1, [pc, #20]	; (16f8 <system_clock_source_enable+0xa0>)
    16e2:	2244      	movs	r2, #68	; 0x44
    16e4:	5c8b      	ldrb	r3, [r1, r2]
    16e6:	2002      	movs	r0, #2
    16e8:	4303      	orrs	r3, r0
    16ea:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    16ec:	2000      	movs	r0, #0
		break;
    16ee:	e000      	b.n	16f2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    16f0:	2000      	movs	r0, #0
}
    16f2:	4770      	bx	lr
    16f4:	00005ff0 	.word	0x00005ff0
    16f8:	40000800 	.word	0x40000800
    16fc:	200000b0 	.word	0x200000b0

00001700 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1700:	b5f0      	push	{r4, r5, r6, r7, lr}
    1702:	46d6      	mov	lr, sl
    1704:	464f      	mov	r7, r9
    1706:	4646      	mov	r6, r8
    1708:	b5c0      	push	{r6, r7, lr}
    170a:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    170c:	22c2      	movs	r2, #194	; 0xc2
    170e:	00d2      	lsls	r2, r2, #3
    1710:	4b63      	ldr	r3, [pc, #396]	; (18a0 <system_clock_init+0x1a0>)
    1712:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1714:	4a63      	ldr	r2, [pc, #396]	; (18a4 <system_clock_init+0x1a4>)
    1716:	6853      	ldr	r3, [r2, #4]
    1718:	211e      	movs	r1, #30
    171a:	438b      	bics	r3, r1
    171c:	391a      	subs	r1, #26
    171e:	430b      	orrs	r3, r1
    1720:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    1722:	2203      	movs	r2, #3
    1724:	ab01      	add	r3, sp, #4
    1726:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1728:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    172a:	4d5f      	ldr	r5, [pc, #380]	; (18a8 <system_clock_init+0x1a8>)
    172c:	b2e0      	uxtb	r0, r4
    172e:	a901      	add	r1, sp, #4
    1730:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1732:	3401      	adds	r4, #1
    1734:	2c25      	cmp	r4, #37	; 0x25
    1736:	d1f9      	bne.n	172c <system_clock_init+0x2c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1738:	a80c      	add	r0, sp, #48	; 0x30
    173a:	2300      	movs	r3, #0
    173c:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    173e:	2280      	movs	r2, #128	; 0x80
    1740:	0212      	lsls	r2, r2, #8
    1742:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1744:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1746:	2201      	movs	r2, #1
    1748:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    174a:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    174c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    174e:	2106      	movs	r1, #6
    1750:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1752:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1754:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1756:	4b55      	ldr	r3, [pc, #340]	; (18ac <system_clock_init+0x1ac>)
    1758:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    175a:	2005      	movs	r0, #5
    175c:	4b54      	ldr	r3, [pc, #336]	; (18b0 <system_clock_init+0x1b0>)
    175e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1760:	494f      	ldr	r1, [pc, #316]	; (18a0 <system_clock_init+0x1a0>)
    1762:	2202      	movs	r2, #2
    1764:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1766:	421a      	tst	r2, r3
    1768:	d0fc      	beq.n	1764 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    176a:	494d      	ldr	r1, [pc, #308]	; (18a0 <system_clock_init+0x1a0>)
    176c:	8a8b      	ldrh	r3, [r1, #20]
    176e:	2280      	movs	r2, #128	; 0x80
    1770:	4313      	orrs	r3, r2
    1772:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1774:	4c4f      	ldr	r4, [pc, #316]	; (18b4 <system_clock_init+0x1b4>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    1776:	6823      	ldr	r3, [r4, #0]
    1778:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    177a:	698a      	ldr	r2, [r1, #24]
    177c:	0e5b      	lsrs	r3, r3, #25
    177e:	041b      	lsls	r3, r3, #16
    1780:	484d      	ldr	r0, [pc, #308]	; (18b8 <system_clock_init+0x1b8>)
    1782:	4002      	ands	r2, r0
    1784:	4313      	orrs	r3, r2
    1786:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1788:	a80a      	add	r0, sp, #40	; 0x28
    178a:	2301      	movs	r3, #1
    178c:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    178e:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    1790:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1792:	2207      	movs	r2, #7
    1794:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1796:	2500      	movs	r5, #0
    1798:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    179a:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    179c:	4b47      	ldr	r3, [pc, #284]	; (18bc <system_clock_init+0x1bc>)
    179e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    17a0:	2004      	movs	r0, #4
    17a2:	4b43      	ldr	r3, [pc, #268]	; (18b0 <system_clock_init+0x1b0>)
    17a4:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    17a6:	ab05      	add	r3, sp, #20
    17a8:	2200      	movs	r2, #0
    17aa:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    17ac:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    17ae:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    17b0:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    17b2:	213f      	movs	r1, #63	; 0x3f
    17b4:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    17b6:	393b      	subs	r1, #59	; 0x3b
    17b8:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    17ba:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    17bc:	6823      	ldr	r3, [r4, #0]
    17be:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    17c0:	2b3f      	cmp	r3, #63	; 0x3f
    17c2:	d06a      	beq.n	189a <system_clock_init+0x19a>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    17c4:	a805      	add	r0, sp, #20
    17c6:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    17c8:	23b7      	movs	r3, #183	; 0xb7
    17ca:	00db      	lsls	r3, r3, #3
    17cc:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    17ce:	2307      	movs	r3, #7
    17d0:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    17d2:	3338      	adds	r3, #56	; 0x38
    17d4:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    17d6:	4b3a      	ldr	r3, [pc, #232]	; (18c0 <system_clock_init+0x1c0>)
    17d8:	4798      	blx	r3
	config->run_in_standby  = false;
    17da:	a804      	add	r0, sp, #16
    17dc:	2500      	movs	r5, #0
    17de:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    17e0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    17e2:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    17e4:	4b37      	ldr	r3, [pc, #220]	; (18c4 <system_clock_init+0x1c4>)
    17e6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    17e8:	2006      	movs	r0, #6
    17ea:	4b31      	ldr	r3, [pc, #196]	; (18b0 <system_clock_init+0x1b0>)
    17ec:	4699      	mov	r9, r3
    17ee:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    17f0:	4b35      	ldr	r3, [pc, #212]	; (18c8 <system_clock_init+0x1c8>)
    17f2:	4798      	blx	r3
	config->division_factor    = 1;
    17f4:	ac01      	add	r4, sp, #4
    17f6:	2601      	movs	r6, #1
    17f8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    17fa:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    17fc:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    17fe:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1800:	2305      	movs	r3, #5
    1802:	7023      	strb	r3, [r4, #0]
    1804:	0021      	movs	r1, r4
    1806:	2001      	movs	r0, #1
    1808:	4b30      	ldr	r3, [pc, #192]	; (18cc <system_clock_init+0x1cc>)
    180a:	4698      	mov	r8, r3
    180c:	4798      	blx	r3
    180e:	2001      	movs	r0, #1
    1810:	4f2f      	ldr	r7, [pc, #188]	; (18d0 <system_clock_init+0x1d0>)
    1812:	47b8      	blx	r7
	config->high_when_disabled = false;
    1814:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1816:	7265      	strb	r5, [r4, #9]
    1818:	2304      	movs	r3, #4
    181a:	7023      	strb	r3, [r4, #0]
    181c:	331c      	adds	r3, #28
    181e:	469a      	mov	sl, r3
    1820:	6063      	str	r3, [r4, #4]
    1822:	7226      	strb	r6, [r4, #8]
    1824:	0021      	movs	r1, r4
    1826:	2002      	movs	r0, #2
    1828:	47c0      	blx	r8
    182a:	2002      	movs	r0, #2
    182c:	47b8      	blx	r7
	config->high_when_disabled = false;
    182e:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1830:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1832:	7265      	strb	r5, [r4, #9]
    1834:	2303      	movs	r3, #3
    1836:	7023      	strb	r3, [r4, #0]
    1838:	4653      	mov	r3, sl
    183a:	6063      	str	r3, [r4, #4]
    183c:	0021      	movs	r1, r4
    183e:	2004      	movs	r0, #4
    1840:	47c0      	blx	r8
    1842:	2004      	movs	r0, #4
    1844:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1846:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1848:	0021      	movs	r1, r4
    184a:	2000      	movs	r0, #0
    184c:	4b16      	ldr	r3, [pc, #88]	; (18a8 <system_clock_init+0x1a8>)
    184e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1850:	2000      	movs	r0, #0
    1852:	4b20      	ldr	r3, [pc, #128]	; (18d4 <system_clock_init+0x1d4>)
    1854:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1856:	2007      	movs	r0, #7
    1858:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    185a:	4911      	ldr	r1, [pc, #68]	; (18a0 <system_clock_init+0x1a0>)
    185c:	22d0      	movs	r2, #208	; 0xd0
    185e:	68cb      	ldr	r3, [r1, #12]
    1860:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1862:	2bd0      	cmp	r3, #208	; 0xd0
    1864:	d1fb      	bne.n	185e <system_clock_init+0x15e>
	PM->CPUSEL.reg = (uint32_t)divider;
    1866:	4a1c      	ldr	r2, [pc, #112]	; (18d8 <system_clock_init+0x1d8>)
    1868:	2300      	movs	r3, #0
    186a:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    186c:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    186e:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1870:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1872:	a901      	add	r1, sp, #4
    1874:	2201      	movs	r2, #1
    1876:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1878:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    187a:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    187c:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    187e:	3307      	adds	r3, #7
    1880:	700b      	strb	r3, [r1, #0]
    1882:	2000      	movs	r0, #0
    1884:	4b11      	ldr	r3, [pc, #68]	; (18cc <system_clock_init+0x1cc>)
    1886:	4798      	blx	r3
    1888:	2000      	movs	r0, #0
    188a:	4b11      	ldr	r3, [pc, #68]	; (18d0 <system_clock_init+0x1d0>)
    188c:	4798      	blx	r3
#endif
}
    188e:	b010      	add	sp, #64	; 0x40
    1890:	bc1c      	pop	{r2, r3, r4}
    1892:	4690      	mov	r8, r2
    1894:	4699      	mov	r9, r3
    1896:	46a2      	mov	sl, r4
    1898:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    189a:	3b20      	subs	r3, #32
    189c:	e792      	b.n	17c4 <system_clock_init+0xc4>
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	40000800 	.word	0x40000800
    18a4:	41004000 	.word	0x41004000
    18a8:	00001b15 	.word	0x00001b15
    18ac:	00001521 	.word	0x00001521
    18b0:	00001659 	.word	0x00001659
    18b4:	00806024 	.word	0x00806024
    18b8:	ff80ffff 	.word	0xff80ffff
    18bc:	000014a5 	.word	0x000014a5
    18c0:	000015d9 	.word	0x000015d9
    18c4:	00001469 	.word	0x00001469
    18c8:	000018dd 	.word	0x000018dd
    18cc:	00001901 	.word	0x00001901
    18d0:	000019b9 	.word	0x000019b9
    18d4:	00001a89 	.word	0x00001a89
    18d8:	40000400 	.word	0x40000400

000018dc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    18dc:	4a06      	ldr	r2, [pc, #24]	; (18f8 <system_gclk_init+0x1c>)
    18de:	6993      	ldr	r3, [r2, #24]
    18e0:	2108      	movs	r1, #8
    18e2:	430b      	orrs	r3, r1
    18e4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    18e6:	2201      	movs	r2, #1
    18e8:	4b04      	ldr	r3, [pc, #16]	; (18fc <system_gclk_init+0x20>)
    18ea:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    18ec:	0019      	movs	r1, r3
    18ee:	780b      	ldrb	r3, [r1, #0]
    18f0:	4213      	tst	r3, r2
    18f2:	d1fc      	bne.n	18ee <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    18f4:	4770      	bx	lr
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	40000400 	.word	0x40000400
    18fc:	40000c00 	.word	0x40000c00

00001900 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1900:	b570      	push	{r4, r5, r6, lr}
    1902:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1904:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1906:	780d      	ldrb	r5, [r1, #0]
    1908:	022d      	lsls	r5, r5, #8
    190a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    190c:	784b      	ldrb	r3, [r1, #1]
    190e:	2b00      	cmp	r3, #0
    1910:	d002      	beq.n	1918 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1912:	2380      	movs	r3, #128	; 0x80
    1914:	02db      	lsls	r3, r3, #11
    1916:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1918:	7a4b      	ldrb	r3, [r1, #9]
    191a:	2b00      	cmp	r3, #0
    191c:	d002      	beq.n	1924 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    191e:	2380      	movs	r3, #128	; 0x80
    1920:	031b      	lsls	r3, r3, #12
    1922:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1924:	6848      	ldr	r0, [r1, #4]
    1926:	2801      	cmp	r0, #1
    1928:	d910      	bls.n	194c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    192a:	1e43      	subs	r3, r0, #1
    192c:	4218      	tst	r0, r3
    192e:	d134      	bne.n	199a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1930:	2802      	cmp	r0, #2
    1932:	d930      	bls.n	1996 <system_gclk_gen_set_config+0x96>
    1934:	2302      	movs	r3, #2
    1936:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1938:	3201      	adds	r2, #1
						mask <<= 1) {
    193a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    193c:	4298      	cmp	r0, r3
    193e:	d8fb      	bhi.n	1938 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1940:	0212      	lsls	r2, r2, #8
    1942:	4332      	orrs	r2, r6
    1944:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1946:	2380      	movs	r3, #128	; 0x80
    1948:	035b      	lsls	r3, r3, #13
    194a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    194c:	7a0b      	ldrb	r3, [r1, #8]
    194e:	2b00      	cmp	r3, #0
    1950:	d002      	beq.n	1958 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1952:	2380      	movs	r3, #128	; 0x80
    1954:	039b      	lsls	r3, r3, #14
    1956:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1958:	4a13      	ldr	r2, [pc, #76]	; (19a8 <system_gclk_gen_set_config+0xa8>)
    195a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    195c:	b25b      	sxtb	r3, r3
    195e:	2b00      	cmp	r3, #0
    1960:	dbfb      	blt.n	195a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1962:	4b12      	ldr	r3, [pc, #72]	; (19ac <system_gclk_gen_set_config+0xac>)
    1964:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1966:	4b12      	ldr	r3, [pc, #72]	; (19b0 <system_gclk_gen_set_config+0xb0>)
    1968:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    196a:	4a0f      	ldr	r2, [pc, #60]	; (19a8 <system_gclk_gen_set_config+0xa8>)
    196c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    196e:	b25b      	sxtb	r3, r3
    1970:	2b00      	cmp	r3, #0
    1972:	dbfb      	blt.n	196c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1974:	4b0c      	ldr	r3, [pc, #48]	; (19a8 <system_gclk_gen_set_config+0xa8>)
    1976:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1978:	001a      	movs	r2, r3
    197a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    197c:	b25b      	sxtb	r3, r3
    197e:	2b00      	cmp	r3, #0
    1980:	dbfb      	blt.n	197a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1982:	4a09      	ldr	r2, [pc, #36]	; (19a8 <system_gclk_gen_set_config+0xa8>)
    1984:	6853      	ldr	r3, [r2, #4]
    1986:	2180      	movs	r1, #128	; 0x80
    1988:	0249      	lsls	r1, r1, #9
    198a:	400b      	ands	r3, r1
    198c:	431d      	orrs	r5, r3
    198e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1990:	4b08      	ldr	r3, [pc, #32]	; (19b4 <system_gclk_gen_set_config+0xb4>)
    1992:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1994:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1996:	2200      	movs	r2, #0
    1998:	e7d2      	b.n	1940 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    199a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    199c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    199e:	2380      	movs	r3, #128	; 0x80
    19a0:	029b      	lsls	r3, r3, #10
    19a2:	431d      	orrs	r5, r3
    19a4:	e7d2      	b.n	194c <system_gclk_gen_set_config+0x4c>
    19a6:	46c0      	nop			; (mov r8, r8)
    19a8:	40000c00 	.word	0x40000c00
    19ac:	00000181 	.word	0x00000181
    19b0:	40000c08 	.word	0x40000c08
    19b4:	000001c1 	.word	0x000001c1

000019b8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    19b8:	b510      	push	{r4, lr}
    19ba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19bc:	4a0b      	ldr	r2, [pc, #44]	; (19ec <system_gclk_gen_enable+0x34>)
    19be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19c0:	b25b      	sxtb	r3, r3
    19c2:	2b00      	cmp	r3, #0
    19c4:	dbfb      	blt.n	19be <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    19c6:	4b0a      	ldr	r3, [pc, #40]	; (19f0 <system_gclk_gen_enable+0x38>)
    19c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19ca:	4b0a      	ldr	r3, [pc, #40]	; (19f4 <system_gclk_gen_enable+0x3c>)
    19cc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19ce:	4a07      	ldr	r2, [pc, #28]	; (19ec <system_gclk_gen_enable+0x34>)
    19d0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19d2:	b25b      	sxtb	r3, r3
    19d4:	2b00      	cmp	r3, #0
    19d6:	dbfb      	blt.n	19d0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    19d8:	4a04      	ldr	r2, [pc, #16]	; (19ec <system_gclk_gen_enable+0x34>)
    19da:	6851      	ldr	r1, [r2, #4]
    19dc:	2380      	movs	r3, #128	; 0x80
    19de:	025b      	lsls	r3, r3, #9
    19e0:	430b      	orrs	r3, r1
    19e2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    19e4:	4b04      	ldr	r3, [pc, #16]	; (19f8 <system_gclk_gen_enable+0x40>)
    19e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19e8:	bd10      	pop	{r4, pc}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	40000c00 	.word	0x40000c00
    19f0:	00000181 	.word	0x00000181
    19f4:	40000c04 	.word	0x40000c04
    19f8:	000001c1 	.word	0x000001c1

000019fc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    19fc:	b570      	push	{r4, r5, r6, lr}
    19fe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a00:	4a1a      	ldr	r2, [pc, #104]	; (1a6c <system_gclk_gen_get_hz+0x70>)
    1a02:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1a04:	b25b      	sxtb	r3, r3
    1a06:	2b00      	cmp	r3, #0
    1a08:	dbfb      	blt.n	1a02 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1a0a:	4b19      	ldr	r3, [pc, #100]	; (1a70 <system_gclk_gen_get_hz+0x74>)
    1a0c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a0e:	4b19      	ldr	r3, [pc, #100]	; (1a74 <system_gclk_gen_get_hz+0x78>)
    1a10:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a12:	4a16      	ldr	r2, [pc, #88]	; (1a6c <system_gclk_gen_get_hz+0x70>)
    1a14:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1a16:	b25b      	sxtb	r3, r3
    1a18:	2b00      	cmp	r3, #0
    1a1a:	dbfb      	blt.n	1a14 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1a1c:	4e13      	ldr	r6, [pc, #76]	; (1a6c <system_gclk_gen_get_hz+0x70>)
    1a1e:	6870      	ldr	r0, [r6, #4]
    1a20:	04c0      	lsls	r0, r0, #19
    1a22:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1a24:	4b14      	ldr	r3, [pc, #80]	; (1a78 <system_gclk_gen_get_hz+0x7c>)
    1a26:	4798      	blx	r3
    1a28:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a2a:	4b12      	ldr	r3, [pc, #72]	; (1a74 <system_gclk_gen_get_hz+0x78>)
    1a2c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1a2e:	6876      	ldr	r6, [r6, #4]
    1a30:	02f6      	lsls	r6, r6, #11
    1a32:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a34:	4b11      	ldr	r3, [pc, #68]	; (1a7c <system_gclk_gen_get_hz+0x80>)
    1a36:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a38:	4a0c      	ldr	r2, [pc, #48]	; (1a6c <system_gclk_gen_get_hz+0x70>)
    1a3a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1a3c:	b25b      	sxtb	r3, r3
    1a3e:	2b00      	cmp	r3, #0
    1a40:	dbfb      	blt.n	1a3a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1a42:	4b0a      	ldr	r3, [pc, #40]	; (1a6c <system_gclk_gen_get_hz+0x70>)
    1a44:	689c      	ldr	r4, [r3, #8]
    1a46:	0224      	lsls	r4, r4, #8
    1a48:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1a4a:	4b0d      	ldr	r3, [pc, #52]	; (1a80 <system_gclk_gen_get_hz+0x84>)
    1a4c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1a4e:	2e00      	cmp	r6, #0
    1a50:	d107      	bne.n	1a62 <system_gclk_gen_get_hz+0x66>
    1a52:	2c01      	cmp	r4, #1
    1a54:	d907      	bls.n	1a66 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1a56:	0021      	movs	r1, r4
    1a58:	0028      	movs	r0, r5
    1a5a:	4b0a      	ldr	r3, [pc, #40]	; (1a84 <system_gclk_gen_get_hz+0x88>)
    1a5c:	4798      	blx	r3
    1a5e:	0005      	movs	r5, r0
    1a60:	e001      	b.n	1a66 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1a62:	3401      	adds	r4, #1
    1a64:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1a66:	0028      	movs	r0, r5
    1a68:	bd70      	pop	{r4, r5, r6, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	40000c00 	.word	0x40000c00
    1a70:	00000181 	.word	0x00000181
    1a74:	40000c04 	.word	0x40000c04
    1a78:	000013d9 	.word	0x000013d9
    1a7c:	40000c08 	.word	0x40000c08
    1a80:	000001c1 	.word	0x000001c1
    1a84:	0000554d 	.word	0x0000554d

00001a88 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1a88:	b510      	push	{r4, lr}
    1a8a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a8c:	4b06      	ldr	r3, [pc, #24]	; (1aa8 <system_gclk_chan_enable+0x20>)
    1a8e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a90:	4b06      	ldr	r3, [pc, #24]	; (1aac <system_gclk_chan_enable+0x24>)
    1a92:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a94:	4a06      	ldr	r2, [pc, #24]	; (1ab0 <system_gclk_chan_enable+0x28>)
    1a96:	8853      	ldrh	r3, [r2, #2]
    1a98:	2180      	movs	r1, #128	; 0x80
    1a9a:	01c9      	lsls	r1, r1, #7
    1a9c:	430b      	orrs	r3, r1
    1a9e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1aa0:	4b04      	ldr	r3, [pc, #16]	; (1ab4 <system_gclk_chan_enable+0x2c>)
    1aa2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1aa4:	bd10      	pop	{r4, pc}
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	00000181 	.word	0x00000181
    1aac:	40000c02 	.word	0x40000c02
    1ab0:	40000c00 	.word	0x40000c00
    1ab4:	000001c1 	.word	0x000001c1

00001ab8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1ab8:	b510      	push	{r4, lr}
    1aba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1abc:	4b0f      	ldr	r3, [pc, #60]	; (1afc <system_gclk_chan_disable+0x44>)
    1abe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ac0:	4b0f      	ldr	r3, [pc, #60]	; (1b00 <system_gclk_chan_disable+0x48>)
    1ac2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1ac4:	4a0f      	ldr	r2, [pc, #60]	; (1b04 <system_gclk_chan_disable+0x4c>)
    1ac6:	8853      	ldrh	r3, [r2, #2]
    1ac8:	051b      	lsls	r3, r3, #20
    1aca:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1acc:	8853      	ldrh	r3, [r2, #2]
    1ace:	490e      	ldr	r1, [pc, #56]	; (1b08 <system_gclk_chan_disable+0x50>)
    1ad0:	400b      	ands	r3, r1
    1ad2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1ad4:	8853      	ldrh	r3, [r2, #2]
    1ad6:	490d      	ldr	r1, [pc, #52]	; (1b0c <system_gclk_chan_disable+0x54>)
    1ad8:	400b      	ands	r3, r1
    1ada:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1adc:	0011      	movs	r1, r2
    1ade:	2280      	movs	r2, #128	; 0x80
    1ae0:	01d2      	lsls	r2, r2, #7
    1ae2:	884b      	ldrh	r3, [r1, #2]
    1ae4:	4213      	tst	r3, r2
    1ae6:	d1fc      	bne.n	1ae2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1ae8:	4906      	ldr	r1, [pc, #24]	; (1b04 <system_gclk_chan_disable+0x4c>)
    1aea:	884a      	ldrh	r2, [r1, #2]
    1aec:	0203      	lsls	r3, r0, #8
    1aee:	4806      	ldr	r0, [pc, #24]	; (1b08 <system_gclk_chan_disable+0x50>)
    1af0:	4002      	ands	r2, r0
    1af2:	4313      	orrs	r3, r2
    1af4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1af6:	4b06      	ldr	r3, [pc, #24]	; (1b10 <system_gclk_chan_disable+0x58>)
    1af8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1afa:	bd10      	pop	{r4, pc}
    1afc:	00000181 	.word	0x00000181
    1b00:	40000c02 	.word	0x40000c02
    1b04:	40000c00 	.word	0x40000c00
    1b08:	fffff0ff 	.word	0xfffff0ff
    1b0c:	ffffbfff 	.word	0xffffbfff
    1b10:	000001c1 	.word	0x000001c1

00001b14 <system_gclk_chan_set_config>:
{
    1b14:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1b16:	780c      	ldrb	r4, [r1, #0]
    1b18:	0224      	lsls	r4, r4, #8
    1b1a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1b1c:	4b02      	ldr	r3, [pc, #8]	; (1b28 <system_gclk_chan_set_config+0x14>)
    1b1e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1b20:	b2a4      	uxth	r4, r4
    1b22:	4b02      	ldr	r3, [pc, #8]	; (1b2c <system_gclk_chan_set_config+0x18>)
    1b24:	805c      	strh	r4, [r3, #2]
}
    1b26:	bd10      	pop	{r4, pc}
    1b28:	00001ab9 	.word	0x00001ab9
    1b2c:	40000c00 	.word	0x40000c00

00001b30 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1b30:	b510      	push	{r4, lr}
    1b32:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1b34:	4b06      	ldr	r3, [pc, #24]	; (1b50 <system_gclk_chan_get_hz+0x20>)
    1b36:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b38:	4b06      	ldr	r3, [pc, #24]	; (1b54 <system_gclk_chan_get_hz+0x24>)
    1b3a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1b3c:	4b06      	ldr	r3, [pc, #24]	; (1b58 <system_gclk_chan_get_hz+0x28>)
    1b3e:	885c      	ldrh	r4, [r3, #2]
    1b40:	0524      	lsls	r4, r4, #20
    1b42:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1b44:	4b05      	ldr	r3, [pc, #20]	; (1b5c <system_gclk_chan_get_hz+0x2c>)
    1b46:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1b48:	0020      	movs	r0, r4
    1b4a:	4b05      	ldr	r3, [pc, #20]	; (1b60 <system_gclk_chan_get_hz+0x30>)
    1b4c:	4798      	blx	r3
}
    1b4e:	bd10      	pop	{r4, pc}
    1b50:	00000181 	.word	0x00000181
    1b54:	40000c02 	.word	0x40000c02
    1b58:	40000c00 	.word	0x40000c00
    1b5c:	000001c1 	.word	0x000001c1
    1b60:	000019fd 	.word	0x000019fd

00001b64 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1b64:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1b66:	78d3      	ldrb	r3, [r2, #3]
    1b68:	2b00      	cmp	r3, #0
    1b6a:	d135      	bne.n	1bd8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1b6c:	7813      	ldrb	r3, [r2, #0]
    1b6e:	2b80      	cmp	r3, #128	; 0x80
    1b70:	d029      	beq.n	1bc6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1b72:	061b      	lsls	r3, r3, #24
    1b74:	2480      	movs	r4, #128	; 0x80
    1b76:	0264      	lsls	r4, r4, #9
    1b78:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1b7a:	7854      	ldrb	r4, [r2, #1]
    1b7c:	2502      	movs	r5, #2
    1b7e:	43ac      	bics	r4, r5
    1b80:	d106      	bne.n	1b90 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1b82:	7894      	ldrb	r4, [r2, #2]
    1b84:	2c00      	cmp	r4, #0
    1b86:	d120      	bne.n	1bca <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b88:	2480      	movs	r4, #128	; 0x80
    1b8a:	02a4      	lsls	r4, r4, #10
    1b8c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b8e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b90:	7854      	ldrb	r4, [r2, #1]
    1b92:	3c01      	subs	r4, #1
    1b94:	2c01      	cmp	r4, #1
    1b96:	d91c      	bls.n	1bd2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b98:	040d      	lsls	r5, r1, #16
    1b9a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b9c:	24a0      	movs	r4, #160	; 0xa0
    1b9e:	05e4      	lsls	r4, r4, #23
    1ba0:	432c      	orrs	r4, r5
    1ba2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ba4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1ba6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ba8:	24d0      	movs	r4, #208	; 0xd0
    1baa:	0624      	lsls	r4, r4, #24
    1bac:	432c      	orrs	r4, r5
    1bae:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1bb0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1bb2:	78d4      	ldrb	r4, [r2, #3]
    1bb4:	2c00      	cmp	r4, #0
    1bb6:	d122      	bne.n	1bfe <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1bb8:	035b      	lsls	r3, r3, #13
    1bba:	d51c      	bpl.n	1bf6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1bbc:	7893      	ldrb	r3, [r2, #2]
    1bbe:	2b01      	cmp	r3, #1
    1bc0:	d01e      	beq.n	1c00 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1bc2:	6141      	str	r1, [r0, #20]
    1bc4:	e017      	b.n	1bf6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1bc6:	2300      	movs	r3, #0
    1bc8:	e7d7      	b.n	1b7a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1bca:	24c0      	movs	r4, #192	; 0xc0
    1bcc:	02e4      	lsls	r4, r4, #11
    1bce:	4323      	orrs	r3, r4
    1bd0:	e7dd      	b.n	1b8e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1bd2:	4c0d      	ldr	r4, [pc, #52]	; (1c08 <_system_pinmux_config+0xa4>)
    1bd4:	4023      	ands	r3, r4
    1bd6:	e7df      	b.n	1b98 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1bd8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1bda:	040c      	lsls	r4, r1, #16
    1bdc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1bde:	23a0      	movs	r3, #160	; 0xa0
    1be0:	05db      	lsls	r3, r3, #23
    1be2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1be4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1be6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1be8:	23d0      	movs	r3, #208	; 0xd0
    1bea:	061b      	lsls	r3, r3, #24
    1bec:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1bee:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1bf0:	78d3      	ldrb	r3, [r2, #3]
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d103      	bne.n	1bfe <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1bf6:	7853      	ldrb	r3, [r2, #1]
    1bf8:	3b01      	subs	r3, #1
    1bfa:	2b01      	cmp	r3, #1
    1bfc:	d902      	bls.n	1c04 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1bfe:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1c00:	6181      	str	r1, [r0, #24]
    1c02:	e7f8      	b.n	1bf6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1c04:	6081      	str	r1, [r0, #8]
}
    1c06:	e7fa      	b.n	1bfe <_system_pinmux_config+0x9a>
    1c08:	fffbffff 	.word	0xfffbffff

00001c0c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1c0c:	b510      	push	{r4, lr}
    1c0e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1c10:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1c12:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1c14:	2900      	cmp	r1, #0
    1c16:	d104      	bne.n	1c22 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1c18:	0943      	lsrs	r3, r0, #5
    1c1a:	01db      	lsls	r3, r3, #7
    1c1c:	4905      	ldr	r1, [pc, #20]	; (1c34 <system_pinmux_pin_set_config+0x28>)
    1c1e:	468c      	mov	ip, r1
    1c20:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1c22:	241f      	movs	r4, #31
    1c24:	4020      	ands	r0, r4
    1c26:	2101      	movs	r1, #1
    1c28:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1c2a:	0018      	movs	r0, r3
    1c2c:	4b02      	ldr	r3, [pc, #8]	; (1c38 <system_pinmux_pin_set_config+0x2c>)
    1c2e:	4798      	blx	r3
}
    1c30:	bd10      	pop	{r4, pc}
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	41004400 	.word	0x41004400
    1c38:	00001b65 	.word	0x00001b65

00001c3c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1c3c:	4770      	bx	lr
	...

00001c40 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1c40:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1c42:	4b05      	ldr	r3, [pc, #20]	; (1c58 <system_init+0x18>)
    1c44:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1c46:	4b05      	ldr	r3, [pc, #20]	; (1c5c <system_init+0x1c>)
    1c48:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1c4a:	4b05      	ldr	r3, [pc, #20]	; (1c60 <system_init+0x20>)
    1c4c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1c4e:	4b05      	ldr	r3, [pc, #20]	; (1c64 <system_init+0x24>)
    1c50:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1c52:	4b05      	ldr	r3, [pc, #20]	; (1c68 <system_init+0x28>)
    1c54:	4798      	blx	r3
}
    1c56:	bd10      	pop	{r4, pc}
    1c58:	00001701 	.word	0x00001701
    1c5c:	000001f1 	.word	0x000001f1
    1c60:	00001c3d 	.word	0x00001c3d
    1c64:	0000039d 	.word	0x0000039d
    1c68:	00001c3d 	.word	0x00001c3d

00001c6c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1c6c:	1c93      	adds	r3, r2, #2
    1c6e:	009b      	lsls	r3, r3, #2
    1c70:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1c72:	2a02      	cmp	r2, #2
    1c74:	d009      	beq.n	1c8a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1c76:	2a03      	cmp	r2, #3
    1c78:	d00c      	beq.n	1c94 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1c7a:	2301      	movs	r3, #1
    1c7c:	4093      	lsls	r3, r2
    1c7e:	001a      	movs	r2, r3
    1c80:	7e03      	ldrb	r3, [r0, #24]
    1c82:	4313      	orrs	r3, r2
    1c84:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1c86:	2000      	movs	r0, #0
    1c88:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1c8a:	7e03      	ldrb	r3, [r0, #24]
    1c8c:	2210      	movs	r2, #16
    1c8e:	4313      	orrs	r3, r2
    1c90:	7603      	strb	r3, [r0, #24]
    1c92:	e7f8      	b.n	1c86 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1c94:	7e03      	ldrb	r3, [r0, #24]
    1c96:	2220      	movs	r2, #32
    1c98:	4313      	orrs	r3, r2
    1c9a:	7603      	strb	r3, [r0, #24]
    1c9c:	e7f3      	b.n	1c86 <tc_register_callback+0x1a>
	...

00001ca0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1ca0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1ca2:	0080      	lsls	r0, r0, #2
    1ca4:	4b16      	ldr	r3, [pc, #88]	; (1d00 <_tc_interrupt_handler+0x60>)
    1ca6:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1ca8:	6823      	ldr	r3, [r4, #0]
    1caa:	7b9d      	ldrb	r5, [r3, #14]
    1cac:	7e22      	ldrb	r2, [r4, #24]
    1cae:	7e63      	ldrb	r3, [r4, #25]
    1cb0:	4013      	ands	r3, r2
    1cb2:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1cb4:	07eb      	lsls	r3, r5, #31
    1cb6:	d406      	bmi.n	1cc6 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1cb8:	07ab      	lsls	r3, r5, #30
    1cba:	d40b      	bmi.n	1cd4 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1cbc:	06eb      	lsls	r3, r5, #27
    1cbe:	d410      	bmi.n	1ce2 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1cc0:	06ab      	lsls	r3, r5, #26
    1cc2:	d415      	bmi.n	1cf0 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1cc4:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1cc6:	0020      	movs	r0, r4
    1cc8:	68a3      	ldr	r3, [r4, #8]
    1cca:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1ccc:	2301      	movs	r3, #1
    1cce:	6822      	ldr	r2, [r4, #0]
    1cd0:	7393      	strb	r3, [r2, #14]
    1cd2:	e7f1      	b.n	1cb8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1cd4:	0020      	movs	r0, r4
    1cd6:	68e3      	ldr	r3, [r4, #12]
    1cd8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1cda:	2302      	movs	r3, #2
    1cdc:	6822      	ldr	r2, [r4, #0]
    1cde:	7393      	strb	r3, [r2, #14]
    1ce0:	e7ec      	b.n	1cbc <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1ce2:	0020      	movs	r0, r4
    1ce4:	6923      	ldr	r3, [r4, #16]
    1ce6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1ce8:	2310      	movs	r3, #16
    1cea:	6822      	ldr	r2, [r4, #0]
    1cec:	7393      	strb	r3, [r2, #14]
    1cee:	e7e7      	b.n	1cc0 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1cf0:	0020      	movs	r0, r4
    1cf2:	6963      	ldr	r3, [r4, #20]
    1cf4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1cf6:	6823      	ldr	r3, [r4, #0]
    1cf8:	2220      	movs	r2, #32
    1cfa:	739a      	strb	r2, [r3, #14]
}
    1cfc:	e7e2      	b.n	1cc4 <_tc_interrupt_handler+0x24>
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	20000e74 	.word	0x20000e74

00001d04 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1d04:	b510      	push	{r4, lr}
    1d06:	2000      	movs	r0, #0
    1d08:	4b01      	ldr	r3, [pc, #4]	; (1d10 <TC3_Handler+0xc>)
    1d0a:	4798      	blx	r3
    1d0c:	bd10      	pop	{r4, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	00001ca1 	.word	0x00001ca1

00001d14 <TC4_Handler>:
    1d14:	b510      	push	{r4, lr}
    1d16:	2001      	movs	r0, #1
    1d18:	4b01      	ldr	r3, [pc, #4]	; (1d20 <TC4_Handler+0xc>)
    1d1a:	4798      	blx	r3
    1d1c:	bd10      	pop	{r4, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	00001ca1 	.word	0x00001ca1

00001d24 <TC5_Handler>:
    1d24:	b510      	push	{r4, lr}
    1d26:	2002      	movs	r0, #2
    1d28:	4b01      	ldr	r3, [pc, #4]	; (1d30 <TC5_Handler+0xc>)
    1d2a:	4798      	blx	r3
    1d2c:	bd10      	pop	{r4, pc}
    1d2e:	46c0      	nop			; (mov r8, r8)
    1d30:	00001ca1 	.word	0x00001ca1

00001d34 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1d34:	b530      	push	{r4, r5, lr}
    1d36:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1d38:	aa01      	add	r2, sp, #4
    1d3a:	4b0b      	ldr	r3, [pc, #44]	; (1d68 <_tc_get_inst_index+0x34>)
    1d3c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1d3e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1d40:	9b01      	ldr	r3, [sp, #4]
    1d42:	4298      	cmp	r0, r3
    1d44:	d00d      	beq.n	1d62 <_tc_get_inst_index+0x2e>
    1d46:	9b02      	ldr	r3, [sp, #8]
    1d48:	4298      	cmp	r0, r3
    1d4a:	d008      	beq.n	1d5e <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1d4c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1d4e:	9a03      	ldr	r2, [sp, #12]
    1d50:	4282      	cmp	r2, r0
    1d52:	d002      	beq.n	1d5a <_tc_get_inst_index+0x26>
}
    1d54:	0018      	movs	r0, r3
    1d56:	b005      	add	sp, #20
    1d58:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1d5a:	3302      	adds	r3, #2
    1d5c:	e002      	b.n	1d64 <_tc_get_inst_index+0x30>
    1d5e:	2301      	movs	r3, #1
    1d60:	e000      	b.n	1d64 <_tc_get_inst_index+0x30>
    1d62:	2300      	movs	r3, #0
			return i;
    1d64:	b2db      	uxtb	r3, r3
    1d66:	e7f5      	b.n	1d54 <_tc_get_inst_index+0x20>
    1d68:	00006014 	.word	0x00006014

00001d6c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d6e:	b087      	sub	sp, #28
    1d70:	0004      	movs	r4, r0
    1d72:	000d      	movs	r5, r1
    1d74:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1d76:	0008      	movs	r0, r1
    1d78:	4b85      	ldr	r3, [pc, #532]	; (1f90 <tc_init+0x224>)
    1d7a:	4798      	blx	r3
    1d7c:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1d7e:	ab05      	add	r3, sp, #20
    1d80:	221b      	movs	r2, #27
    1d82:	701a      	strb	r2, [r3, #0]
    1d84:	3201      	adds	r2, #1
    1d86:	705a      	strb	r2, [r3, #1]
    1d88:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1d8a:	ab03      	add	r3, sp, #12
    1d8c:	2280      	movs	r2, #128	; 0x80
    1d8e:	0112      	lsls	r2, r2, #4
    1d90:	801a      	strh	r2, [r3, #0]
    1d92:	2280      	movs	r2, #128	; 0x80
    1d94:	0152      	lsls	r2, r2, #5
    1d96:	805a      	strh	r2, [r3, #2]
    1d98:	2280      	movs	r2, #128	; 0x80
    1d9a:	0192      	lsls	r2, r2, #6
    1d9c:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1d9e:	2300      	movs	r3, #0
    1da0:	60a3      	str	r3, [r4, #8]
    1da2:	60e3      	str	r3, [r4, #12]
    1da4:	6123      	str	r3, [r4, #16]
    1da6:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1da8:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1daa:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1dac:	0082      	lsls	r2, r0, #2
    1dae:	4b79      	ldr	r3, [pc, #484]	; (1f94 <tc_init+0x228>)
    1db0:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1db2:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1db4:	78b3      	ldrb	r3, [r6, #2]
    1db6:	2b08      	cmp	r3, #8
    1db8:	d006      	beq.n	1dc8 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1dba:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1dbc:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1dbe:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1dc0:	07db      	lsls	r3, r3, #31
    1dc2:	d505      	bpl.n	1dd0 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1dc4:	b007      	add	sp, #28
    1dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1dc8:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1dca:	07fa      	lsls	r2, r7, #31
    1dcc:	d5fa      	bpl.n	1dc4 <tc_init+0x58>
    1dce:	e7f4      	b.n	1dba <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1dd0:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1dd2:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1dd4:	06db      	lsls	r3, r3, #27
    1dd6:	d4f5      	bmi.n	1dc4 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1dd8:	882b      	ldrh	r3, [r5, #0]
    1dda:	079b      	lsls	r3, r3, #30
    1ddc:	d4f2      	bmi.n	1dc4 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    1dde:	7c33      	ldrb	r3, [r6, #16]
    1de0:	2b00      	cmp	r3, #0
    1de2:	d179      	bne.n	1ed8 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    1de4:	7f33      	ldrb	r3, [r6, #28]
    1de6:	2b00      	cmp	r3, #0
    1de8:	d000      	beq.n	1dec <tc_init+0x80>
    1dea:	e081      	b.n	1ef0 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    1dec:	496a      	ldr	r1, [pc, #424]	; (1f98 <tc_init+0x22c>)
    1dee:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1df0:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1df2:	ab03      	add	r3, sp, #12
    1df4:	5ad3      	ldrh	r3, [r2, r3]
    1df6:	4303      	orrs	r3, r0
    1df8:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1dfa:	78b3      	ldrb	r3, [r6, #2]
    1dfc:	2b08      	cmp	r3, #8
    1dfe:	d100      	bne.n	1e02 <tc_init+0x96>
    1e00:	e086      	b.n	1f10 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    1e02:	a901      	add	r1, sp, #4
    1e04:	7833      	ldrb	r3, [r6, #0]
    1e06:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1e08:	ab05      	add	r3, sp, #20
    1e0a:	5ddf      	ldrb	r7, [r3, r7]
    1e0c:	0038      	movs	r0, r7
    1e0e:	4b63      	ldr	r3, [pc, #396]	; (1f9c <tc_init+0x230>)
    1e10:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1e12:	0038      	movs	r0, r7
    1e14:	4b62      	ldr	r3, [pc, #392]	; (1fa0 <tc_init+0x234>)
    1e16:	4798      	blx	r3
	ctrla_tmp =
    1e18:	8931      	ldrh	r1, [r6, #8]
    1e1a:	88b3      	ldrh	r3, [r6, #4]
    1e1c:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1e1e:	78b1      	ldrb	r1, [r6, #2]
    1e20:	79b2      	ldrb	r2, [r6, #6]
    1e22:	4311      	orrs	r1, r2
	ctrla_tmp =
    1e24:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1e26:	7873      	ldrb	r3, [r6, #1]
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d002      	beq.n	1e32 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1e2c:	2380      	movs	r3, #128	; 0x80
    1e2e:	011b      	lsls	r3, r3, #4
    1e30:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e32:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e34:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e36:	b25b      	sxtb	r3, r3
    1e38:	2b00      	cmp	r3, #0
    1e3a:	dbfb      	blt.n	1e34 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1e3c:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1e3e:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1e40:	1e4b      	subs	r3, r1, #1
    1e42:	4199      	sbcs	r1, r3
    1e44:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1e46:	7bb3      	ldrb	r3, [r6, #14]
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d001      	beq.n	1e50 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1e4c:	2301      	movs	r3, #1
    1e4e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e50:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e52:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e54:	b25b      	sxtb	r3, r3
    1e56:	2b00      	cmp	r3, #0
    1e58:	dbfb      	blt.n	1e52 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1e5a:	23ff      	movs	r3, #255	; 0xff
    1e5c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1e5e:	2900      	cmp	r1, #0
    1e60:	d005      	beq.n	1e6e <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e62:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e64:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1e66:	b25b      	sxtb	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	dbfb      	blt.n	1e64 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1e6c:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1e6e:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1e70:	7af3      	ldrb	r3, [r6, #11]
    1e72:	2b00      	cmp	r3, #0
    1e74:	d001      	beq.n	1e7a <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e76:	2310      	movs	r3, #16
    1e78:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1e7a:	7b33      	ldrb	r3, [r6, #12]
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d001      	beq.n	1e84 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e80:	2320      	movs	r3, #32
    1e82:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e84:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e86:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e88:	b25b      	sxtb	r3, r3
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	dbfb      	blt.n	1e86 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1e8e:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e90:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e92:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e94:	b25b      	sxtb	r3, r3
    1e96:	2b00      	cmp	r3, #0
    1e98:	dbfb      	blt.n	1e92 <tc_init+0x126>
	switch (module_inst->counter_size) {
    1e9a:	7923      	ldrb	r3, [r4, #4]
    1e9c:	2b04      	cmp	r3, #4
    1e9e:	d03f      	beq.n	1f20 <tc_init+0x1b4>
    1ea0:	2b08      	cmp	r3, #8
    1ea2:	d05e      	beq.n	1f62 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    1ea4:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	d000      	beq.n	1eac <tc_init+0x140>
    1eaa:	e78b      	b.n	1dc4 <tc_init+0x58>
    1eac:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1eae:	b25b      	sxtb	r3, r3
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	dbfb      	blt.n	1eac <tc_init+0x140>
				= config->counter_16_bit.value;
    1eb4:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1eb6:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1eb8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1eba:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ebc:	b25b      	sxtb	r3, r3
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	dbfb      	blt.n	1eba <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    1ec2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1ec4:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ec6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ec8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1eca:	b25b      	sxtb	r3, r3
    1ecc:	2b00      	cmp	r3, #0
    1ece:	dbfb      	blt.n	1ec8 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    1ed0:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1ed2:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1ed4:	2000      	movs	r0, #0
    1ed6:	e775      	b.n	1dc4 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ed8:	a902      	add	r1, sp, #8
    1eda:	2301      	movs	r3, #1
    1edc:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1ede:	2200      	movs	r2, #0
    1ee0:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1ee2:	7e32      	ldrb	r2, [r6, #24]
    1ee4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1ee6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1ee8:	7d30      	ldrb	r0, [r6, #20]
    1eea:	4b2e      	ldr	r3, [pc, #184]	; (1fa4 <tc_init+0x238>)
    1eec:	4798      	blx	r3
    1eee:	e779      	b.n	1de4 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ef0:	a902      	add	r1, sp, #8
    1ef2:	2301      	movs	r3, #1
    1ef4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1ef6:	2200      	movs	r2, #0
    1ef8:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1efa:	3224      	adds	r2, #36	; 0x24
    1efc:	18b2      	adds	r2, r6, r2
    1efe:	7812      	ldrb	r2, [r2, #0]
    1f00:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1f02:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1f04:	331f      	adds	r3, #31
    1f06:	18f3      	adds	r3, r6, r3
    1f08:	7818      	ldrb	r0, [r3, #0]
    1f0a:	4b26      	ldr	r3, [pc, #152]	; (1fa4 <tc_init+0x238>)
    1f0c:	4798      	blx	r3
    1f0e:	e76d      	b.n	1dec <tc_init+0x80>
    1f10:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1f12:	1c7a      	adds	r2, r7, #1
    1f14:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1f16:	ab03      	add	r3, sp, #12
    1f18:	5ad3      	ldrh	r3, [r2, r3]
    1f1a:	4303      	orrs	r3, r0
    1f1c:	620b      	str	r3, [r1, #32]
    1f1e:	e770      	b.n	1e02 <tc_init+0x96>
    1f20:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f22:	b25b      	sxtb	r3, r3
    1f24:	2b00      	cmp	r3, #0
    1f26:	dbfb      	blt.n	1f20 <tc_init+0x1b4>
					config->counter_8_bit.value;
    1f28:	2328      	movs	r3, #40	; 0x28
    1f2a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1f2c:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f2e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f30:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f32:	b25b      	sxtb	r3, r3
    1f34:	2b00      	cmp	r3, #0
    1f36:	dbfb      	blt.n	1f30 <tc_init+0x1c4>
					config->counter_8_bit.period;
    1f38:	2329      	movs	r3, #41	; 0x29
    1f3a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1f3c:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f3e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f40:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f42:	b25b      	sxtb	r3, r3
    1f44:	2b00      	cmp	r3, #0
    1f46:	dbfb      	blt.n	1f40 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    1f48:	232a      	movs	r3, #42	; 0x2a
    1f4a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1f4c:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f4e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f50:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f52:	b25b      	sxtb	r3, r3
    1f54:	2b00      	cmp	r3, #0
    1f56:	dbfb      	blt.n	1f50 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    1f58:	232b      	movs	r3, #43	; 0x2b
    1f5a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1f5c:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1f5e:	2000      	movs	r0, #0
    1f60:	e730      	b.n	1dc4 <tc_init+0x58>
    1f62:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f64:	b25b      	sxtb	r3, r3
    1f66:	2b00      	cmp	r3, #0
    1f68:	dbfb      	blt.n	1f62 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1f6a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1f6c:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f6e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f70:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f72:	b25b      	sxtb	r3, r3
    1f74:	2b00      	cmp	r3, #0
    1f76:	dbfb      	blt.n	1f70 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1f78:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1f7a:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f7c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f7e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f80:	b25b      	sxtb	r3, r3
    1f82:	2b00      	cmp	r3, #0
    1f84:	dbfb      	blt.n	1f7e <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    1f86:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1f88:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1f8a:	2000      	movs	r0, #0
    1f8c:	e71a      	b.n	1dc4 <tc_init+0x58>
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	00001d35 	.word	0x00001d35
    1f94:	20000e74 	.word	0x20000e74
    1f98:	40000400 	.word	0x40000400
    1f9c:	00001b15 	.word	0x00001b15
    1fa0:	00001a89 	.word	0x00001a89
    1fa4:	00001c0d 	.word	0x00001c0d

00001fa8 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1fa8:	6802      	ldr	r2, [r0, #0]
    1faa:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1fac:	b25b      	sxtb	r3, r3
    1fae:	2b00      	cmp	r3, #0
    1fb0:	dbfb      	blt.n	1faa <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1fb2:	7903      	ldrb	r3, [r0, #4]
    1fb4:	2b04      	cmp	r3, #4
    1fb6:	d005      	beq.n	1fc4 <tc_get_count_value+0x1c>
    1fb8:	2b08      	cmp	r3, #8
    1fba:	d009      	beq.n	1fd0 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1fbc:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	d003      	beq.n	1fca <tc_get_count_value+0x22>
}
    1fc2:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1fc4:	7c10      	ldrb	r0, [r2, #16]
    1fc6:	b2c0      	uxtb	r0, r0
    1fc8:	e7fb      	b.n	1fc2 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    1fca:	8a10      	ldrh	r0, [r2, #16]
    1fcc:	b280      	uxth	r0, r0
    1fce:	e7f8      	b.n	1fc2 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    1fd0:	6910      	ldr	r0, [r2, #16]
    1fd2:	e7f6      	b.n	1fc2 <tc_get_count_value+0x1a>

00001fd4 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1fd4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1fd6:	6804      	ldr	r4, [r0, #0]
    1fd8:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1fda:	b25b      	sxtb	r3, r3
    1fdc:	2b00      	cmp	r3, #0
    1fde:	dbfb      	blt.n	1fd8 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1fe0:	7903      	ldrb	r3, [r0, #4]
    1fe2:	2b04      	cmp	r3, #4
    1fe4:	d005      	beq.n	1ff2 <tc_set_compare_value+0x1e>
    1fe6:	2b08      	cmp	r3, #8
    1fe8:	d014      	beq.n	2014 <STACK_SIZE+0x14>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1fea:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1fec:	2b00      	cmp	r3, #0
    1fee:	d008      	beq.n	2002 <STACK_SIZE+0x2>
}
    1ff0:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1ff2:	2017      	movs	r0, #23
			if (channel_index <
    1ff4:	2901      	cmp	r1, #1
    1ff6:	d8fb      	bhi.n	1ff0 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    1ff8:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1ffa:	1861      	adds	r1, r4, r1
    1ffc:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1ffe:	2000      	movs	r0, #0
    2000:	e7f6      	b.n	1ff0 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2002:	2017      	movs	r0, #23
			if (channel_index <
    2004:	2901      	cmp	r1, #1
    2006:	d8f3      	bhi.n	1ff0 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    2008:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    200a:	310c      	adds	r1, #12
    200c:	0049      	lsls	r1, r1, #1
    200e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    2010:	2000      	movs	r0, #0
    2012:	e7ed      	b.n	1ff0 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2014:	2017      	movs	r0, #23
			if (channel_index <
    2016:	2901      	cmp	r1, #1
    2018:	d8ea      	bhi.n	1ff0 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    201a:	3106      	adds	r1, #6
    201c:	0089      	lsls	r1, r1, #2
    201e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    2020:	2000      	movs	r0, #0
    2022:	e7e5      	b.n	1ff0 <tc_set_compare_value+0x1c>

00002024 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2024:	e7fe      	b.n	2024 <Dummy_Handler>
	...

00002028 <Reset_Handler>:
{
    2028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    202a:	4a2a      	ldr	r2, [pc, #168]	; (20d4 <Reset_Handler+0xac>)
    202c:	4b2a      	ldr	r3, [pc, #168]	; (20d8 <Reset_Handler+0xb0>)
    202e:	429a      	cmp	r2, r3
    2030:	d011      	beq.n	2056 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2032:	001a      	movs	r2, r3
    2034:	4b29      	ldr	r3, [pc, #164]	; (20dc <Reset_Handler+0xb4>)
    2036:	429a      	cmp	r2, r3
    2038:	d20d      	bcs.n	2056 <Reset_Handler+0x2e>
    203a:	4a29      	ldr	r2, [pc, #164]	; (20e0 <Reset_Handler+0xb8>)
    203c:	3303      	adds	r3, #3
    203e:	1a9b      	subs	r3, r3, r2
    2040:	089b      	lsrs	r3, r3, #2
    2042:	3301      	adds	r3, #1
    2044:	009b      	lsls	r3, r3, #2
    2046:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2048:	4823      	ldr	r0, [pc, #140]	; (20d8 <Reset_Handler+0xb0>)
    204a:	4922      	ldr	r1, [pc, #136]	; (20d4 <Reset_Handler+0xac>)
    204c:	588c      	ldr	r4, [r1, r2]
    204e:	5084      	str	r4, [r0, r2]
    2050:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2052:	429a      	cmp	r2, r3
    2054:	d1fa      	bne.n	204c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2056:	4a23      	ldr	r2, [pc, #140]	; (20e4 <Reset_Handler+0xbc>)
    2058:	4b23      	ldr	r3, [pc, #140]	; (20e8 <Reset_Handler+0xc0>)
    205a:	429a      	cmp	r2, r3
    205c:	d20a      	bcs.n	2074 <Reset_Handler+0x4c>
    205e:	43d3      	mvns	r3, r2
    2060:	4921      	ldr	r1, [pc, #132]	; (20e8 <Reset_Handler+0xc0>)
    2062:	185b      	adds	r3, r3, r1
    2064:	2103      	movs	r1, #3
    2066:	438b      	bics	r3, r1
    2068:	3304      	adds	r3, #4
    206a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    206c:	2100      	movs	r1, #0
    206e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2070:	4293      	cmp	r3, r2
    2072:	d1fc      	bne.n	206e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2074:	4a1d      	ldr	r2, [pc, #116]	; (20ec <Reset_Handler+0xc4>)
    2076:	21ff      	movs	r1, #255	; 0xff
    2078:	4b1d      	ldr	r3, [pc, #116]	; (20f0 <Reset_Handler+0xc8>)
    207a:	438b      	bics	r3, r1
    207c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    207e:	39fd      	subs	r1, #253	; 0xfd
    2080:	2390      	movs	r3, #144	; 0x90
    2082:	005b      	lsls	r3, r3, #1
    2084:	4a1b      	ldr	r2, [pc, #108]	; (20f4 <Reset_Handler+0xcc>)
    2086:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2088:	4a1b      	ldr	r2, [pc, #108]	; (20f8 <Reset_Handler+0xd0>)
    208a:	78d3      	ldrb	r3, [r2, #3]
    208c:	2503      	movs	r5, #3
    208e:	43ab      	bics	r3, r5
    2090:	2402      	movs	r4, #2
    2092:	4323      	orrs	r3, r4
    2094:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2096:	78d3      	ldrb	r3, [r2, #3]
    2098:	270c      	movs	r7, #12
    209a:	43bb      	bics	r3, r7
    209c:	2608      	movs	r6, #8
    209e:	4333      	orrs	r3, r6
    20a0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    20a2:	4b16      	ldr	r3, [pc, #88]	; (20fc <Reset_Handler+0xd4>)
    20a4:	7b98      	ldrb	r0, [r3, #14]
    20a6:	2230      	movs	r2, #48	; 0x30
    20a8:	4390      	bics	r0, r2
    20aa:	2220      	movs	r2, #32
    20ac:	4310      	orrs	r0, r2
    20ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    20b0:	7b99      	ldrb	r1, [r3, #14]
    20b2:	43b9      	bics	r1, r7
    20b4:	4331      	orrs	r1, r6
    20b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    20b8:	7b9a      	ldrb	r2, [r3, #14]
    20ba:	43aa      	bics	r2, r5
    20bc:	4322      	orrs	r2, r4
    20be:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    20c0:	4a0f      	ldr	r2, [pc, #60]	; (2100 <Reset_Handler+0xd8>)
    20c2:	6853      	ldr	r3, [r2, #4]
    20c4:	2180      	movs	r1, #128	; 0x80
    20c6:	430b      	orrs	r3, r1
    20c8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    20ca:	4b0e      	ldr	r3, [pc, #56]	; (2104 <Reset_Handler+0xdc>)
    20cc:	4798      	blx	r3
        main();
    20ce:	4b0e      	ldr	r3, [pc, #56]	; (2108 <Reset_Handler+0xe0>)
    20d0:	4798      	blx	r3
    20d2:	e7fe      	b.n	20d2 <Reset_Handler+0xaa>
    20d4:	00006100 	.word	0x00006100
    20d8:	20000000 	.word	0x20000000
    20dc:	20000070 	.word	0x20000070
    20e0:	20000004 	.word	0x20000004
    20e4:	20000070 	.word	0x20000070
    20e8:	20000f9c 	.word	0x20000f9c
    20ec:	e000ed00 	.word	0xe000ed00
    20f0:	00000000 	.word	0x00000000
    20f4:	41007000 	.word	0x41007000
    20f8:	41005000 	.word	0x41005000
    20fc:	41004800 	.word	0x41004800
    2100:	41004000 	.word	0x41004000
    2104:	000056b9 	.word	0x000056b9
    2108:	0000541d 	.word	0x0000541d

0000210c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    210c:	b5f0      	push	{r4, r5, r6, r7, lr}
    210e:	46c6      	mov	lr, r8
    2110:	b500      	push	{lr}
    2112:	000c      	movs	r4, r1
    2114:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2116:	2800      	cmp	r0, #0
    2118:	d10f      	bne.n	213a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    211a:	2a00      	cmp	r2, #0
    211c:	dd11      	ble.n	2142 <_read+0x36>
    211e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2120:	4e09      	ldr	r6, [pc, #36]	; (2148 <_read+0x3c>)
    2122:	4d0a      	ldr	r5, [pc, #40]	; (214c <_read+0x40>)
    2124:	6830      	ldr	r0, [r6, #0]
    2126:	0021      	movs	r1, r4
    2128:	682b      	ldr	r3, [r5, #0]
    212a:	4798      	blx	r3
		ptr++;
    212c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    212e:	42bc      	cmp	r4, r7
    2130:	d1f8      	bne.n	2124 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2132:	4640      	mov	r0, r8
    2134:	bc04      	pop	{r2}
    2136:	4690      	mov	r8, r2
    2138:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    213a:	2301      	movs	r3, #1
    213c:	425b      	negs	r3, r3
    213e:	4698      	mov	r8, r3
    2140:	e7f7      	b.n	2132 <_read+0x26>
	for (; len > 0; --len) {
    2142:	4680      	mov	r8, r0
    2144:	e7f5      	b.n	2132 <_read+0x26>
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	20000e88 	.word	0x20000e88
    214c:	20000e80 	.word	0x20000e80

00002150 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2150:	b5f0      	push	{r4, r5, r6, r7, lr}
    2152:	46c6      	mov	lr, r8
    2154:	b500      	push	{lr}
    2156:	000e      	movs	r6, r1
    2158:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    215a:	3801      	subs	r0, #1
    215c:	2802      	cmp	r0, #2
    215e:	d810      	bhi.n	2182 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2160:	2a00      	cmp	r2, #0
    2162:	d011      	beq.n	2188 <_write+0x38>
    2164:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2166:	4b0c      	ldr	r3, [pc, #48]	; (2198 <_write+0x48>)
    2168:	4698      	mov	r8, r3
    216a:	4f0c      	ldr	r7, [pc, #48]	; (219c <_write+0x4c>)
    216c:	4643      	mov	r3, r8
    216e:	6818      	ldr	r0, [r3, #0]
    2170:	5d31      	ldrb	r1, [r6, r4]
    2172:	683b      	ldr	r3, [r7, #0]
    2174:	4798      	blx	r3
    2176:	2800      	cmp	r0, #0
    2178:	db08      	blt.n	218c <_write+0x3c>
			return -1;
		}
		++nChars;
    217a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    217c:	42a5      	cmp	r5, r4
    217e:	d1f5      	bne.n	216c <_write+0x1c>
    2180:	e006      	b.n	2190 <_write+0x40>
		return -1;
    2182:	2401      	movs	r4, #1
    2184:	4264      	negs	r4, r4
    2186:	e003      	b.n	2190 <_write+0x40>
	for (; len != 0; --len) {
    2188:	0014      	movs	r4, r2
    218a:	e001      	b.n	2190 <_write+0x40>
			return -1;
    218c:	2401      	movs	r4, #1
    218e:	4264      	negs	r4, r4
	}
	return nChars;
}
    2190:	0020      	movs	r0, r4
    2192:	bc04      	pop	{r2}
    2194:	4690      	mov	r8, r2
    2196:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2198:	20000e88 	.word	0x20000e88
    219c:	20000e84 	.word	0x20000e84

000021a0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    21a0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    21a2:	4a06      	ldr	r2, [pc, #24]	; (21bc <_sbrk+0x1c>)
    21a4:	6812      	ldr	r2, [r2, #0]
    21a6:	2a00      	cmp	r2, #0
    21a8:	d004      	beq.n	21b4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    21aa:	4a04      	ldr	r2, [pc, #16]	; (21bc <_sbrk+0x1c>)
    21ac:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    21ae:	18c3      	adds	r3, r0, r3
    21b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    21b2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    21b4:	4902      	ldr	r1, [pc, #8]	; (21c0 <_sbrk+0x20>)
    21b6:	4a01      	ldr	r2, [pc, #4]	; (21bc <_sbrk+0x1c>)
    21b8:	6011      	str	r1, [r2, #0]
    21ba:	e7f6      	b.n	21aa <_sbrk+0xa>
    21bc:	200000c8 	.word	0x200000c8
    21c0:	20002fa0 	.word	0x20002fa0

000021c4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    21c4:	2001      	movs	r0, #1
    21c6:	4240      	negs	r0, r0
    21c8:	4770      	bx	lr

000021ca <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    21ca:	2380      	movs	r3, #128	; 0x80
    21cc:	019b      	lsls	r3, r3, #6
    21ce:	604b      	str	r3, [r1, #4]

	return 0;
}
    21d0:	2000      	movs	r0, #0
    21d2:	4770      	bx	lr

000021d4 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    21d4:	2000      	movs	r0, #0
    21d6:	4770      	bx	lr

000021d8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    21d8:	b570      	push	{r4, r5, r6, lr}
    21da:	b082      	sub	sp, #8
    21dc:	0005      	movs	r5, r0
    21de:	000e      	movs	r6, r1
	uint16_t temp = 0;
    21e0:	2200      	movs	r2, #0
    21e2:	466b      	mov	r3, sp
    21e4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    21e6:	4c06      	ldr	r4, [pc, #24]	; (2200 <usart_serial_getchar+0x28>)
    21e8:	466b      	mov	r3, sp
    21ea:	1d99      	adds	r1, r3, #6
    21ec:	0028      	movs	r0, r5
    21ee:	47a0      	blx	r4
    21f0:	2800      	cmp	r0, #0
    21f2:	d1f9      	bne.n	21e8 <usart_serial_getchar+0x10>

	*c = temp;
    21f4:	466b      	mov	r3, sp
    21f6:	3306      	adds	r3, #6
    21f8:	881b      	ldrh	r3, [r3, #0]
    21fa:	7033      	strb	r3, [r6, #0]
}
    21fc:	b002      	add	sp, #8
    21fe:	bd70      	pop	{r4, r5, r6, pc}
    2200:	0000107d 	.word	0x0000107d

00002204 <usart_serial_putchar>:
{
    2204:	b570      	push	{r4, r5, r6, lr}
    2206:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2208:	b28c      	uxth	r4, r1
    220a:	4e03      	ldr	r6, [pc, #12]	; (2218 <usart_serial_putchar+0x14>)
    220c:	0021      	movs	r1, r4
    220e:	0028      	movs	r0, r5
    2210:	47b0      	blx	r6
    2212:	2800      	cmp	r0, #0
    2214:	d1fa      	bne.n	220c <usart_serial_putchar+0x8>
}
    2216:	bd70      	pop	{r4, r5, r6, pc}
    2218:	00001051 	.word	0x00001051

0000221c <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    221c:	b510      	push	{r4, lr}
    221e:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    2220:	466b      	mov	r3, sp
    2222:	1ddc      	adds	r4, r3, #7
    2224:	2201      	movs	r2, #1
    2226:	0021      	movs	r1, r4
    2228:	480f      	ldr	r0, [pc, #60]	; (2268 <USART_HOST_ISR_VECT+0x4c>)
    222a:	4b10      	ldr	r3, [pc, #64]	; (226c <USART_HOST_ISR_VECT+0x50>)
    222c:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    222e:	b672      	cpsid	i
    2230:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    2234:	2200      	movs	r2, #0
    2236:	4b0e      	ldr	r3, [pc, #56]	; (2270 <USART_HOST_ISR_VECT+0x54>)
    2238:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    223a:	4b0e      	ldr	r3, [pc, #56]	; (2274 <USART_HOST_ISR_VECT+0x58>)
    223c:	781b      	ldrb	r3, [r3, #0]
    223e:	7821      	ldrb	r1, [r4, #0]
    2240:	4a0d      	ldr	r2, [pc, #52]	; (2278 <USART_HOST_ISR_VECT+0x5c>)
    2242:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    2244:	2b9b      	cmp	r3, #155	; 0x9b
    2246:	d00a      	beq.n	225e <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    2248:	3301      	adds	r3, #1
    224a:	4a0a      	ldr	r2, [pc, #40]	; (2274 <USART_HOST_ISR_VECT+0x58>)
    224c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    224e:	2201      	movs	r2, #1
    2250:	4b07      	ldr	r3, [pc, #28]	; (2270 <USART_HOST_ISR_VECT+0x54>)
    2252:	701a      	strb	r2, [r3, #0]
    2254:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2258:	b662      	cpsie	i
}
    225a:	b002      	add	sp, #8
    225c:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    225e:	2200      	movs	r2, #0
    2260:	4b04      	ldr	r3, [pc, #16]	; (2274 <USART_HOST_ISR_VECT+0x58>)
    2262:	701a      	strb	r2, [r3, #0]
    2264:	e7f3      	b.n	224e <USART_HOST_ISR_VECT+0x32>
    2266:	46c0      	nop			; (mov r8, r8)
    2268:	200000cc 	.word	0x200000cc
    226c:	000011ad 	.word	0x000011ad
    2270:	20000008 	.word	0x20000008
    2274:	2000019d 	.word	0x2000019d
    2278:	20000100 	.word	0x20000100

0000227c <sio2host_init>:
{
    227c:	b5f0      	push	{r4, r5, r6, r7, lr}
    227e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2280:	2380      	movs	r3, #128	; 0x80
    2282:	05db      	lsls	r3, r3, #23
    2284:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2286:	2300      	movs	r3, #0
    2288:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    228a:	22ff      	movs	r2, #255	; 0xff
    228c:	4669      	mov	r1, sp
    228e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2290:	2200      	movs	r2, #0
    2292:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2294:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2296:	2401      	movs	r4, #1
    2298:	2124      	movs	r1, #36	; 0x24
    229a:	4668      	mov	r0, sp
    229c:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    229e:	3101      	adds	r1, #1
    22a0:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    22a2:	3101      	adds	r1, #1
    22a4:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    22a6:	3101      	adds	r1, #1
    22a8:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    22aa:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    22ac:	3105      	adds	r1, #5
    22ae:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    22b0:	3101      	adds	r1, #1
    22b2:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    22b4:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    22b6:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    22b8:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    22ba:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    22bc:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    22be:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    22c0:	2313      	movs	r3, #19
    22c2:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    22c4:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    22c6:	2380      	movs	r3, #128	; 0x80
    22c8:	035b      	lsls	r3, r3, #13
    22ca:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    22cc:	4b2f      	ldr	r3, [pc, #188]	; (238c <sio2host_init+0x110>)
    22ce:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    22d0:	4b2f      	ldr	r3, [pc, #188]	; (2390 <sio2host_init+0x114>)
    22d2:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    22d4:	2301      	movs	r3, #1
    22d6:	425b      	negs	r3, r3
    22d8:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    22da:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    22dc:	2396      	movs	r3, #150	; 0x96
    22de:	021b      	lsls	r3, r3, #8
    22e0:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    22e2:	4d2c      	ldr	r5, [pc, #176]	; (2394 <sio2host_init+0x118>)
    22e4:	4b2c      	ldr	r3, [pc, #176]	; (2398 <sio2host_init+0x11c>)
    22e6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    22e8:	4a2c      	ldr	r2, [pc, #176]	; (239c <sio2host_init+0x120>)
    22ea:	4b2d      	ldr	r3, [pc, #180]	; (23a0 <sio2host_init+0x124>)
    22ec:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    22ee:	4a2d      	ldr	r2, [pc, #180]	; (23a4 <sio2host_init+0x128>)
    22f0:	4b2d      	ldr	r3, [pc, #180]	; (23a8 <sio2host_init+0x12c>)
    22f2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    22f4:	466a      	mov	r2, sp
    22f6:	492d      	ldr	r1, [pc, #180]	; (23ac <sio2host_init+0x130>)
    22f8:	0028      	movs	r0, r5
    22fa:	4b2d      	ldr	r3, [pc, #180]	; (23b0 <sio2host_init+0x134>)
    22fc:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    22fe:	4f2d      	ldr	r7, [pc, #180]	; (23b4 <sio2host_init+0x138>)
    2300:	683b      	ldr	r3, [r7, #0]
    2302:	6898      	ldr	r0, [r3, #8]
    2304:	2100      	movs	r1, #0
    2306:	4e2c      	ldr	r6, [pc, #176]	; (23b8 <sio2host_init+0x13c>)
    2308:	47b0      	blx	r6
	setbuf(stdin, NULL);
    230a:	683b      	ldr	r3, [r7, #0]
    230c:	6858      	ldr	r0, [r3, #4]
    230e:	2100      	movs	r1, #0
    2310:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2312:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2314:	0030      	movs	r0, r6
    2316:	4b29      	ldr	r3, [pc, #164]	; (23bc <sio2host_init+0x140>)
    2318:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    231a:	231f      	movs	r3, #31
    231c:	4018      	ands	r0, r3
    231e:	4084      	lsls	r4, r0
    2320:	4b27      	ldr	r3, [pc, #156]	; (23c0 <sio2host_init+0x144>)
    2322:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2324:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2326:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2328:	2b00      	cmp	r3, #0
    232a:	d1fc      	bne.n	2326 <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    232c:	6833      	ldr	r3, [r6, #0]
    232e:	2202      	movs	r2, #2
    2330:	4313      	orrs	r3, r2
    2332:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2334:	4b17      	ldr	r3, [pc, #92]	; (2394 <sio2host_init+0x118>)
    2336:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2338:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    233a:	2a00      	cmp	r2, #0
    233c:	d1fc      	bne.n	2338 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    233e:	6859      	ldr	r1, [r3, #4]
    2340:	2280      	movs	r2, #128	; 0x80
    2342:	0252      	lsls	r2, r2, #9
    2344:	430a      	orrs	r2, r1
    2346:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    2348:	2101      	movs	r1, #1
    234a:	4a12      	ldr	r2, [pc, #72]	; (2394 <sio2host_init+0x118>)
    234c:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    234e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2350:	2a00      	cmp	r2, #0
    2352:	d1fc      	bne.n	234e <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    2354:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2356:	2a00      	cmp	r2, #0
    2358:	d1fc      	bne.n	2354 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    235a:	6859      	ldr	r1, [r3, #4]
    235c:	2280      	movs	r2, #128	; 0x80
    235e:	0292      	lsls	r2, r2, #10
    2360:	430a      	orrs	r2, r1
    2362:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    2364:	2101      	movs	r1, #1
    2366:	4a0b      	ldr	r2, [pc, #44]	; (2394 <sio2host_init+0x118>)
    2368:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    236a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    236c:	2a00      	cmp	r2, #0
    236e:	d1fc      	bne.n	236a <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    2370:	4914      	ldr	r1, [pc, #80]	; (23c4 <sio2host_init+0x148>)
    2372:	2000      	movs	r0, #0
    2374:	4b14      	ldr	r3, [pc, #80]	; (23c8 <sio2host_init+0x14c>)
    2376:	4798      	blx	r3
    2378:	2204      	movs	r2, #4
    237a:	4b0c      	ldr	r3, [pc, #48]	; (23ac <sio2host_init+0x130>)
    237c:	759a      	strb	r2, [r3, #22]
    237e:	32fd      	adds	r2, #253	; 0xfd
    2380:	32ff      	adds	r2, #255	; 0xff
    2382:	4b0f      	ldr	r3, [pc, #60]	; (23c0 <sio2host_init+0x144>)
    2384:	601a      	str	r2, [r3, #0]
}
    2386:	b011      	add	sp, #68	; 0x44
    2388:	bdf0      	pop	{r4, r5, r6, r7, pc}
    238a:	46c0      	nop			; (mov r8, r8)
    238c:	00040003 	.word	0x00040003
    2390:	00050003 	.word	0x00050003
    2394:	200000cc 	.word	0x200000cc
    2398:	20000e88 	.word	0x20000e88
    239c:	00002205 	.word	0x00002205
    23a0:	20000e84 	.word	0x20000e84
    23a4:	000021d9 	.word	0x000021d9
    23a8:	20000e80 	.word	0x20000e80
    23ac:	42000800 	.word	0x42000800
    23b0:	00000d0d 	.word	0x00000d0d
    23b4:	2000000c 	.word	0x2000000c
    23b8:	000057f9 	.word	0x000057f9
    23bc:	000008c5 	.word	0x000008c5
    23c0:	e000e100 	.word	0xe000e100
    23c4:	0000221d 	.word	0x0000221d
    23c8:	00000889 	.word	0x00000889

000023cc <sio2host_tx>:
{
    23cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ce:	b083      	sub	sp, #12
    23d0:	0006      	movs	r6, r0
    23d2:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    23d4:	466b      	mov	r3, sp
    23d6:	889d      	ldrh	r5, [r3, #4]
    23d8:	4c05      	ldr	r4, [pc, #20]	; (23f0 <sio2host_tx+0x24>)
    23da:	4f06      	ldr	r7, [pc, #24]	; (23f4 <sio2host_tx+0x28>)
    23dc:	002a      	movs	r2, r5
    23de:	0031      	movs	r1, r6
    23e0:	0020      	movs	r0, r4
    23e2:	47b8      	blx	r7
	} while (status != STATUS_OK);
    23e4:	2800      	cmp	r0, #0
    23e6:	d1f9      	bne.n	23dc <sio2host_tx+0x10>
}
    23e8:	9801      	ldr	r0, [sp, #4]
    23ea:	b003      	add	sp, #12
    23ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	200000cc 	.word	0x200000cc
    23f4:	000010ed 	.word	0x000010ed

000023f8 <sio2host_rx>:
{
    23f8:	b570      	push	{r4, r5, r6, lr}
    23fa:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    23fc:	4b1f      	ldr	r3, [pc, #124]	; (247c <sio2host_rx+0x84>)
    23fe:	781c      	ldrb	r4, [r3, #0]
    2400:	4b1f      	ldr	r3, [pc, #124]	; (2480 <sio2host_rx+0x88>)
    2402:	781b      	ldrb	r3, [r3, #0]
    2404:	429c      	cmp	r4, r3
    2406:	d31e      	bcc.n	2446 <sio2host_rx+0x4e>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    2408:	1ae3      	subs	r3, r4, r3
    240a:	481e      	ldr	r0, [pc, #120]	; (2484 <sio2host_rx+0x8c>)
    240c:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    240e:	4b1d      	ldr	r3, [pc, #116]	; (2484 <sio2host_rx+0x8c>)
    2410:	7818      	ldrb	r0, [r3, #0]
    2412:	2800      	cmp	r0, #0
    2414:	d030      	beq.n	2478 <sio2host_rx+0x80>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    2416:	289b      	cmp	r0, #155	; 0x9b
    2418:	d91b      	bls.n	2452 <sio2host_rx+0x5a>
		serial_rx_buf_head = serial_rx_buf_tail;
    241a:	4b19      	ldr	r3, [pc, #100]	; (2480 <sio2host_rx+0x88>)
    241c:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    241e:	209c      	movs	r0, #156	; 0x9c
    2420:	4b18      	ldr	r3, [pc, #96]	; (2484 <sio2host_rx+0x8c>)
    2422:	7018      	strb	r0, [r3, #0]
    2424:	1c08      	adds	r0, r1, #0
    2426:	299c      	cmp	r1, #156	; 0x9c
    2428:	d901      	bls.n	242e <sio2host_rx+0x36>
    242a:	4b17      	ldr	r3, [pc, #92]	; (2488 <sio2host_rx+0x90>)
    242c:	7818      	ldrb	r0, [r3, #0]
    242e:	b2c0      	uxtb	r0, r0
	while (max_length > 0) {
    2430:	2800      	cmp	r0, #0
    2432:	d021      	beq.n	2478 <sio2host_rx+0x80>
    2434:	4b12      	ldr	r3, [pc, #72]	; (2480 <sio2host_rx+0x88>)
    2436:	781b      	ldrb	r3, [r3, #0]
    2438:	1e44      	subs	r4, r0, #1
    243a:	b2e4      	uxtb	r4, r4
    243c:	3401      	adds	r4, #1
    243e:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    2440:	4d12      	ldr	r5, [pc, #72]	; (248c <sio2host_rx+0x94>)
			serial_rx_buf_head = 0;
    2442:	2600      	movs	r6, #0
    2444:	e00e      	b.n	2464 <sio2host_rx+0x6c>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    2446:	0020      	movs	r0, r4
    2448:	3864      	subs	r0, #100	; 0x64
    244a:	1ac3      	subs	r3, r0, r3
    244c:	480d      	ldr	r0, [pc, #52]	; (2484 <sio2host_rx+0x8c>)
    244e:	7003      	strb	r3, [r0, #0]
    2450:	e7dd      	b.n	240e <sio2host_rx+0x16>
    2452:	1c03      	adds	r3, r0, #0
    2454:	4288      	cmp	r0, r1
    2456:	d900      	bls.n	245a <sio2host_rx+0x62>
    2458:	1c0b      	adds	r3, r1, #0
    245a:	b2d8      	uxtb	r0, r3
    245c:	e7e8      	b.n	2430 <sio2host_rx+0x38>
			serial_rx_buf_head = 0;
    245e:	0033      	movs	r3, r6
	while (max_length > 0) {
    2460:	4294      	cmp	r4, r2
    2462:	d007      	beq.n	2474 <sio2host_rx+0x7c>
		*data = serial_rx_buf[serial_rx_buf_head];
    2464:	5ce9      	ldrb	r1, [r5, r3]
    2466:	7011      	strb	r1, [r2, #0]
		data++;
    2468:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    246a:	2b9b      	cmp	r3, #155	; 0x9b
    246c:	d0f7      	beq.n	245e <sio2host_rx+0x66>
			serial_rx_buf_head++;
    246e:	3301      	adds	r3, #1
    2470:	b2db      	uxtb	r3, r3
    2472:	e7f5      	b.n	2460 <sio2host_rx+0x68>
    2474:	4a02      	ldr	r2, [pc, #8]	; (2480 <sio2host_rx+0x88>)
    2476:	7013      	strb	r3, [r2, #0]
}
    2478:	bd70      	pop	{r4, r5, r6, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	2000019d 	.word	0x2000019d
    2480:	2000019c 	.word	0x2000019c
    2484:	2000019e 	.word	0x2000019e
    2488:	00006020 	.word	0x00006020
    248c:	20000100 	.word	0x20000100

00002490 <sio2host_putchar>:
{
    2490:	b500      	push	{lr}
    2492:	b083      	sub	sp, #12
    2494:	466b      	mov	r3, sp
    2496:	71d8      	strb	r0, [r3, #7]
    2498:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    249a:	2101      	movs	r1, #1
    249c:	0018      	movs	r0, r3
    249e:	4b02      	ldr	r3, [pc, #8]	; (24a8 <sio2host_putchar+0x18>)
    24a0:	4798      	blx	r3
}
    24a2:	b003      	add	sp, #12
    24a4:	bd00      	pop	{pc}
    24a6:	46c0      	nop			; (mov r8, r8)
    24a8:	000023cd 	.word	0x000023cd

000024ac <sio2host_getchar_nowait>:
{
    24ac:	b500      	push	{lr}
    24ae:	b083      	sub	sp, #12
	int back = sio2host_rx(&c, 1);
    24b0:	2101      	movs	r1, #1
    24b2:	466b      	mov	r3, sp
    24b4:	1dd8      	adds	r0, r3, #7
    24b6:	4b05      	ldr	r3, [pc, #20]	; (24cc <sio2host_getchar_nowait+0x20>)
    24b8:	4798      	blx	r3
	if (back >= 1) {
    24ba:	2800      	cmp	r0, #0
    24bc:	dd03      	ble.n	24c6 <sio2host_getchar_nowait+0x1a>
		return c;
    24be:	466b      	mov	r3, sp
    24c0:	79d8      	ldrb	r0, [r3, #7]
}
    24c2:	b003      	add	sp, #12
    24c4:	bd00      	pop	{pc}
		return (-1);
    24c6:	2001      	movs	r0, #1
    24c8:	4240      	negs	r0, r0
    24ca:	e7fa      	b.n	24c2 <sio2host_getchar_nowait+0x16>
    24cc:	000023f9 	.word	0x000023f9

000024d0 <appCmdIdentifyPeriodTimerHandler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    24d0:	2280      	movs	r2, #128	; 0x80
    24d2:	0312      	lsls	r2, r2, #12
    24d4:	4b01      	ldr	r3, [pc, #4]	; (24dc <appCmdIdentifyPeriodTimerHandler+0xc>)
    24d6:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0)
	LED_Toggle(LED_IDENTIFY);
#endif
	(void)timer;
}
    24d8:	4770      	bx	lr
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	41004400 	.word	0x41004400

000024e0 <appCmdHandle>:
{
    24e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24e2:	0004      	movs	r4, r0
		return false;
    24e4:	2000      	movs	r0, #0
	if (size < sizeof(AppCmdHeader_t)) {
    24e6:	2900      	cmp	r1, #0
    24e8:	d002      	beq.n	24f0 <appCmdHandle+0x10>
	if (APP_COMMAND_ID_IDENTIFY == header->id) {
    24ea:	7823      	ldrb	r3, [r4, #0]
    24ec:	2b10      	cmp	r3, #16
    24ee:	d000      	beq.n	24f2 <appCmdHandle+0x12>
}
    24f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (sizeof(AppCmdIdentify_t) != size) {
    24f2:	2905      	cmp	r1, #5
    24f4:	d1fc      	bne.n	24f0 <appCmdHandle+0x10>
		SYS_TimerStop(&appCmdIdentifyDurationTimer);
    24f6:	4e13      	ldr	r6, [pc, #76]	; (2544 <appCmdHandle+0x64>)
    24f8:	0030      	movs	r0, r6
    24fa:	4f13      	ldr	r7, [pc, #76]	; (2548 <appCmdHandle+0x68>)
    24fc:	47b8      	blx	r7
		SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    24fe:	4d13      	ldr	r5, [pc, #76]	; (254c <appCmdHandle+0x6c>)
    2500:	0028      	movs	r0, r5
    2502:	47b8      	blx	r7
		appCmdIdentifyDurationTimer.interval = req->duration;
    2504:	7862      	ldrb	r2, [r4, #1]
    2506:	78a3      	ldrb	r3, [r4, #2]
    2508:	021b      	lsls	r3, r3, #8
    250a:	4313      	orrs	r3, r2
    250c:	60b3      	str	r3, [r6, #8]
		appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    250e:	2300      	movs	r3, #0
    2510:	7333      	strb	r3, [r6, #12]
			= appCmdIdentifyDurationTimerHandler;
    2512:	4b0f      	ldr	r3, [pc, #60]	; (2550 <appCmdHandle+0x70>)
    2514:	6133      	str	r3, [r6, #16]
		SYS_TimerStart(&appCmdIdentifyDurationTimer);
    2516:	0030      	movs	r0, r6
    2518:	4e0e      	ldr	r6, [pc, #56]	; (2554 <appCmdHandle+0x74>)
    251a:	47b0      	blx	r6
		appCmdIdentifyPeriodTimer.interval = req->period;
    251c:	78e2      	ldrb	r2, [r4, #3]
    251e:	7923      	ldrb	r3, [r4, #4]
    2520:	021b      	lsls	r3, r3, #8
    2522:	4313      	orrs	r3, r2
    2524:	60ab      	str	r3, [r5, #8]
		appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    2526:	2301      	movs	r3, #1
    2528:	732b      	strb	r3, [r5, #12]
			= appCmdIdentifyPeriodTimerHandler;
    252a:	4b0b      	ldr	r3, [pc, #44]	; (2558 <appCmdHandle+0x78>)
    252c:	612b      	str	r3, [r5, #16]
		SYS_TimerStart(&appCmdIdentifyPeriodTimer);
    252e:	0028      	movs	r0, r5
    2530:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    2532:	2280      	movs	r2, #128	; 0x80
    2534:	0312      	lsls	r2, r2, #12
    2536:	4b09      	ldr	r3, [pc, #36]	; (255c <appCmdHandle+0x7c>)
    2538:	615a      	str	r2, [r3, #20]
		NWK_Lock();
    253a:	4b09      	ldr	r3, [pc, #36]	; (2560 <appCmdHandle+0x80>)
    253c:	4798      	blx	r3
		return true;
    253e:	2001      	movs	r0, #1
    2540:	e7d6      	b.n	24f0 <appCmdHandle+0x10>
    2542:	46c0      	nop			; (mov r8, r8)
    2544:	200001c0 	.word	0x200001c0
    2548:	00004515 	.word	0x00004515
    254c:	200001d4 	.word	0x200001d4
    2550:	000025f5 	.word	0x000025f5
    2554:	00004581 	.word	0x00004581
    2558:	000024d1 	.word	0x000024d1
    255c:	41004400 	.word	0x41004400
    2560:	00002b01 	.word	0x00002b01

00002564 <appCmdDataInd>:
{
    2564:	b510      	push	{r4, lr}
	return appCmdHandle(ind->data, ind->size);
    2566:	7b01      	ldrb	r1, [r0, #12]
    2568:	6880      	ldr	r0, [r0, #8]
    256a:	4b01      	ldr	r3, [pc, #4]	; (2570 <appCmdDataInd+0xc>)
    256c:	4798      	blx	r3
}
    256e:	bd10      	pop	{r4, pc}
    2570:	000024e1 	.word	0x000024e1

00002574 <appCmdCheckPendingTable>:
{
    2574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (appCmdInProgress) {
    2576:	4b12      	ldr	r3, [pc, #72]	; (25c0 <appCmdCheckPendingTable+0x4c>)
    2578:	681b      	ldr	r3, [r3, #0]
    257a:	2b00      	cmp	r3, #0
    257c:	d000      	beq.n	2580 <appCmdCheckPendingTable+0xc>
}
    257e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2580:	4c10      	ldr	r4, [pc, #64]	; (25c4 <appCmdCheckPendingTable+0x50>)
	if (appCmdInProgress) {
    2582:	2500      	movs	r5, #0
	appCmdInProgress = entry;
    2584:	4f0e      	ldr	r7, [pc, #56]	; (25c0 <appCmdCheckPendingTable+0x4c>)
	appCmdDataReq.dstAddr = entry->addr;
    2586:	4e10      	ldr	r6, [pc, #64]	; (25c8 <appCmdCheckPendingTable+0x54>)
    2588:	e003      	b.n	2592 <appCmdCheckPendingTable+0x1e>
    258a:	3501      	adds	r5, #1
    258c:	3409      	adds	r4, #9
	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    258e:	2d05      	cmp	r5, #5
    2590:	d0f5      	beq.n	257e <appCmdCheckPendingTable+0xa>
		if (appCmdPendingTable[i].ready) {
    2592:	78e3      	ldrb	r3, [r4, #3]
    2594:	2b00      	cmp	r3, #0
    2596:	d0f8      	beq.n	258a <appCmdCheckPendingTable+0x16>
	appCmdInProgress = entry;
    2598:	603c      	str	r4, [r7, #0]
	appCmdDataReq.dstAddr = entry->addr;
    259a:	00eb      	lsls	r3, r5, #3
    259c:	195b      	adds	r3, r3, r5
    259e:	4a09      	ldr	r2, [pc, #36]	; (25c4 <appCmdCheckPendingTable+0x50>)
    25a0:	5c9a      	ldrb	r2, [r3, r2]
    25a2:	4908      	ldr	r1, [pc, #32]	; (25c4 <appCmdCheckPendingTable+0x50>)
    25a4:	468c      	mov	ip, r1
    25a6:	4463      	add	r3, ip
    25a8:	785b      	ldrb	r3, [r3, #1]
    25aa:	021b      	lsls	r3, r3, #8
    25ac:	4313      	orrs	r3, r2
    25ae:	8173      	strh	r3, [r6, #10]
	appCmdDataReq.data = &entry->payload;
    25b0:	1d23      	adds	r3, r4, #4
    25b2:	6133      	str	r3, [r6, #16]
	appCmdDataReq.size = entry->size;
    25b4:	78a3      	ldrb	r3, [r4, #2]
    25b6:	7533      	strb	r3, [r6, #20]
	NWK_DataReq(&appCmdDataReq);
    25b8:	0030      	movs	r0, r6
    25ba:	4b04      	ldr	r3, [pc, #16]	; (25cc <appCmdCheckPendingTable+0x58>)
    25bc:	4798      	blx	r3
    25be:	e7e4      	b.n	258a <appCmdCheckPendingTable+0x16>
    25c0:	200001e8 	.word	0x200001e8
    25c4:	200001ec 	.word	0x200001ec
    25c8:	200001a0 	.word	0x200001a0
    25cc:	00002b8d 	.word	0x00002b8d

000025d0 <appCmdDataConf>:
{
    25d0:	b510      	push	{r4, lr}
	appCmdInProgress->addr = APP_CMD_INVALID_ADDR;
    25d2:	4a06      	ldr	r2, [pc, #24]	; (25ec <appCmdDataConf+0x1c>)
    25d4:	6813      	ldr	r3, [r2, #0]
    25d6:	2101      	movs	r1, #1
    25d8:	4249      	negs	r1, r1
    25da:	7019      	strb	r1, [r3, #0]
    25dc:	7059      	strb	r1, [r3, #1]
	appCmdInProgress->ready = false;
    25de:	2100      	movs	r1, #0
    25e0:	70d9      	strb	r1, [r3, #3]
	appCmdInProgress = NULL;
    25e2:	6011      	str	r1, [r2, #0]
	appCmdCheckPendingTable();
    25e4:	4b02      	ldr	r3, [pc, #8]	; (25f0 <appCmdDataConf+0x20>)
    25e6:	4798      	blx	r3
}
    25e8:	bd10      	pop	{r4, pc}
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	200001e8 	.word	0x200001e8
    25f0:	00002575 	.word	0x00002575

000025f4 <appCmdIdentifyDurationTimerHandler>:
{
    25f4:	b510      	push	{r4, lr}
	NWK_Unlock();
    25f6:	4b05      	ldr	r3, [pc, #20]	; (260c <appCmdIdentifyDurationTimerHandler+0x18>)
    25f8:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    25fa:	2280      	movs	r2, #128	; 0x80
    25fc:	0312      	lsls	r2, r2, #12
    25fe:	4b04      	ldr	r3, [pc, #16]	; (2610 <appCmdIdentifyDurationTimerHandler+0x1c>)
    2600:	619a      	str	r2, [r3, #24]
	SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    2602:	4804      	ldr	r0, [pc, #16]	; (2614 <appCmdIdentifyDurationTimerHandler+0x20>)
    2604:	4b04      	ldr	r3, [pc, #16]	; (2618 <appCmdIdentifyDurationTimerHandler+0x24>)
    2606:	4798      	blx	r3
}
    2608:	bd10      	pop	{r4, pc}
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	00002b11 	.word	0x00002b11
    2610:	41004400 	.word	0x41004400
    2614:	200001d4 	.word	0x200001d4
    2618:	00004515 	.word	0x00004515

0000261c <APP_CommandsInit>:
{
    261c:	b570      	push	{r4, r5, r6, lr}
	appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    261e:	4b14      	ldr	r3, [pc, #80]	; (2670 <APP_CommandsInit+0x54>)
    2620:	2200      	movs	r2, #0
    2622:	731a      	strb	r2, [r3, #12]
		= appCmdIdentifyDurationTimerHandler;
    2624:	4913      	ldr	r1, [pc, #76]	; (2674 <APP_CommandsInit+0x58>)
    2626:	6119      	str	r1, [r3, #16]
	appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    2628:	4b13      	ldr	r3, [pc, #76]	; (2678 <APP_CommandsInit+0x5c>)
    262a:	2101      	movs	r1, #1
    262c:	7319      	strb	r1, [r3, #12]
	appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
    262e:	4913      	ldr	r1, [pc, #76]	; (267c <APP_CommandsInit+0x60>)
    2630:	6119      	str	r1, [r3, #16]
	appCmdInProgress = NULL;
    2632:	4b13      	ldr	r3, [pc, #76]	; (2680 <APP_CommandsInit+0x64>)
    2634:	601a      	str	r2, [r3, #0]
	appCmdDataReq.dstAddr = 0;
    2636:	4b13      	ldr	r3, [pc, #76]	; (2684 <APP_CommandsInit+0x68>)
    2638:	815a      	strh	r2, [r3, #10]
	appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
    263a:	3202      	adds	r2, #2
    263c:	731a      	strb	r2, [r3, #12]
	appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
    263e:	735a      	strb	r2, [r3, #13]
	appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
    2640:	739a      	strb	r2, [r3, #14]
	appCmdDataReq.confirm = appCmdDataConf;
    2642:	4a11      	ldr	r2, [pc, #68]	; (2688 <APP_CommandsInit+0x6c>)
    2644:	619a      	str	r2, [r3, #24]
    2646:	4911      	ldr	r1, [pc, #68]	; (268c <APP_CommandsInit+0x70>)
    2648:	2200      	movs	r2, #0
		appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
    264a:	000c      	movs	r4, r1
    264c:	2001      	movs	r0, #1
    264e:	4240      	negs	r0, r0
		appCmdPendingTable[i].ready = false;
    2650:	2500      	movs	r5, #0
		appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
    2652:	00d3      	lsls	r3, r2, #3
    2654:	189b      	adds	r3, r3, r2
    2656:	5518      	strb	r0, [r3, r4]
    2658:	18e3      	adds	r3, r4, r3
    265a:	7058      	strb	r0, [r3, #1]
		appCmdPendingTable[i].ready = false;
    265c:	70cd      	strb	r5, [r1, #3]
    265e:	3201      	adds	r2, #1
    2660:	3109      	adds	r1, #9
	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    2662:	2a05      	cmp	r2, #5
    2664:	d1f5      	bne.n	2652 <APP_CommandsInit+0x36>
	NWK_OpenEndpoint(APP_CMD_ENDPOINT, appCmdDataInd);
    2666:	490a      	ldr	r1, [pc, #40]	; (2690 <APP_CommandsInit+0x74>)
    2668:	2002      	movs	r0, #2
    266a:	4b0a      	ldr	r3, [pc, #40]	; (2694 <APP_CommandsInit+0x78>)
    266c:	4798      	blx	r3
}
    266e:	bd70      	pop	{r4, r5, r6, pc}
    2670:	200001c0 	.word	0x200001c0
    2674:	000025f5 	.word	0x000025f5
    2678:	200001d4 	.word	0x200001d4
    267c:	000024d1 	.word	0x000024d1
    2680:	200001e8 	.word	0x200001e8
    2684:	200001a0 	.word	0x200001a0
    2688:	000025d1 	.word	0x000025d1
    268c:	200001ec 	.word	0x200001ec
    2690:	00002565 	.word	0x00002565
    2694:	00002af1 	.word	0x00002af1

00002698 <APP_CommandsPending>:
{
    2698:	b510      	push	{r4, lr}
		if (addr == appCmdPendingTable[i].addr) {
    269a:	4b14      	ldr	r3, [pc, #80]	; (26ec <APP_CommandsPending+0x54>)
    269c:	689b      	ldr	r3, [r3, #8]
    269e:	021b      	lsls	r3, r3, #8
    26a0:	0c1b      	lsrs	r3, r3, #16
    26a2:	4283      	cmp	r3, r0
    26a4:	d016      	beq.n	26d4 <APP_CommandsPending+0x3c>
    26a6:	4b11      	ldr	r3, [pc, #68]	; (26ec <APP_CommandsPending+0x54>)
    26a8:	8a5b      	ldrh	r3, [r3, #18]
    26aa:	4283      	cmp	r3, r0
    26ac:	d00e      	beq.n	26cc <APP_CommandsPending+0x34>
    26ae:	4a0f      	ldr	r2, [pc, #60]	; (26ec <APP_CommandsPending+0x54>)
    26b0:	7ed1      	ldrb	r1, [r2, #27]
    26b2:	7f13      	ldrb	r3, [r2, #28]
    26b4:	021b      	lsls	r3, r3, #8
    26b6:	430b      	orrs	r3, r1
    26b8:	4298      	cmp	r0, r3
    26ba:	d009      	beq.n	26d0 <APP_CommandsPending+0x38>
    26bc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
	return false;
    26be:	2300      	movs	r3, #0
		if (addr == appCmdPendingTable[i].addr) {
    26c0:	4282      	cmp	r2, r0
    26c2:	d001      	beq.n	26c8 <APP_CommandsPending+0x30>
}
    26c4:	0018      	movs	r0, r3
    26c6:	bd10      	pop	{r4, pc}
		if (addr == appCmdPendingTable[i].addr) {
    26c8:	2204      	movs	r2, #4
    26ca:	e004      	b.n	26d6 <APP_CommandsPending+0x3e>
    26cc:	2202      	movs	r2, #2
    26ce:	e002      	b.n	26d6 <APP_CommandsPending+0x3e>
    26d0:	2203      	movs	r2, #3
    26d2:	e000      	b.n	26d6 <APP_CommandsPending+0x3e>
    26d4:	2201      	movs	r2, #1
			appCmdPendingTable[i].ready = true;
    26d6:	00d3      	lsls	r3, r2, #3
    26d8:	189a      	adds	r2, r3, r2
    26da:	4b04      	ldr	r3, [pc, #16]	; (26ec <APP_CommandsPending+0x54>)
    26dc:	189b      	adds	r3, r3, r2
    26de:	2201      	movs	r2, #1
    26e0:	70da      	strb	r2, [r3, #3]
			appCmdCheckPendingTable();
    26e2:	4b03      	ldr	r3, [pc, #12]	; (26f0 <APP_CommandsPending+0x58>)
    26e4:	4798      	blx	r3
			return true;
    26e6:	2301      	movs	r3, #1
    26e8:	e7ec      	b.n	26c4 <APP_CommandsPending+0x2c>
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	200001ec 	.word	0x200001ec
    26f0:	00002575 	.word	0x00002575

000026f4 <appSendData>:
#endif

/*****************************************************************************
*****************************************************************************/
static void appSendData(void)
{
    26f4:	b570      	push	{r4, r5, r6, lr}
#ifdef NWK_ENABLE_ROUTING
	appMsg.parentShortAddr = NWK_RouteNextHop(0, 0);
    26f6:	2100      	movs	r1, #0
    26f8:	2000      	movs	r0, #0
    26fa:	4b24      	ldr	r3, [pc, #144]	; (278c <appSendData+0x98>)
    26fc:	4798      	blx	r3
    26fe:	4b24      	ldr	r3, [pc, #144]	; (2790 <appSendData+0x9c>)
    2700:	75d8      	strb	r0, [r3, #23]
    2702:	0a00      	lsrs	r0, r0, #8
    2704:	7618      	strb	r0, [r3, #24]
	appMsg.parentShortAddr = 0;
#endif

#if APP_COORDINATOR
	//appUartSendMessage((uint8_t *)&appMsg, sizeof(appMsg));
	if(isSerialCommand)
    2706:	4b23      	ldr	r3, [pc, #140]	; (2794 <appSendData+0xa0>)
    2708:	781b      	ldrb	r3, [r3, #0]
    270a:	2b00      	cmp	r3, #0
    270c:	d106      	bne.n	271c <appSendData+0x28>
			#endif
			NWK_DataReq(&appNwkDataReq);
			isSerialCommand = false;
			appState = APP_STATE_WAIT_CONF;
	}
	SYS_TimerStart(&appDataSendingTimer);
    270e:	4822      	ldr	r0, [pc, #136]	; (2798 <appSendData+0xa4>)
    2710:	4b22      	ldr	r3, [pc, #136]	; (279c <appSendData+0xa8>)
    2712:	4798      	blx	r3
	appState = APP_STATE_WAIT_SEND_TIMER;
    2714:	2204      	movs	r2, #4
    2716:	4b22      	ldr	r3, [pc, #136]	; (27a0 <appSendData+0xac>)
    2718:	701a      	strb	r2, [r3, #0]
#endif
	NWK_DataReq(&appNwkDataReq);

	appState = APP_STATE_WAIT_CONF;
#endif
}
    271a:	bd70      	pop	{r4, r5, r6, pc}
			appMsg.command.addr1 = dat[0]-48;
    271c:	4921      	ldr	r1, [pc, #132]	; (27a4 <appSendData+0xb0>)
    271e:	780a      	ldrb	r2, [r1, #0]
    2720:	4b1b      	ldr	r3, [pc, #108]	; (2790 <appSendData+0x9c>)
    2722:	0010      	movs	r0, r2
    2724:	3830      	subs	r0, #48	; 0x30
    2726:	76d8      	strb	r0, [r3, #27]
			appMsg.command.addr2 = dat[1]-48;
    2728:	784c      	ldrb	r4, [r1, #1]
    272a:	0020      	movs	r0, r4
    272c:	3830      	subs	r0, #48	; 0x30
    272e:	7718      	strb	r0, [r3, #28]
			appMsg.command.type = dat[2]-48;
    2730:	7888      	ldrb	r0, [r1, #2]
    2732:	3830      	subs	r0, #48	; 0x30
    2734:	7758      	strb	r0, [r3, #29]
			appMsg.command.pin0 = dat[3]-48;
    2736:	78c8      	ldrb	r0, [r1, #3]
    2738:	3830      	subs	r0, #48	; 0x30
    273a:	7798      	strb	r0, [r3, #30]
			appMsg.command.pin1 = dat[4]-48;
    273c:	7908      	ldrb	r0, [r1, #4]
    273e:	3830      	subs	r0, #48	; 0x30
    2740:	77d8      	strb	r0, [r3, #31]
			appMsg.command.pin2 = dat[5]-48;
    2742:	7948      	ldrb	r0, [r1, #5]
    2744:	3830      	subs	r0, #48	; 0x30
    2746:	2520      	movs	r5, #32
    2748:	5558      	strb	r0, [r3, r5]
			appMsg.command.pin3 = dat[6]-48;
    274a:	7989      	ldrb	r1, [r1, #6]
    274c:	3930      	subs	r1, #48	; 0x30
    274e:	2021      	movs	r0, #33	; 0x21
    2750:	5419      	strb	r1, [r3, r0]
			appNwkDataReq.dstAddr = ((uint16_t)(dat[0]-48)<<8) + (uint16_t)(dat[1]-48);
    2752:	4815      	ldr	r0, [pc, #84]	; (27a8 <appSendData+0xb4>)
    2754:	3a30      	subs	r2, #48	; 0x30
    2756:	0212      	lsls	r2, r2, #8
    2758:	3c30      	subs	r4, #48	; 0x30
    275a:	1912      	adds	r2, r2, r4
    275c:	8142      	strh	r2, [r0, #10]
			appNwkDataReq.dstEndpoint = APP_ENDPOINT;
    275e:	2201      	movs	r2, #1
    2760:	7302      	strb	r2, [r0, #12]
			appNwkDataReq.srcEndpoint = APP_ENDPOINT;
    2762:	7342      	strb	r2, [r0, #13]
			appNwkDataReq.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY;
    2764:	3202      	adds	r2, #2
    2766:	7382      	strb	r2, [r0, #14]
			appNwkDataReq.data = (uint8_t *)&appMsg;
    2768:	6103      	str	r3, [r0, #16]
			appNwkDataReq.size = sizeof(appMsg);
    276a:	232f      	movs	r3, #47	; 0x2f
    276c:	7503      	strb	r3, [r0, #20]
			appNwkDataReq.confirm = appDataConf;
    276e:	4b0f      	ldr	r3, [pc, #60]	; (27ac <appSendData+0xb8>)
    2770:	6183      	str	r3, [r0, #24]
		port_base->OUTCLR.reg = pin_mask;
    2772:	2280      	movs	r2, #128	; 0x80
    2774:	0312      	lsls	r2, r2, #12
    2776:	4b0e      	ldr	r3, [pc, #56]	; (27b0 <appSendData+0xbc>)
    2778:	615a      	str	r2, [r3, #20]
			NWK_DataReq(&appNwkDataReq);
    277a:	4b0e      	ldr	r3, [pc, #56]	; (27b4 <appSendData+0xc0>)
    277c:	4798      	blx	r3
			isSerialCommand = false;
    277e:	2200      	movs	r2, #0
    2780:	4b04      	ldr	r3, [pc, #16]	; (2794 <appSendData+0xa0>)
    2782:	701a      	strb	r2, [r3, #0]
			appState = APP_STATE_WAIT_CONF;
    2784:	3202      	adds	r2, #2
    2786:	4b06      	ldr	r3, [pc, #24]	; (27a0 <appSendData+0xac>)
    2788:	701a      	strb	r2, [r3, #0]
    278a:	e7c0      	b.n	270e <appSendData+0x1a>
    278c:	00002ecd 	.word	0x00002ecd
    2790:	20000244 	.word	0x20000244
    2794:	200002b0 	.word	0x200002b0
    2798:	20000230 	.word	0x20000230
    279c:	00004581 	.word	0x00004581
    27a0:	200002a8 	.word	0x200002a8
    27a4:	20000e8c 	.word	0x20000e8c
    27a8:	20000288 	.word	0x20000288
    27ac:	000027e1 	.word	0x000027e1
    27b0:	41004400 	.word	0x41004400
    27b4:	00002b8d 	.word	0x00002b8d

000027b8 <appDataSendingTimerHandler>:
{
    27b8:	b510      	push	{r4, lr}
	if (APP_STATE_WAIT_SEND_TIMER == appState) {
    27ba:	4b06      	ldr	r3, [pc, #24]	; (27d4 <appDataSendingTimerHandler+0x1c>)
    27bc:	781b      	ldrb	r3, [r3, #0]
    27be:	2b04      	cmp	r3, #4
    27c0:	d003      	beq.n	27ca <appDataSendingTimerHandler+0x12>
		SYS_TimerStart(&appDataSendingTimer);
    27c2:	4805      	ldr	r0, [pc, #20]	; (27d8 <appDataSendingTimerHandler+0x20>)
    27c4:	4b05      	ldr	r3, [pc, #20]	; (27dc <appDataSendingTimerHandler+0x24>)
    27c6:	4798      	blx	r3
}
    27c8:	bd10      	pop	{r4, pc}
		appState = APP_STATE_IDLE;
    27ca:	2209      	movs	r2, #9
    27cc:	4b01      	ldr	r3, [pc, #4]	; (27d4 <appDataSendingTimerHandler+0x1c>)
    27ce:	701a      	strb	r2, [r3, #0]
    27d0:	e7fa      	b.n	27c8 <appDataSendingTimerHandler+0x10>
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	200002a8 	.word	0x200002a8
    27d8:	20000230 	.word	0x20000230
    27dc:	00004581 	.word	0x00004581

000027e0 <appDataConf>:
{
    27e0:	b510      	push	{r4, lr}
    27e2:	0004      	movs	r4, r0
		port_base->OUTSET.reg = pin_mask;
    27e4:	2280      	movs	r2, #128	; 0x80
    27e6:	0312      	lsls	r2, r2, #12
    27e8:	4b19      	ldr	r3, [pc, #100]	; (2850 <appDataConf+0x70>)
    27ea:	619a      	str	r2, [r3, #24]
	if (NWK_SUCCESS_STATUS == req->status) {
    27ec:	7f03      	ldrb	r3, [r0, #28]
    27ee:	2b00      	cmp	r3, #0
    27f0:	d113      	bne.n	281a <appDataConf+0x3a>
		if (!appNetworkStatus) {
    27f2:	4b18      	ldr	r3, [pc, #96]	; (2854 <appDataConf+0x74>)
    27f4:	781b      	ldrb	r3, [r3, #0]
    27f6:	2b00      	cmp	r3, #0
    27f8:	d006      	beq.n	2808 <appDataConf+0x28>
	if (APP_COMMAND_PENDING == req->control) {
    27fa:	7f63      	ldrb	r3, [r4, #29]
    27fc:	2b01      	cmp	r3, #1
    27fe:	d01b      	beq.n	2838 <appDataConf+0x58>
		appState = APP_STATE_SENDING_DONE;
    2800:	2203      	movs	r2, #3
    2802:	4b15      	ldr	r3, [pc, #84]	; (2858 <appDataConf+0x78>)
    2804:	701a      	strb	r2, [r3, #0]
}
    2806:	bd10      	pop	{r4, pc}
		port_base->OUTCLR.reg = pin_mask;
    2808:	4b11      	ldr	r3, [pc, #68]	; (2850 <appDataConf+0x70>)
    280a:	615a      	str	r2, [r3, #20]
			SYS_TimerStop(&appNetworkStatusTimer);
    280c:	4813      	ldr	r0, [pc, #76]	; (285c <appDataConf+0x7c>)
    280e:	4b14      	ldr	r3, [pc, #80]	; (2860 <appDataConf+0x80>)
    2810:	4798      	blx	r3
			appNetworkStatus = true;
    2812:	2201      	movs	r2, #1
    2814:	4b0f      	ldr	r3, [pc, #60]	; (2854 <appDataConf+0x74>)
    2816:	701a      	strb	r2, [r3, #0]
    2818:	e7ef      	b.n	27fa <appDataConf+0x1a>
		if (appNetworkStatus) {
    281a:	4b0e      	ldr	r3, [pc, #56]	; (2854 <appDataConf+0x74>)
    281c:	781b      	ldrb	r3, [r3, #0]
    281e:	2b00      	cmp	r3, #0
    2820:	d0eb      	beq.n	27fa <appDataConf+0x1a>
		port_base->OUTSET.reg = pin_mask;
    2822:	2280      	movs	r2, #128	; 0x80
    2824:	0312      	lsls	r2, r2, #12
    2826:	4b0a      	ldr	r3, [pc, #40]	; (2850 <appDataConf+0x70>)
    2828:	619a      	str	r2, [r3, #24]
			SYS_TimerStart(&appNetworkStatusTimer);
    282a:	480c      	ldr	r0, [pc, #48]	; (285c <appDataConf+0x7c>)
    282c:	4b0d      	ldr	r3, [pc, #52]	; (2864 <appDataConf+0x84>)
    282e:	4798      	blx	r3
			appNetworkStatus = false;
    2830:	2200      	movs	r2, #0
    2832:	4b08      	ldr	r3, [pc, #32]	; (2854 <appDataConf+0x74>)
    2834:	701a      	strb	r2, [r3, #0]
    2836:	e7e0      	b.n	27fa <appDataConf+0x1a>
		SYS_TimerStart(&appCommandWaitTimer);
    2838:	480b      	ldr	r0, [pc, #44]	; (2868 <appDataConf+0x88>)
    283a:	4b0a      	ldr	r3, [pc, #40]	; (2864 <appDataConf+0x84>)
    283c:	4798      	blx	r3
	port_base->OUTTGL.reg = pin_mask;
    283e:	2280      	movs	r2, #128	; 0x80
    2840:	0312      	lsls	r2, r2, #12
    2842:	4b03      	ldr	r3, [pc, #12]	; (2850 <appDataConf+0x70>)
    2844:	61da      	str	r2, [r3, #28]
		appState = APP_STATE_WAIT_COMMAND_TIMER;
    2846:	2205      	movs	r2, #5
    2848:	4b03      	ldr	r3, [pc, #12]	; (2858 <appDataConf+0x78>)
    284a:	701a      	strb	r2, [r3, #0]
    284c:	e7db      	b.n	2806 <appDataConf+0x26>
    284e:	46c0      	nop			; (mov r8, r8)
    2850:	41004400 	.word	0x41004400
    2854:	20000273 	.word	0x20000273
    2858:	200002a8 	.word	0x200002a8
    285c:	20000274 	.word	0x20000274
    2860:	00004515 	.word	0x00004515
    2864:	00004581 	.word	0x00004581
    2868:	2000021c 	.word	0x2000021c

0000286c <appDataInd>:
{
    286c:	b570      	push	{r4, r5, r6, lr}
    286e:	0006      	movs	r6, r0
	AppMessage_t *msg = (AppMessage_t *)ind->data;
    2870:	6884      	ldr	r4, [r0, #8]
    2872:	2280      	movs	r2, #128	; 0x80
    2874:	0312      	lsls	r2, r2, #12
    2876:	4b18      	ldr	r3, [pc, #96]	; (28d8 <appDataInd+0x6c>)
    2878:	61da      	str	r2, [r3, #28]
	msg->lqi = ind->lqi;
    287a:	7b43      	ldrb	r3, [r0, #13]
    287c:	7663      	strb	r3, [r4, #25]
	msg->rssi = ind->rssi;
    287e:	230e      	movs	r3, #14
    2880:	56c3      	ldrsb	r3, [r0, r3]
    2882:	76a3      	strb	r3, [r4, #26]
	sio2host_putchar(msg->command.addr1+48);
    2884:	7ee0      	ldrb	r0, [r4, #27]
    2886:	3030      	adds	r0, #48	; 0x30
    2888:	b2c0      	uxtb	r0, r0
    288a:	4d14      	ldr	r5, [pc, #80]	; (28dc <appDataInd+0x70>)
    288c:	47a8      	blx	r5
	sio2host_putchar(msg->command.addr2+48);
    288e:	7f20      	ldrb	r0, [r4, #28]
    2890:	3030      	adds	r0, #48	; 0x30
    2892:	b2c0      	uxtb	r0, r0
    2894:	47a8      	blx	r5
	sio2host_putchar(msg->command.type+48);
    2896:	7f60      	ldrb	r0, [r4, #29]
    2898:	3030      	adds	r0, #48	; 0x30
    289a:	b2c0      	uxtb	r0, r0
    289c:	47a8      	blx	r5
	sio2host_putchar(msg->command.pin0+48);
    289e:	7fa0      	ldrb	r0, [r4, #30]
    28a0:	3030      	adds	r0, #48	; 0x30
    28a2:	b2c0      	uxtb	r0, r0
    28a4:	47a8      	blx	r5
	sio2host_putchar(msg->command.pin1+48);
    28a6:	7fe0      	ldrb	r0, [r4, #31]
    28a8:	3030      	adds	r0, #48	; 0x30
    28aa:	b2c0      	uxtb	r0, r0
    28ac:	47a8      	blx	r5
	sio2host_putchar(msg->command.pin2+48);
    28ae:	2320      	movs	r3, #32
    28b0:	5ce0      	ldrb	r0, [r4, r3]
    28b2:	3030      	adds	r0, #48	; 0x30
    28b4:	b2c0      	uxtb	r0, r0
    28b6:	47a8      	blx	r5
	sio2host_putchar(msg->command.pin3+48);
    28b8:	2321      	movs	r3, #33	; 0x21
    28ba:	5ce0      	ldrb	r0, [r4, r3]
    28bc:	3030      	adds	r0, #48	; 0x30
    28be:	b2c0      	uxtb	r0, r0
    28c0:	47a8      	blx	r5
	if (APP_CommandsPending(ind->srcAddr)) {
    28c2:	8830      	ldrh	r0, [r6, #0]
    28c4:	4b06      	ldr	r3, [pc, #24]	; (28e0 <appDataInd+0x74>)
    28c6:	4798      	blx	r3
    28c8:	2800      	cmp	r0, #0
    28ca:	d101      	bne.n	28d0 <appDataInd+0x64>
}
    28cc:	2001      	movs	r0, #1
    28ce:	bd70      	pop	{r4, r5, r6, pc}
		NWK_SetAckControl(APP_COMMAND_PENDING);
    28d0:	2001      	movs	r0, #1
    28d2:	4b04      	ldr	r3, [pc, #16]	; (28e4 <appDataInd+0x78>)
    28d4:	4798      	blx	r3
    28d6:	e7f9      	b.n	28cc <appDataInd+0x60>
    28d8:	41004400 	.word	0x41004400
    28dc:	00002491 	.word	0x00002491
    28e0:	00002699 	.word	0x00002699
    28e4:	000036e5 	.word	0x000036e5

000028e8 <wsndemo_init>:

/**
 * Init function of the WSNDemo application
 */
void wsndemo_init(void)
{
    28e8:	b510      	push	{r4, lr}
	SYS_Init();
    28ea:	4b02      	ldr	r3, [pc, #8]	; (28f4 <wsndemo_init+0xc>)
    28ec:	4798      	blx	r3
#if APP_ENDDEVICE
	sm_init();
#endif
#if APP_COORDINATOR
	sio2host_init();
    28ee:	4b02      	ldr	r3, [pc, #8]	; (28f8 <wsndemo_init+0x10>)
    28f0:	4798      	blx	r3
#endif
}
    28f2:	bd10      	pop	{r4, pc}
    28f4:	0000440d 	.word	0x0000440d
    28f8:	0000227d 	.word	0x0000227d

000028fc <wsndemo_task>:
/**
 * Task of the WSNDemo application
 * This task should be called in a while(1)
 */
void wsndemo_task(void)
{
    28fc:	b570      	push	{r4, r5, r6, lr}
	SYS_TaskHandler();
    28fe:	4b41      	ldr	r3, [pc, #260]	; (2a04 <wsndemo_task+0x108>)
    2900:	4798      	blx	r3
	switch (appState) {
    2902:	4b41      	ldr	r3, [pc, #260]	; (2a08 <wsndemo_task+0x10c>)
    2904:	781b      	ldrb	r3, [r3, #0]
    2906:	2b01      	cmp	r3, #1
    2908:	d069      	beq.n	29de <wsndemo_task+0xe2>
    290a:	2b00      	cmp	r3, #0
    290c:	d014      	beq.n	2938 <wsndemo_task+0x3c>
    290e:	2b03      	cmp	r3, #3
    2910:	d068      	beq.n	29e4 <wsndemo_task+0xe8>
	int incoming = sio2host_getchar_nowait();
    2912:	4b3e      	ldr	r3, [pc, #248]	; (2a0c <wsndemo_task+0x110>)
    2914:	4798      	blx	r3
	while(incoming >= 0)
    2916:	2800      	cmp	r0, #0
    2918:	db09      	blt.n	292e <wsndemo_task+0x32>
		dat[byteCount] = (uint8_t) incoming;
    291a:	4c3d      	ldr	r4, [pc, #244]	; (2a10 <wsndemo_task+0x114>)
    291c:	4e3d      	ldr	r6, [pc, #244]	; (2a14 <wsndemo_task+0x118>)
		incoming = sio2host_getchar_nowait();
    291e:	4d3b      	ldr	r5, [pc, #236]	; (2a0c <wsndemo_task+0x110>)
		dat[byteCount] = (uint8_t) incoming;
    2920:	6823      	ldr	r3, [r4, #0]
    2922:	54f0      	strb	r0, [r6, r3]
		byteCount++;
    2924:	3301      	adds	r3, #1
    2926:	6023      	str	r3, [r4, #0]
		incoming = sio2host_getchar_nowait();
    2928:	47a8      	blx	r5
	while(incoming >= 0)
    292a:	2800      	cmp	r0, #0
    292c:	daf8      	bge.n	2920 <wsndemo_task+0x24>
	if(byteCount >= 7)
    292e:	4b38      	ldr	r3, [pc, #224]	; (2a10 <wsndemo_task+0x114>)
    2930:	681b      	ldr	r3, [r3, #0]
    2932:	2b06      	cmp	r3, #6
    2934:	dc5d      	bgt.n	29f2 <wsndemo_task+0xf6>
	APP_TaskHandler();
}
    2936:	bd70      	pop	{r4, r5, r6, pc}
	appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
    2938:	4b37      	ldr	r3, [pc, #220]	; (2a18 <wsndemo_task+0x11c>)
    293a:	2501      	movs	r5, #1
    293c:	701d      	strb	r5, [r3, #0]
	appMsg.nodeType             = APP_NODE_TYPE;
    293e:	2100      	movs	r1, #0
    2940:	7059      	strb	r1, [r3, #1]
	appMsg.extAddr              = APP_ADDR;
    2942:	2400      	movs	r4, #0
    2944:	2000      	movs	r0, #0
    2946:	8058      	strh	r0, [r3, #2]
    2948:	8098      	strh	r0, [r3, #4]
    294a:	80d8      	strh	r0, [r3, #6]
    294c:	8118      	strh	r0, [r3, #8]
	appMsg.shortAddr            = APP_ADDR;
    294e:	8159      	strh	r1, [r3, #10]
	appMsg.softVersion          = 0x01010100;
    2950:	4a32      	ldr	r2, [pc, #200]	; (2a1c <wsndemo_task+0x120>)
    2952:	60da      	str	r2, [r3, #12]
	appMsg.channelMask          = (1L << APP_CHANNEL);
    2954:	2280      	movs	r2, #128	; 0x80
    2956:	0212      	lsls	r2, r2, #8
    2958:	611a      	str	r2, [r3, #16]
	appMsg.panId                = APP_PANID;
    295a:	4e31      	ldr	r6, [pc, #196]	; (2a20 <wsndemo_task+0x124>)
    295c:	829e      	strh	r6, [r3, #20]
	appMsg.workingChannel       = APP_CHANNEL;
    295e:	220f      	movs	r2, #15
    2960:	759a      	strb	r2, [r3, #22]
	appMsg.parentShortAddr      = 0;
    2962:	75d9      	strb	r1, [r3, #23]
    2964:	7619      	strb	r1, [r3, #24]
	appMsg.lqi                  = 0;
    2966:	765c      	strb	r4, [r3, #25]
	appMsg.rssi                 = 0;
    2968:	769c      	strb	r4, [r3, #26]
	appMsg.command.pin0			= 0;
    296a:	779c      	strb	r4, [r3, #30]
	appMsg.command.pin1			= 0;
    296c:	77dc      	strb	r4, [r3, #31]
	appMsg.command.pin2			= 0;
    296e:	2220      	movs	r2, #32
    2970:	549c      	strb	r4, [r3, r2]
	appMsg.command.pin3			= 0;
    2972:	3121      	adds	r1, #33	; 0x21
    2974:	545c      	strb	r4, [r3, r1]
	appMsg.caption.type         = 32;
    2976:	3101      	adds	r1, #1
    2978:	545a      	strb	r2, [r3, r1]
	appMsg.caption.size         = APP_CAPTION_SIZE;
    297a:	3917      	subs	r1, #23
    297c:	3203      	adds	r2, #3
    297e:	5499      	strb	r1, [r3, r2]
	memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    2980:	4a28      	ldr	r2, [pc, #160]	; (2a24 <wsndemo_task+0x128>)
    2982:	3324      	adds	r3, #36	; 0x24
    2984:	ca03      	ldmia	r2!, {r0, r1}
    2986:	c303      	stmia	r3!, {r0, r1}
    2988:	8811      	ldrh	r1, [r2, #0]
    298a:	8019      	strh	r1, [r3, #0]
    298c:	7892      	ldrb	r2, [r2, #2]
    298e:	709a      	strb	r2, [r3, #2]
	NWK_SetAddr(APP_ADDR);
    2990:	2000      	movs	r0, #0
    2992:	4b25      	ldr	r3, [pc, #148]	; (2a28 <wsndemo_task+0x12c>)
    2994:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    2996:	0030      	movs	r0, r6
    2998:	4b24      	ldr	r3, [pc, #144]	; (2a2c <wsndemo_task+0x130>)
    299a:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    299c:	200f      	movs	r0, #15
    299e:	4b24      	ldr	r3, [pc, #144]	; (2a30 <wsndemo_task+0x134>)
    29a0:	4798      	blx	r3
	PHY_SetRxState(true);
    29a2:	2001      	movs	r0, #1
    29a4:	4b23      	ldr	r3, [pc, #140]	; (2a34 <wsndemo_task+0x138>)
    29a6:	4798      	blx	r3
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    29a8:	4823      	ldr	r0, [pc, #140]	; (2a38 <wsndemo_task+0x13c>)
    29aa:	4b24      	ldr	r3, [pc, #144]	; (2a3c <wsndemo_task+0x140>)
    29ac:	4798      	blx	r3
	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    29ae:	4924      	ldr	r1, [pc, #144]	; (2a40 <wsndemo_task+0x144>)
    29b0:	2001      	movs	r0, #1
    29b2:	4b24      	ldr	r3, [pc, #144]	; (2a44 <wsndemo_task+0x148>)
    29b4:	4798      	blx	r3
	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    29b6:	4b24      	ldr	r3, [pc, #144]	; (2a48 <wsndemo_task+0x14c>)
    29b8:	22c8      	movs	r2, #200	; 0xc8
    29ba:	0052      	lsls	r2, r2, #1
    29bc:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    29be:	731c      	strb	r4, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    29c0:	4a22      	ldr	r2, [pc, #136]	; (2a4c <wsndemo_task+0x150>)
    29c2:	611a      	str	r2, [r3, #16]
		port_base->OUTCLR.reg = pin_mask;
    29c4:	2280      	movs	r2, #128	; 0x80
    29c6:	0312      	lsls	r2, r2, #12
    29c8:	4b21      	ldr	r3, [pc, #132]	; (2a50 <wsndemo_task+0x154>)
    29ca:	615a      	str	r2, [r3, #20]
	srand(PHY_RandomReq());
    29cc:	4b21      	ldr	r3, [pc, #132]	; (2a54 <wsndemo_task+0x158>)
    29ce:	4798      	blx	r3
    29d0:	4b21      	ldr	r3, [pc, #132]	; (2a58 <wsndemo_task+0x15c>)
    29d2:	4798      	blx	r3
	APP_CommandsInit();
    29d4:	4b21      	ldr	r3, [pc, #132]	; (2a5c <wsndemo_task+0x160>)
    29d6:	4798      	blx	r3
	appState = APP_STATE_SEND;
    29d8:	4b0b      	ldr	r3, [pc, #44]	; (2a08 <wsndemo_task+0x10c>)
    29da:	701d      	strb	r5, [r3, #0]
    29dc:	e799      	b.n	2912 <wsndemo_task+0x16>
		appSendData();
    29de:	4b20      	ldr	r3, [pc, #128]	; (2a60 <wsndemo_task+0x164>)
    29e0:	4798      	blx	r3
    29e2:	e796      	b.n	2912 <wsndemo_task+0x16>
		SYS_TimerStart(&appDataSendingTimer);
    29e4:	4818      	ldr	r0, [pc, #96]	; (2a48 <wsndemo_task+0x14c>)
    29e6:	4b1f      	ldr	r3, [pc, #124]	; (2a64 <wsndemo_task+0x168>)
    29e8:	4798      	blx	r3
		appState = APP_STATE_WAIT_SEND_TIMER;
    29ea:	2204      	movs	r2, #4
    29ec:	4b06      	ldr	r3, [pc, #24]	; (2a08 <wsndemo_task+0x10c>)
    29ee:	701a      	strb	r2, [r3, #0]
    29f0:	e78f      	b.n	2912 <wsndemo_task+0x16>
		byteCount = 0;
    29f2:	2200      	movs	r2, #0
    29f4:	4b06      	ldr	r3, [pc, #24]	; (2a10 <wsndemo_task+0x114>)
    29f6:	601a      	str	r2, [r3, #0]
	isSerialCommand = true;
    29f8:	3201      	adds	r2, #1
    29fa:	4b1b      	ldr	r3, [pc, #108]	; (2a68 <wsndemo_task+0x16c>)
    29fc:	701a      	strb	r2, [r3, #0]
	appSendData();
    29fe:	4b18      	ldr	r3, [pc, #96]	; (2a60 <wsndemo_task+0x164>)
    2a00:	4798      	blx	r3
}
    2a02:	e798      	b.n	2936 <wsndemo_task+0x3a>
    2a04:	00004431 	.word	0x00004431
    2a08:	200002a8 	.word	0x200002a8
    2a0c:	000024ad 	.word	0x000024ad
    2a10:	200002ac 	.word	0x200002ac
    2a14:	20000e8c 	.word	0x20000e8c
    2a18:	20000244 	.word	0x20000244
    2a1c:	01010100 	.word	0x01010100
    2a20:	00001234 	.word	0x00001234
    2a24:	00006024 	.word	0x00006024
    2a28:	00002ac9 	.word	0x00002ac9
    2a2c:	00002add 	.word	0x00002add
    2a30:	00004219 	.word	0x00004219
    2a34:	00004205 	.word	0x00004205
    2a38:	00006030 	.word	0x00006030
    2a3c:	00003b11 	.word	0x00003b11
    2a40:	0000286d 	.word	0x0000286d
    2a44:	00002af1 	.word	0x00002af1
    2a48:	20000230 	.word	0x20000230
    2a4c:	000027b9 	.word	0x000027b9
    2a50:	41004400 	.word	0x41004400
    2a54:	000042d5 	.word	0x000042d5
    2a58:	00005725 	.word	0x00005725
    2a5c:	0000261d 	.word	0x0000261d
    2a60:	000026f5 	.word	0x000026f5
    2a64:	00004581 	.word	0x00004581
    2a68:	200002b0 	.word	0x200002b0

00002a6c <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2a6c:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    2a6e:	4a0e      	ldr	r2, [pc, #56]	; (2aa8 <NWK_Init+0x3c>)
    2a70:	2300      	movs	r3, #0
    2a72:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    2a74:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    2a76:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    2a78:	2158      	movs	r1, #88	; 0x58
    2a7a:	5253      	strh	r3, [r2, r1]
    2a7c:	0013      	movs	r3, r2
    2a7e:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    2a80:	2100      	movs	r1, #0
    2a82:	6099      	str	r1, [r3, #8]
    2a84:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    2a86:	4293      	cmp	r3, r2
    2a88:	d1fb      	bne.n	2a82 <NWK_Init+0x16>
	}

	nwkTxInit();
    2a8a:	4b08      	ldr	r3, [pc, #32]	; (2aac <NWK_Init+0x40>)
    2a8c:	4798      	blx	r3
	nwkRxInit();
    2a8e:	4b08      	ldr	r3, [pc, #32]	; (2ab0 <NWK_Init+0x44>)
    2a90:	4798      	blx	r3
	nwkFrameInit();
    2a92:	4b08      	ldr	r3, [pc, #32]	; (2ab4 <NWK_Init+0x48>)
    2a94:	4798      	blx	r3
	nwkDataReqInit();
    2a96:	4b08      	ldr	r3, [pc, #32]	; (2ab8 <NWK_Init+0x4c>)
    2a98:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    2a9a:	4b08      	ldr	r3, [pc, #32]	; (2abc <NWK_Init+0x50>)
    2a9c:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    2a9e:	4b08      	ldr	r3, [pc, #32]	; (2ac0 <NWK_Init+0x54>)
    2aa0:	4798      	blx	r3
#ifdef NWK_ENABLE_MULTICAST
	nwkGroupInit();
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
    2aa2:	4b08      	ldr	r3, [pc, #32]	; (2ac4 <NWK_Init+0x58>)
    2aa4:	4798      	blx	r3
#endif
}
    2aa6:	bd10      	pop	{r4, pc}
    2aa8:	20000e94 	.word	0x20000e94
    2aac:	00003e35 	.word	0x00003e35
    2ab0:	00003655 	.word	0x00003655
    2ab4:	00002cf9 	.word	0x00002cf9
    2ab8:	00002b81 	.word	0x00002b81
    2abc:	00002dfd 	.word	0x00002dfd
    2ac0:	00003afd 	.word	0x00003afd
    2ac4:	00003381 	.word	0x00003381

00002ac8 <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    2ac8:	b510      	push	{r4, lr}
	nwkIb.addr = addr;
    2aca:	4b02      	ldr	r3, [pc, #8]	; (2ad4 <NWK_SetAddr+0xc>)
    2acc:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    2ace:	4b02      	ldr	r3, [pc, #8]	; (2ad8 <NWK_SetAddr+0x10>)
    2ad0:	4798      	blx	r3
}
    2ad2:	bd10      	pop	{r4, pc}
    2ad4:	20000e94 	.word	0x20000e94
    2ad8:	0000425d 	.word	0x0000425d

00002adc <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    2adc:	b510      	push	{r4, lr}
	nwkIb.panId = panId;
    2ade:	4b02      	ldr	r3, [pc, #8]	; (2ae8 <NWK_SetPanId+0xc>)
    2ae0:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    2ae2:	4b02      	ldr	r3, [pc, #8]	; (2aec <NWK_SetPanId+0x10>)
    2ae4:	4798      	blx	r3
}
    2ae6:	bd10      	pop	{r4, pc}
    2ae8:	20000e94 	.word	0x20000e94
    2aec:	0000423d 	.word	0x0000423d

00002af0 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    2af0:	3002      	adds	r0, #2
    2af2:	0080      	lsls	r0, r0, #2
    2af4:	4b01      	ldr	r3, [pc, #4]	; (2afc <NWK_OpenEndpoint+0xc>)
    2af6:	50c1      	str	r1, [r0, r3]
}
    2af8:	4770      	bx	lr
    2afa:	46c0      	nop			; (mov r8, r8)
    2afc:	20000e94 	.word	0x20000e94

00002b00 <NWK_Lock>:
/*************************************************************************//**
*  @brief Increases the lock counter and sets a busy state
*****************************************************************************/
void NWK_Lock(void)
{
	nwkIb.lock++;
    2b00:	4902      	ldr	r1, [pc, #8]	; (2b0c <NWK_Lock+0xc>)
    2b02:	2258      	movs	r2, #88	; 0x58
    2b04:	5a8b      	ldrh	r3, [r1, r2]
    2b06:	3301      	adds	r3, #1
    2b08:	528b      	strh	r3, [r1, r2]
}
    2b0a:	4770      	bx	lr
    2b0c:	20000e94 	.word	0x20000e94

00002b10 <NWK_Unlock>:
/*************************************************************************//**
*  @brief Decreases the lock counter and sets a free state if counter reaches 0
*****************************************************************************/
void NWK_Unlock(void)
{
	nwkIb.lock--;
    2b10:	4902      	ldr	r1, [pc, #8]	; (2b1c <NWK_Unlock+0xc>)
    2b12:	2258      	movs	r2, #88	; 0x58
    2b14:	5a8b      	ldrh	r3, [r1, r2]
    2b16:	3b01      	subs	r3, #1
    2b18:	528b      	strh	r3, [r1, r2]
}
    2b1a:	4770      	bx	lr
    2b1c:	20000e94 	.word	0x20000e94

00002b20 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    2b20:	b510      	push	{r4, lr}
	nwkRxTaskHandler();
    2b22:	4b04      	ldr	r3, [pc, #16]	; (2b34 <NWK_TaskHandler+0x14>)
    2b24:	4798      	blx	r3
	nwkTxTaskHandler();
    2b26:	4b04      	ldr	r3, [pc, #16]	; (2b38 <NWK_TaskHandler+0x18>)
    2b28:	4798      	blx	r3
	nwkDataReqTaskHandler();
    2b2a:	4b04      	ldr	r3, [pc, #16]	; (2b3c <NWK_TaskHandler+0x1c>)
    2b2c:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    2b2e:	4b04      	ldr	r3, [pc, #16]	; (2b40 <NWK_TaskHandler+0x20>)
    2b30:	4798      	blx	r3
#endif
}
    2b32:	bd10      	pop	{r4, pc}
    2b34:	00003701 	.word	0x00003701
    2b38:	00004039 	.word	0x00004039
    2b3c:	00002bc1 	.word	0x00002bc1
    2b40:	00003bf5 	.word	0x00003bf5

00002b44 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    2b44:	b510      	push	{r4, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2b46:	4b0c      	ldr	r3, [pc, #48]	; (2b78 <nwkDataReqTxConf+0x34>)
    2b48:	681b      	ldr	r3, [r3, #0]
    2b4a:	2b00      	cmp	r3, #0
    2b4c:	d010      	beq.n	2b70 <nwkDataReqTxConf+0x2c>
		if (req->frame == frame) {
    2b4e:	685a      	ldr	r2, [r3, #4]
    2b50:	4290      	cmp	r0, r2
    2b52:	d005      	beq.n	2b60 <nwkDataReqTxConf+0x1c>
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2b54:	681b      	ldr	r3, [r3, #0]
    2b56:	2b00      	cmp	r3, #0
    2b58:	d00a      	beq.n	2b70 <nwkDataReqTxConf+0x2c>
		if (req->frame == frame) {
    2b5a:	685a      	ldr	r2, [r3, #4]
    2b5c:	4282      	cmp	r2, r0
    2b5e:	d1f9      	bne.n	2b54 <nwkDataReqTxConf+0x10>
			req->status = frame->tx.status;
    2b60:	2285      	movs	r2, #133	; 0x85
    2b62:	5c82      	ldrb	r2, [r0, r2]
    2b64:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    2b66:	2288      	movs	r2, #136	; 0x88
    2b68:	5c82      	ldrb	r2, [r0, r2]
    2b6a:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2b6c:	2202      	movs	r2, #2
    2b6e:	721a      	strb	r2, [r3, #8]
			break;
		}
	}

	nwkFrameFree(frame);
    2b70:	4b02      	ldr	r3, [pc, #8]	; (2b7c <nwkDataReqTxConf+0x38>)
    2b72:	4798      	blx	r3
}
    2b74:	bd10      	pop	{r4, pc}
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	200002b4 	.word	0x200002b4
    2b7c:	00002d85 	.word	0x00002d85

00002b80 <nwkDataReqInit>:
	nwkDataReqQueue = NULL;
    2b80:	2200      	movs	r2, #0
    2b82:	4b01      	ldr	r3, [pc, #4]	; (2b88 <nwkDataReqInit+0x8>)
    2b84:	601a      	str	r2, [r3, #0]
}
    2b86:	4770      	bx	lr
    2b88:	200002b4 	.word	0x200002b4

00002b8c <NWK_DataReq>:
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    2b8c:	2300      	movs	r3, #0
    2b8e:	7203      	strb	r3, [r0, #8]
	req->status = NWK_SUCCESS_STATUS;
    2b90:	7703      	strb	r3, [r0, #28]
	req->frame = NULL;
    2b92:	6043      	str	r3, [r0, #4]
	nwkIb.lock++;
    2b94:	4908      	ldr	r1, [pc, #32]	; (2bb8 <NWK_DataReq+0x2c>)
    2b96:	2258      	movs	r2, #88	; 0x58
    2b98:	5a8b      	ldrh	r3, [r1, r2]
    2b9a:	3301      	adds	r3, #1
    2b9c:	528b      	strh	r3, [r1, r2]
	if (NULL == nwkDataReqQueue) {
    2b9e:	4b07      	ldr	r3, [pc, #28]	; (2bbc <NWK_DataReq+0x30>)
    2ba0:	681b      	ldr	r3, [r3, #0]
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d003      	beq.n	2bae <NWK_DataReq+0x22>
		req->next = nwkDataReqQueue;
    2ba6:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2ba8:	4b04      	ldr	r3, [pc, #16]	; (2bbc <NWK_DataReq+0x30>)
    2baa:	6018      	str	r0, [r3, #0]
}
    2bac:	4770      	bx	lr
		req->next = NULL;
    2bae:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2bb0:	4b02      	ldr	r3, [pc, #8]	; (2bbc <NWK_DataReq+0x30>)
    2bb2:	6018      	str	r0, [r3, #0]
    2bb4:	e7fa      	b.n	2bac <NWK_DataReq+0x20>
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	20000e94 	.word	0x20000e94
    2bbc:	200002b4 	.word	0x200002b4

00002bc0 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    2bc0:	b570      	push	{r4, r5, r6, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2bc2:	4b47      	ldr	r3, [pc, #284]	; (2ce0 <nwkDataReqTaskHandler+0x120>)
    2bc4:	681a      	ldr	r2, [r3, #0]
    2bc6:	2a00      	cmp	r2, #0
    2bc8:	d100      	bne.n	2bcc <nwkDataReqTaskHandler+0xc>
    2bca:	e088      	b.n	2cde <nwkDataReqTaskHandler+0x11e>
    2bcc:	0014      	movs	r4, r2
		switch (req->state) {
    2bce:	7a23      	ldrb	r3, [r4, #8]
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d005      	beq.n	2be0 <nwkDataReqTaskHandler+0x20>
    2bd4:	2b02      	cmp	r3, #2
    2bd6:	d06e      	beq.n	2cb6 <nwkDataReqTaskHandler+0xf6>
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2bd8:	6824      	ldr	r4, [r4, #0]
    2bda:	2c00      	cmp	r4, #0
    2bdc:	d1f7      	bne.n	2bce <nwkDataReqTaskHandler+0xe>
    2bde:	e07e      	b.n	2cde <nwkDataReqTaskHandler+0x11e>
	if (NULL == (frame = nwkFrameAlloc())) {
    2be0:	4b40      	ldr	r3, [pc, #256]	; (2ce4 <nwkDataReqTaskHandler+0x124>)
    2be2:	4798      	blx	r3
    2be4:	1e05      	subs	r5, r0, #0
    2be6:	d062      	beq.n	2cae <nwkDataReqTaskHandler+0xee>
	req->frame = frame;
    2be8:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    2bea:	2001      	movs	r0, #1
    2bec:	7220      	strb	r0, [r4, #8]
	frame->tx.confirm = nwkDataReqTxConf;
    2bee:	4b3e      	ldr	r3, [pc, #248]	; (2ce8 <nwkDataReqTaskHandler+0x128>)
    2bf0:	2289      	movs	r2, #137	; 0x89
    2bf2:	54ab      	strb	r3, [r5, r2]
    2bf4:	0a19      	lsrs	r1, r3, #8
    2bf6:	002a      	movs	r2, r5
    2bf8:	3289      	adds	r2, #137	; 0x89
    2bfa:	7051      	strb	r1, [r2, #1]
    2bfc:	0c19      	lsrs	r1, r3, #16
    2bfe:	7091      	strb	r1, [r2, #2]
    2c00:	0e1b      	lsrs	r3, r3, #24
    2c02:	70d3      	strb	r3, [r2, #3]
			: 0;
    2c04:	7ba2      	ldrb	r2, [r4, #14]
    2c06:	0892      	lsrs	r2, r2, #2
    2c08:	2301      	movs	r3, #1
    2c0a:	401a      	ands	r2, r3
	frame->tx.control = req->options &
    2c0c:	2188      	movs	r1, #136	; 0x88
    2c0e:	546a      	strb	r2, [r5, r1]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    2c10:	7ba1      	ldrb	r1, [r4, #14]
	frame->header.nwkFcf.ackRequest = req->options &
    2c12:	4019      	ands	r1, r3
    2c14:	7aea      	ldrb	r2, [r5, #11]
    2c16:	4382      	bics	r2, r0
    2c18:	430a      	orrs	r2, r1
    2c1a:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    2c1c:	7ba2      	ldrb	r2, [r4, #14]
    2c1e:	08d2      	lsrs	r2, r2, #3
	frame->header.nwkFcf.linkLocal = req->options &
    2c20:	401a      	ands	r2, r3
    2c22:	0092      	lsls	r2, r2, #2
    2c24:	7ae9      	ldrb	r1, [r5, #11]
    2c26:	3003      	adds	r0, #3
    2c28:	4381      	bics	r1, r0
    2c2a:	430a      	orrs	r2, r1
    2c2c:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    2c2e:	7ba2      	ldrb	r2, [r4, #14]
    2c30:	0852      	lsrs	r2, r2, #1
	frame->header.nwkFcf.security = req->options &
    2c32:	4013      	ands	r3, r2
    2c34:	005b      	lsls	r3, r3, #1
    2c36:	7aea      	ldrb	r2, [r5, #11]
    2c38:	2102      	movs	r1, #2
    2c3a:	438a      	bics	r2, r1
    2c3c:	4313      	orrs	r3, r2
    2c3e:	72eb      	strb	r3, [r5, #11]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    2c40:	4a2a      	ldr	r2, [pc, #168]	; (2cec <nwkDataReqTaskHandler+0x12c>)
    2c42:	7913      	ldrb	r3, [r2, #4]
    2c44:	3301      	adds	r3, #1
    2c46:	b2db      	uxtb	r3, r3
    2c48:	7113      	strb	r3, [r2, #4]
    2c4a:	732b      	strb	r3, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    2c4c:	7813      	ldrb	r3, [r2, #0]
    2c4e:	736b      	strb	r3, [r5, #13]
    2c50:	7853      	ldrb	r3, [r2, #1]
    2c52:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    2c54:	8963      	ldrh	r3, [r4, #10]
    2c56:	7aa2      	ldrb	r2, [r4, #10]
    2c58:	73ea      	strb	r2, [r5, #15]
    2c5a:	0a1b      	lsrs	r3, r3, #8
    2c5c:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    2c5e:	7b61      	ldrb	r1, [r4, #13]
    2c60:	230f      	movs	r3, #15
    2c62:	4019      	ands	r1, r3
    2c64:	7c6a      	ldrb	r2, [r5, #17]
    2c66:	300b      	adds	r0, #11
    2c68:	4382      	bics	r2, r0
    2c6a:	430a      	orrs	r2, r1
    2c6c:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    2c6e:	7b22      	ldrb	r2, [r4, #12]
    2c70:	0112      	lsls	r2, r2, #4
    2c72:	7c69      	ldrb	r1, [r5, #17]
    2c74:	400b      	ands	r3, r1
    2c76:	4313      	orrs	r3, r2
    2c78:	746b      	strb	r3, [r5, #17]
	memcpy(frame->payload, req->data, req->size);
    2c7a:	2381      	movs	r3, #129	; 0x81
    2c7c:	5ce8      	ldrb	r0, [r5, r3]
    2c7e:	3301      	adds	r3, #1
    2c80:	5ceb      	ldrb	r3, [r5, r3]
    2c82:	021b      	lsls	r3, r3, #8
    2c84:	4303      	orrs	r3, r0
    2c86:	2283      	movs	r2, #131	; 0x83
    2c88:	5ca8      	ldrb	r0, [r5, r2]
    2c8a:	0400      	lsls	r0, r0, #16
    2c8c:	4303      	orrs	r3, r0
    2c8e:	3201      	adds	r2, #1
    2c90:	5ca8      	ldrb	r0, [r5, r2]
    2c92:	0600      	lsls	r0, r0, #24
    2c94:	4318      	orrs	r0, r3
    2c96:	7d22      	ldrb	r2, [r4, #20]
    2c98:	6921      	ldr	r1, [r4, #16]
    2c9a:	4b15      	ldr	r3, [pc, #84]	; (2cf0 <nwkDataReqTaskHandler+0x130>)
    2c9c:	4798      	blx	r3
	frame->size += req->size;
    2c9e:	786b      	ldrb	r3, [r5, #1]
    2ca0:	7d22      	ldrb	r2, [r4, #20]
    2ca2:	189b      	adds	r3, r3, r2
    2ca4:	706b      	strb	r3, [r5, #1]
	nwkTxFrame(frame);
    2ca6:	0028      	movs	r0, r5
    2ca8:	4b12      	ldr	r3, [pc, #72]	; (2cf4 <nwkDataReqTaskHandler+0x134>)
    2caa:	4798      	blx	r3
    2cac:	e017      	b.n	2cde <nwkDataReqTaskHandler+0x11e>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2cae:	2302      	movs	r3, #2
    2cb0:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    2cb2:	7723      	strb	r3, [r4, #28]
    2cb4:	e013      	b.n	2cde <nwkDataReqTaskHandler+0x11e>
	if (nwkDataReqQueue == req) {
    2cb6:	42a2      	cmp	r2, r4
    2cb8:	d104      	bne.n	2cc4 <nwkDataReqTaskHandler+0x104>
		nwkDataReqQueue = nwkDataReqQueue->next;
    2cba:	4b09      	ldr	r3, [pc, #36]	; (2ce0 <nwkDataReqTaskHandler+0x120>)
    2cbc:	6822      	ldr	r2, [r4, #0]
    2cbe:	601a      	str	r2, [r3, #0]
    2cc0:	e005      	b.n	2cce <nwkDataReqTaskHandler+0x10e>
			prev = prev->next;
    2cc2:	001a      	movs	r2, r3
		while (prev->next != req) {
    2cc4:	6813      	ldr	r3, [r2, #0]
    2cc6:	429c      	cmp	r4, r3
    2cc8:	d1fb      	bne.n	2cc2 <nwkDataReqTaskHandler+0x102>
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    2cca:	6823      	ldr	r3, [r4, #0]
    2ccc:	6013      	str	r3, [r2, #0]
	nwkIb.lock--;
    2cce:	4907      	ldr	r1, [pc, #28]	; (2cec <nwkDataReqTaskHandler+0x12c>)
    2cd0:	2258      	movs	r2, #88	; 0x58
    2cd2:	5a8b      	ldrh	r3, [r1, r2]
    2cd4:	3b01      	subs	r3, #1
    2cd6:	528b      	strh	r3, [r1, r2]
	req->confirm(req);
    2cd8:	69a3      	ldr	r3, [r4, #24]
    2cda:	0020      	movs	r0, r4
    2cdc:	4798      	blx	r3

		default:
			break;
		}
	}
}
    2cde:	bd70      	pop	{r4, r5, r6, pc}
    2ce0:	200002b4 	.word	0x200002b4
    2ce4:	00002d15 	.word	0x00002d15
    2ce8:	00002b45 	.word	0x00002b45
    2cec:	20000e94 	.word	0x20000e94
    2cf0:	00005701 	.word	0x00005701
    2cf4:	00003e69 	.word	0x00003e69

00002cf8 <nwkFrameInit>:

/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    2cf8:	4b04      	ldr	r3, [pc, #16]	; (2d0c <nwkFrameInit+0x14>)
    2cfa:	4a05      	ldr	r2, [pc, #20]	; (2d10 <nwkFrameInit+0x18>)
    2cfc:	1899      	adds	r1, r3, r2
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    2cfe:	2200      	movs	r2, #0
    2d00:	701a      	strb	r2, [r3, #0]
    2d02:	338d      	adds	r3, #141	; 0x8d
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    2d04:	428b      	cmp	r3, r1
    2d06:	d1fb      	bne.n	2d00 <nwkFrameInit+0x8>
	}
}
    2d08:	4770      	bx	lr
    2d0a:	46c0      	nop			; (mov r8, r8)
    2d0c:	200002b8 	.word	0x200002b8
    2d10:	00000582 	.word	0x00000582

00002d14 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    2d14:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    2d16:	4b18      	ldr	r3, [pc, #96]	; (2d78 <nwkFrameAlloc+0x64>)
    2d18:	781b      	ldrb	r3, [r3, #0]
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	d00d      	beq.n	2d3a <nwkFrameAlloc+0x26>
    2d1e:	4a16      	ldr	r2, [pc, #88]	; (2d78 <nwkFrameAlloc+0x64>)
    2d20:	328d      	adds	r2, #141	; 0x8d
    2d22:	2301      	movs	r3, #1
    2d24:	0018      	movs	r0, r3
    2d26:	7811      	ldrb	r1, [r2, #0]
    2d28:	2900      	cmp	r1, #0
    2d2a:	d007      	beq.n	2d3c <nwkFrameAlloc+0x28>
    2d2c:	3301      	adds	r3, #1
    2d2e:	328d      	adds	r2, #141	; 0x8d
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    2d30:	2b0a      	cmp	r3, #10
    2d32:	d1f7      	bne.n	2d24 <nwkFrameAlloc+0x10>
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    2d34:	2500      	movs	r5, #0
}
    2d36:	0028      	movs	r0, r5
    2d38:	bd70      	pop	{r4, r5, r6, pc}
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    2d3a:	2000      	movs	r0, #0
    2d3c:	268d      	movs	r6, #141	; 0x8d
    2d3e:	4346      	muls	r6, r0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    2d40:	4c0d      	ldr	r4, [pc, #52]	; (2d78 <nwkFrameAlloc+0x64>)
    2d42:	19a5      	adds	r5, r4, r6
    2d44:	228d      	movs	r2, #141	; 0x8d
    2d46:	2100      	movs	r1, #0
    2d48:	0028      	movs	r0, r5
    2d4a:	4b0c      	ldr	r3, [pc, #48]	; (2d7c <nwkFrameAlloc+0x68>)
    2d4c:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    2d4e:	2310      	movs	r3, #16
    2d50:	706b      	strb	r3, [r5, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    2d52:	0030      	movs	r0, r6
    2d54:	3012      	adds	r0, #18
    2d56:	1820      	adds	r0, r4, r0
    2d58:	002b      	movs	r3, r5
    2d5a:	3381      	adds	r3, #129	; 0x81
    2d5c:	7018      	strb	r0, [r3, #0]
    2d5e:	0a02      	lsrs	r2, r0, #8
    2d60:	705a      	strb	r2, [r3, #1]
    2d62:	0c02      	lsrs	r2, r0, #16
    2d64:	709a      	strb	r2, [r3, #2]
    2d66:	0e00      	lsrs	r0, r0, #24
    2d68:	70d8      	strb	r0, [r3, #3]
			nwkIb.lock++;
    2d6a:	4905      	ldr	r1, [pc, #20]	; (2d80 <nwkFrameAlloc+0x6c>)
    2d6c:	2258      	movs	r2, #88	; 0x58
    2d6e:	5a8b      	ldrh	r3, [r1, r2]
    2d70:	3301      	adds	r3, #1
    2d72:	528b      	strh	r3, [r1, r2]
			return &nwkFrameFrames[i];
    2d74:	e7df      	b.n	2d36 <nwkFrameAlloc+0x22>
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	200002b8 	.word	0x200002b8
    2d7c:	00005713 	.word	0x00005713
    2d80:	20000e94 	.word	0x20000e94

00002d84 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    2d84:	2300      	movs	r3, #0
    2d86:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    2d88:	4902      	ldr	r1, [pc, #8]	; (2d94 <nwkFrameFree+0x10>)
    2d8a:	2258      	movs	r2, #88	; 0x58
    2d8c:	5a8b      	ldrh	r3, [r1, r2]
    2d8e:	3b01      	subs	r3, #1
    2d90:	528b      	strh	r3, [r1, r2]
}
    2d92:	4770      	bx	lr
    2d94:	20000e94 	.word	0x20000e94

00002d98 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2d98:	2800      	cmp	r0, #0
    2d9a:	d014      	beq.n	2dc6 <nwkFrameNext+0x2e>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2d9c:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2d9e:	4b0d      	ldr	r3, [pc, #52]	; (2dd4 <nwkFrameNext+0x3c>)
    2da0:	4a0d      	ldr	r2, [pc, #52]	; (2dd8 <nwkFrameNext+0x40>)
    2da2:	4694      	mov	ip, r2
    2da4:	4463      	add	r3, ip
    2da6:	4298      	cmp	r0, r3
    2da8:	d211      	bcs.n	2dce <nwkFrameNext+0x36>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2daa:	7803      	ldrb	r3, [r0, #0]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d10d      	bne.n	2dcc <nwkFrameNext+0x34>
	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2db0:	4a08      	ldr	r2, [pc, #32]	; (2dd4 <nwkFrameNext+0x3c>)
    2db2:	4b09      	ldr	r3, [pc, #36]	; (2dd8 <nwkFrameNext+0x40>)
    2db4:	469c      	mov	ip, r3
    2db6:	4462      	add	r2, ip
    2db8:	308d      	adds	r0, #141	; 0x8d
    2dba:	4290      	cmp	r0, r2
    2dbc:	d205      	bcs.n	2dca <nwkFrameNext+0x32>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2dbe:	7803      	ldrb	r3, [r0, #0]
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d0f9      	beq.n	2db8 <nwkFrameNext+0x20>
    2dc4:	e002      	b.n	2dcc <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
    2dc6:	4803      	ldr	r0, [pc, #12]	; (2dd4 <nwkFrameNext+0x3c>)
    2dc8:	e7ef      	b.n	2daa <nwkFrameNext+0x12>
			return frame;
		}
	}

	return NULL;
    2dca:	2000      	movs	r0, #0
}
    2dcc:	4770      	bx	lr
	return NULL;
    2dce:	2000      	movs	r0, #0
    2dd0:	e7fc      	b.n	2dcc <nwkFrameNext+0x34>
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	200002b8 	.word	0x200002b8
    2dd8:	00000582 	.word	0x00000582

00002ddc <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    2ddc:	2200      	movs	r2, #0
    2dde:	2385      	movs	r3, #133	; 0x85
    2de0:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    2de2:	4a05      	ldr	r2, [pc, #20]	; (2df8 <nwkFrameCommandInit+0x1c>)
    2de4:	7913      	ldrb	r3, [r2, #4]
    2de6:	3301      	adds	r3, #1
    2de8:	b2db      	uxtb	r3, r3
    2dea:	7113      	strb	r3, [r2, #4]
    2dec:	7303      	strb	r3, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    2dee:	7813      	ldrb	r3, [r2, #0]
    2df0:	7343      	strb	r3, [r0, #13]
    2df2:	7853      	ldrb	r3, [r2, #1]
    2df4:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    2df6:	4770      	bx	lr
    2df8:	20000e94 	.word	0x20000e94

00002dfc <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dfe:	4b09      	ldr	r3, [pc, #36]	; (2e24 <nwkRouteInit+0x28>)
    2e00:	3302      	adds	r3, #2
    2e02:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2e04:	2701      	movs	r7, #1
    2e06:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2e08:	4c06      	ldr	r4, [pc, #24]	; (2e24 <nwkRouteInit+0x28>)
    2e0a:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2e0c:	2500      	movs	r5, #0
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2e0e:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2e10:	00d0      	lsls	r0, r2, #3
    2e12:	5d01      	ldrb	r1, [r0, r4]
    2e14:	43b1      	bics	r1, r6
    2e16:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2e18:	711d      	strb	r5, [r3, #4]
    2e1a:	3201      	adds	r2, #1
    2e1c:	3308      	adds	r3, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2e1e:	2a64      	cmp	r2, #100	; 0x64
    2e20:	d1f5      	bne.n	2e0e <nwkRouteInit+0x12>
	}
}
    2e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e24:	2000083c 	.word	0x2000083c

00002e28 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2e28:	b530      	push	{r4, r5, lr}
    2e2a:	4a0c      	ldr	r2, [pc, #48]	; (2e5c <NWK_RouteFindEntry+0x34>)
    2e2c:	3202      	adds	r2, #2
    2e2e:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2e30:	4d0a      	ldr	r5, [pc, #40]	; (2e5c <NWK_RouteFindEntry+0x34>)
    2e32:	e003      	b.n	2e3c <NWK_RouteFindEntry+0x14>
    2e34:	3301      	adds	r3, #1
    2e36:	3208      	adds	r2, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2e38:	2b64      	cmp	r3, #100	; 0x64
    2e3a:	d00c      	beq.n	2e56 <NWK_RouteFindEntry+0x2e>
		if (nwkRouteTable[i].dstAddr == dst &&
    2e3c:	8814      	ldrh	r4, [r2, #0]
    2e3e:	4284      	cmp	r4, r0
    2e40:	d1f8      	bne.n	2e34 <NWK_RouteFindEntry+0xc>
				nwkRouteTable[i].multicast == multicast) {
    2e42:	00dc      	lsls	r4, r3, #3
    2e44:	5d64      	ldrb	r4, [r4, r5]
    2e46:	07a4      	lsls	r4, r4, #30
    2e48:	0fe4      	lsrs	r4, r4, #31
		if (nwkRouteTable[i].dstAddr == dst &&
    2e4a:	428c      	cmp	r4, r1
    2e4c:	d1f2      	bne.n	2e34 <NWK_RouteFindEntry+0xc>
			return &nwkRouteTable[i];
    2e4e:	00db      	lsls	r3, r3, #3
    2e50:	4802      	ldr	r0, [pc, #8]	; (2e5c <NWK_RouteFindEntry+0x34>)
    2e52:	18c0      	adds	r0, r0, r3
		}
	}

	return NULL;
}
    2e54:	bd30      	pop	{r4, r5, pc}
	return NULL;
    2e56:	2000      	movs	r0, #0
    2e58:	e7fc      	b.n	2e54 <NWK_RouteFindEntry+0x2c>
    2e5a:	46c0      	nop			; (mov r8, r8)
    2e5c:	2000083c 	.word	0x2000083c

00002e60 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    2e60:	b530      	push	{r4, r5, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    2e62:	2200      	movs	r2, #0
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    2e64:	4813      	ldr	r0, [pc, #76]	; (2eb4 <NWK_RouteNewEntry+0x54>)

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
		if (iter->fixed) {
    2e66:	2401      	movs	r4, #1
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    2e68:	0003      	movs	r3, r0
    2e6a:	25c8      	movs	r5, #200	; 0xc8
    2e6c:	00ad      	lsls	r5, r5, #2
    2e6e:	46ac      	mov	ip, r5
    2e70:	4463      	add	r3, ip
    2e72:	0019      	movs	r1, r3
    2e74:	e003      	b.n	2e7e <NWK_RouteNewEntry+0x1e>
    2e76:	0002      	movs	r2, r0
    2e78:	3008      	adds	r0, #8
    2e7a:	4288      	cmp	r0, r1
    2e7c:	d00c      	beq.n	2e98 <NWK_RouteNewEntry+0x38>
		if (iter->fixed) {
    2e7e:	7803      	ldrb	r3, [r0, #0]
    2e80:	421c      	tst	r4, r3
    2e82:	d1f9      	bne.n	2e78 <NWK_RouteNewEntry+0x18>
			continue;
		}

		if (0 == iter->rank) {
    2e84:	7983      	ldrb	r3, [r0, #6]
    2e86:	2b00      	cmp	r3, #0
    2e88:	d007      	beq.n	2e9a <NWK_RouteNewEntry+0x3a>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    2e8a:	2a00      	cmp	r2, #0
    2e8c:	d0f3      	beq.n	2e76 <NWK_RouteNewEntry+0x16>
    2e8e:	7995      	ldrb	r5, [r2, #6]
    2e90:	429d      	cmp	r5, r3
    2e92:	d9f1      	bls.n	2e78 <NWK_RouteNewEntry+0x18>
    2e94:	0002      	movs	r2, r0
    2e96:	e7ef      	b.n	2e78 <NWK_RouteNewEntry+0x18>
    2e98:	0010      	movs	r0, r2
			entry = iter;
		}
	}

	entry->multicast = 0;
    2e9a:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2e9c:	2202      	movs	r2, #2
    2e9e:	4393      	bics	r3, r2
    2ea0:	001a      	movs	r2, r3
    2ea2:	230f      	movs	r3, #15
    2ea4:	4013      	ands	r3, r2
    2ea6:	2230      	movs	r2, #48	; 0x30
    2ea8:	4313      	orrs	r3, r2
    2eaa:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    2eac:	2380      	movs	r3, #128	; 0x80
    2eae:	7183      	strb	r3, [r0, #6]

	return entry;
}
    2eb0:	bd30      	pop	{r4, r5, pc}
    2eb2:	46c0      	nop			; (mov r8, r8)
    2eb4:	2000083c 	.word	0x2000083c

00002eb8 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2eb8:	7803      	ldrb	r3, [r0, #0]
    2eba:	07db      	lsls	r3, r3, #31
    2ebc:	d404      	bmi.n	2ec8 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2ebe:	2301      	movs	r3, #1
    2ec0:	425b      	negs	r3, r3
    2ec2:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2ec4:	2300      	movs	r3, #0
    2ec6:	7183      	strb	r3, [r0, #6]
}
    2ec8:	4770      	bx	lr
	...

00002ecc <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    2ecc:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2ece:	4b04      	ldr	r3, [pc, #16]	; (2ee0 <NWK_RouteNextHop+0x14>)
    2ed0:	4798      	blx	r3
	if (entry) {
    2ed2:	2800      	cmp	r0, #0
    2ed4:	d001      	beq.n	2eda <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    2ed6:	8880      	ldrh	r0, [r0, #4]
	}

	return NWK_ROUTE_UNKNOWN;
}
    2ed8:	bd10      	pop	{r4, pc}
	return NWK_ROUTE_UNKNOWN;
    2eda:	4802      	ldr	r0, [pc, #8]	; (2ee4 <NWK_RouteNextHop+0x18>)
    2edc:	e7fc      	b.n	2ed8 <NWK_RouteNextHop+0xc>
    2ede:	46c0      	nop			; (mov r8, r8)
    2ee0:	00002e29 	.word	0x00002e29
    2ee4:	0000ffff 	.word	0x0000ffff

00002ee8 <nwkRouteUpdateEntry>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteUpdateEntry(uint16_t dst, uint8_t multicast, uint16_t nextHop,
		uint8_t lqi)
{
    2ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2eea:	0006      	movs	r6, r0
    2eec:	000d      	movs	r5, r1
    2eee:	0017      	movs	r7, r2
    2ef0:	001c      	movs	r4, r3
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2ef2:	4b0c      	ldr	r3, [pc, #48]	; (2f24 <nwkRouteUpdateEntry+0x3c>)
    2ef4:	4798      	blx	r3

	if (NULL == entry) {
    2ef6:	2800      	cmp	r0, #0
    2ef8:	d011      	beq.n	2f1e <nwkRouteUpdateEntry+0x36>
		entry = NWK_RouteNewEntry();
	}

	entry->dstAddr = dst;
    2efa:	8046      	strh	r6, [r0, #2]
	entry->nextHopAddr = nextHop;
    2efc:	8087      	strh	r7, [r0, #4]
	entry->multicast = multicast;
    2efe:	2301      	movs	r3, #1
    2f00:	402b      	ands	r3, r5
    2f02:	005b      	lsls	r3, r3, #1
    2f04:	7801      	ldrb	r1, [r0, #0]
    2f06:	2202      	movs	r2, #2
    2f08:	4391      	bics	r1, r2
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2f0a:	430b      	orrs	r3, r1
    2f0c:	210f      	movs	r1, #15
    2f0e:	4019      	ands	r1, r3
    2f10:	2330      	movs	r3, #48	; 0x30
    2f12:	4319      	orrs	r1, r3
    2f14:	7001      	strb	r1, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    2f16:	2380      	movs	r3, #128	; 0x80
    2f18:	7183      	strb	r3, [r0, #6]
	entry->lqi = lqi;
    2f1a:	71c4      	strb	r4, [r0, #7]
}
    2f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		entry = NWK_RouteNewEntry();
    2f1e:	4b02      	ldr	r3, [pc, #8]	; (2f28 <nwkRouteUpdateEntry+0x40>)
    2f20:	4798      	blx	r3
    2f22:	e7ea      	b.n	2efa <nwkRouteUpdateEntry+0x12>
    2f24:	00002e29 	.word	0x00002e29
    2f28:	00002e61 	.word	0x00002e61

00002f2c <nwkRouteRemove>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2f2c:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2f2e:	4b03      	ldr	r3, [pc, #12]	; (2f3c <nwkRouteRemove+0x10>)
    2f30:	4798      	blx	r3
	if (entry) {
    2f32:	2800      	cmp	r0, #0
    2f34:	d001      	beq.n	2f3a <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    2f36:	4b02      	ldr	r3, [pc, #8]	; (2f40 <nwkRouteRemove+0x14>)
    2f38:	4798      	blx	r3
	}
}
    2f3a:	bd10      	pop	{r4, pc}
    2f3c:	00002e29 	.word	0x00002e29
    2f40:	00002eb9 	.word	0x00002eb9

00002f44 <nwkRouteFrameReceived>:

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
    2f44:	4770      	bx	lr
	...

00002f48 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    2f48:	b510      	push	{r4, lr}
    2f4a:	0004      	movs	r4, r0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    2f4c:	7bc3      	ldrb	r3, [r0, #15]
    2f4e:	7c00      	ldrb	r0, [r0, #16]
    2f50:	0200      	lsls	r0, r0, #8
    2f52:	4318      	orrs	r0, r3
    2f54:	4b1c      	ldr	r3, [pc, #112]	; (2fc8 <nwkRouteFrameSent+0x80>)
    2f56:	4298      	cmp	r0, r3
    2f58:	d019      	beq.n	2f8e <nwkRouteFrameSent+0x46>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    2f5a:	7ae1      	ldrb	r1, [r4, #11]
    2f5c:	0709      	lsls	r1, r1, #28
	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    2f5e:	0fc9      	lsrs	r1, r1, #31
    2f60:	4b1a      	ldr	r3, [pc, #104]	; (2fcc <nwkRouteFrameSent+0x84>)
    2f62:	4798      	blx	r3

	if (NULL == entry || entry->fixed) {
    2f64:	2800      	cmp	r0, #0
    2f66:	d012      	beq.n	2f8e <nwkRouteFrameSent+0x46>
    2f68:	7803      	ldrb	r3, [r0, #0]
    2f6a:	07db      	lsls	r3, r3, #31
    2f6c:	d40f      	bmi.n	2f8e <nwkRouteFrameSent+0x46>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    2f6e:	2385      	movs	r3, #133	; 0x85
    2f70:	5ce3      	ldrb	r3, [r4, r3]
    2f72:	2b00      	cmp	r3, #0
    2f74:	d119      	bne.n	2faa <nwkRouteFrameSent+0x62>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2f76:	7802      	ldrb	r2, [r0, #0]
    2f78:	330f      	adds	r3, #15
    2f7a:	4013      	ands	r3, r2
    2f7c:	2230      	movs	r2, #48	; 0x30
    2f7e:	4313      	orrs	r3, r2
    2f80:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    2f82:	7983      	ldrb	r3, [r0, #6]
    2f84:	3301      	adds	r3, #1
    2f86:	b2db      	uxtb	r3, r3
    2f88:	7183      	strb	r3, [r0, #6]
    2f8a:	2bff      	cmp	r3, #255	; 0xff
    2f8c:	d000      	beq.n	2f90 <nwkRouteFrameSent+0x48>
	} else {
		if (0 == --entry->score) {
			NWK_RouteFreeEntry(entry);
		}
	}
}
    2f8e:	bd10      	pop	{r4, pc}
    2f90:	490f      	ldr	r1, [pc, #60]	; (2fd0 <nwkRouteFrameSent+0x88>)
    2f92:	1d8a      	adds	r2, r1, #6
    2f94:	4b0f      	ldr	r3, [pc, #60]	; (2fd4 <nwkRouteFrameSent+0x8c>)
    2f96:	469c      	mov	ip, r3
    2f98:	4461      	add	r1, ip
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    2f9a:	7813      	ldrb	r3, [r2, #0]
    2f9c:	085b      	lsrs	r3, r3, #1
    2f9e:	3301      	adds	r3, #1
    2fa0:	7013      	strb	r3, [r2, #0]
    2fa2:	3208      	adds	r2, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2fa4:	428a      	cmp	r2, r1
    2fa6:	d1f8      	bne.n	2f9a <nwkRouteFrameSent+0x52>
    2fa8:	e7f1      	b.n	2f8e <nwkRouteFrameSent+0x46>
		if (0 == --entry->score) {
    2faa:	7801      	ldrb	r1, [r0, #0]
    2fac:	090b      	lsrs	r3, r1, #4
    2fae:	330f      	adds	r3, #15
    2fb0:	220f      	movs	r2, #15
    2fb2:	4013      	ands	r3, r2
    2fb4:	011c      	lsls	r4, r3, #4
    2fb6:	400a      	ands	r2, r1
    2fb8:	4322      	orrs	r2, r4
    2fba:	7002      	strb	r2, [r0, #0]
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	d1e6      	bne.n	2f8e <nwkRouteFrameSent+0x46>
			NWK_RouteFreeEntry(entry);
    2fc0:	4b05      	ldr	r3, [pc, #20]	; (2fd8 <nwkRouteFrameSent+0x90>)
    2fc2:	4798      	blx	r3
    2fc4:	e7e3      	b.n	2f8e <nwkRouteFrameSent+0x46>
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	0000ffff 	.word	0x0000ffff
    2fcc:	00002e29 	.word	0x00002e29
    2fd0:	2000083c 	.word	0x2000083c
    2fd4:	00000326 	.word	0x00000326
    2fd8:	00002eb9 	.word	0x00002eb9

00002fdc <nwkRoutePrepareTx>:
{
    2fdc:	b510      	push	{r4, lr}
    2fde:	0004      	movs	r4, r0
	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    2fe0:	7bc2      	ldrb	r2, [r0, #15]
    2fe2:	7c00      	ldrb	r0, [r0, #16]
    2fe4:	0200      	lsls	r0, r0, #8
    2fe6:	4310      	orrs	r0, r2
    2fe8:	4b0f      	ldr	r3, [pc, #60]	; (3028 <nwkRoutePrepareTx+0x4c>)
    2fea:	4298      	cmp	r0, r3
    2fec:	d00e      	beq.n	300c <nwkRoutePrepareTx+0x30>
	} else if (header->nwkFcf.linkLocal) {
    2fee:	7ae3      	ldrb	r3, [r4, #11]
    2ff0:	075b      	lsls	r3, r3, #29
    2ff2:	d410      	bmi.n	3016 <nwkRoutePrepareTx+0x3a>
				header->nwkFcf.multicast);
    2ff4:	7ae1      	ldrb	r1, [r4, #11]
    2ff6:	0709      	lsls	r1, r1, #28
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    2ff8:	0fc9      	lsrs	r1, r1, #31
    2ffa:	4b0c      	ldr	r3, [pc, #48]	; (302c <nwkRoutePrepareTx+0x50>)
    2ffc:	4798      	blx	r3
    2ffe:	71e0      	strb	r0, [r4, #7]
    3000:	0a03      	lsrs	r3, r0, #8
    3002:	7223      	strb	r3, [r4, #8]
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
    3004:	4b08      	ldr	r3, [pc, #32]	; (3028 <nwkRoutePrepareTx+0x4c>)
    3006:	4298      	cmp	r0, r3
    3008:	d009      	beq.n	301e <nwkRoutePrepareTx+0x42>
}
    300a:	bd10      	pop	{r4, pc}
		header->macDstAddr = NWK_BROADCAST_ADDR;
    300c:	2301      	movs	r3, #1
    300e:	425b      	negs	r3, r3
    3010:	71e3      	strb	r3, [r4, #7]
    3012:	7223      	strb	r3, [r4, #8]
    3014:	e7f9      	b.n	300a <nwkRoutePrepareTx+0x2e>
		header->macDstAddr = header->nwkDstAddr;
    3016:	71e0      	strb	r0, [r4, #7]
    3018:	0a00      	lsrs	r0, r0, #8
    301a:	7220      	strb	r0, [r4, #8]
    301c:	e7f5      	b.n	300a <nwkRoutePrepareTx+0x2e>
			nwkRouteDiscoveryRequest(frame);
    301e:	0020      	movs	r0, r4
    3020:	4b03      	ldr	r3, [pc, #12]	; (3030 <nwkRoutePrepareTx+0x54>)
    3022:	4798      	blx	r3
}
    3024:	e7f1      	b.n	300a <nwkRoutePrepareTx+0x2e>
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	0000ffff 	.word	0x0000ffff
    302c:	00002ecd 	.word	0x00002ecd
    3030:	000033ad 	.word	0x000033ad

00003034 <nwkRouteFrame>:
{
    3034:	b5f0      	push	{r4, r5, r6, r7, lr}
    3036:	46c6      	mov	lr, r8
    3038:	b500      	push	{lr}
    303a:	0007      	movs	r7, r0
			NWK_RouteNextHop(header->nwkDstAddr,
    303c:	7bc2      	ldrb	r2, [r0, #15]
    303e:	7c04      	ldrb	r4, [r0, #16]
    3040:	0224      	lsls	r4, r4, #8
    3042:	4314      	orrs	r4, r2
			header->nwkFcf.multicast)) {
    3044:	7ac5      	ldrb	r5, [r0, #11]
    3046:	072d      	lsls	r5, r5, #28
    3048:	0fed      	lsrs	r5, r5, #31
			NWK_RouteNextHop(header->nwkDstAddr,
    304a:	b2e9      	uxtb	r1, r5
    304c:	0020      	movs	r0, r4
    304e:	4b27      	ldr	r3, [pc, #156]	; (30ec <nwkRouteFrame+0xb8>)
    3050:	4798      	blx	r3
	if (NWK_ROUTE_UNKNOWN !=
    3052:	4b27      	ldr	r3, [pc, #156]	; (30f0 <nwkRouteFrame+0xbc>)
    3054:	4298      	cmp	r0, r3
    3056:	d010      	beq.n	307a <nwkRouteFrame+0x46>
		frame->tx.confirm = NULL;
    3058:	2200      	movs	r2, #0
    305a:	2389      	movs	r3, #137	; 0x89
    305c:	54fa      	strb	r2, [r7, r3]
    305e:	003b      	movs	r3, r7
    3060:	3389      	adds	r3, #137	; 0x89
    3062:	705a      	strb	r2, [r3, #1]
    3064:	709a      	strb	r2, [r3, #2]
    3066:	70da      	strb	r2, [r3, #3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    3068:	3202      	adds	r2, #2
    306a:	2388      	movs	r3, #136	; 0x88
    306c:	54fa      	strb	r2, [r7, r3]
		nwkTxFrame(frame);
    306e:	0038      	movs	r0, r7
    3070:	4b20      	ldr	r3, [pc, #128]	; (30f4 <nwkRouteFrame+0xc0>)
    3072:	4798      	blx	r3
}
    3074:	bc04      	pop	{r2}
    3076:	4690      	mov	r8, r2
    3078:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    307a:	7b7a      	ldrb	r2, [r7, #13]
    307c:	7bbb      	ldrb	r3, [r7, #14]
    307e:	021b      	lsls	r3, r3, #8
    3080:	4313      	orrs	r3, r2
    3082:	4698      	mov	r8, r3
	if (NULL == (frame = nwkFrameAlloc())) {
    3084:	4b1c      	ldr	r3, [pc, #112]	; (30f8 <nwkRouteFrame+0xc4>)
    3086:	4798      	blx	r3
    3088:	1e06      	subs	r6, r0, #0
    308a:	d02b      	beq.n	30e4 <nwkRouteFrame+0xb0>
	nwkFrameCommandInit(frame);
    308c:	4b1b      	ldr	r3, [pc, #108]	; (30fc <nwkRouteFrame+0xc8>)
    308e:	4798      	blx	r3
	frame->size += sizeof(NwkCommandRouteError_t);
    3090:	7873      	ldrb	r3, [r6, #1]
    3092:	3306      	adds	r3, #6
    3094:	7073      	strb	r3, [r6, #1]
	frame->tx.confirm = NULL;
    3096:	2200      	movs	r2, #0
    3098:	2389      	movs	r3, #137	; 0x89
    309a:	54f2      	strb	r2, [r6, r3]
    309c:	0033      	movs	r3, r6
    309e:	3389      	adds	r3, #137	; 0x89
    30a0:	705a      	strb	r2, [r3, #1]
    30a2:	709a      	strb	r2, [r3, #2]
    30a4:	70da      	strb	r2, [r3, #3]
	frame->header.nwkDstAddr = src;
    30a6:	20ff      	movs	r0, #255	; 0xff
    30a8:	4643      	mov	r3, r8
    30aa:	4018      	ands	r0, r3
    30ac:	73f0      	strb	r0, [r6, #15]
    30ae:	0a1a      	lsrs	r2, r3, #8
    30b0:	7432      	strb	r2, [r6, #16]
	command = (NwkCommandRouteError_t *)frame->payload;
    30b2:	2381      	movs	r3, #129	; 0x81
    30b4:	5cf3      	ldrb	r3, [r6, r3]
    30b6:	2182      	movs	r1, #130	; 0x82
    30b8:	5c71      	ldrb	r1, [r6, r1]
    30ba:	0209      	lsls	r1, r1, #8
    30bc:	4319      	orrs	r1, r3
    30be:	2383      	movs	r3, #131	; 0x83
    30c0:	5cf3      	ldrb	r3, [r6, r3]
    30c2:	041b      	lsls	r3, r3, #16
    30c4:	4319      	orrs	r1, r3
    30c6:	2384      	movs	r3, #132	; 0x84
    30c8:	5cf3      	ldrb	r3, [r6, r3]
    30ca:	061b      	lsls	r3, r3, #24
    30cc:	430b      	orrs	r3, r1
	command->id = NWK_COMMAND_ROUTE_ERROR;
    30ce:	2101      	movs	r1, #1
    30d0:	7019      	strb	r1, [r3, #0]
	command->srcAddr = src;
    30d2:	7058      	strb	r0, [r3, #1]
    30d4:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    30d6:	70dc      	strb	r4, [r3, #3]
    30d8:	0a24      	lsrs	r4, r4, #8
    30da:	711c      	strb	r4, [r3, #4]
	command->multicast = multicast;
    30dc:	715d      	strb	r5, [r3, #5]
	nwkTxFrame(frame);
    30de:	0030      	movs	r0, r6
    30e0:	4b04      	ldr	r3, [pc, #16]	; (30f4 <nwkRouteFrame+0xc0>)
    30e2:	4798      	blx	r3
		nwkFrameFree(frame);
    30e4:	0038      	movs	r0, r7
    30e6:	4b06      	ldr	r3, [pc, #24]	; (3100 <nwkRouteFrame+0xcc>)
    30e8:	4798      	blx	r3
}
    30ea:	e7c3      	b.n	3074 <nwkRouteFrame+0x40>
    30ec:	00002ecd 	.word	0x00002ecd
    30f0:	0000ffff 	.word	0x0000ffff
    30f4:	00003e69 	.word	0x00003e69
    30f8:	00002d15 	.word	0x00002d15
    30fc:	00002ddd 	.word	0x00002ddd
    3100:	00002d85 	.word	0x00002d85

00003104 <nwkRouteErrorReceived>:
{
    3104:	b510      	push	{r4, lr}
	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    3106:	7b02      	ldrb	r2, [r0, #12]
		return false;
    3108:	2300      	movs	r3, #0
	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    310a:	2a06      	cmp	r2, #6
    310c:	d001      	beq.n	3112 <nwkRouteErrorReceived+0xe>
}
    310e:	0018      	movs	r0, r3
    3110:	bd10      	pop	{r4, pc}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    3112:	6883      	ldr	r3, [r0, #8]
	nwkRouteRemove(command->dstAddr, command->multicast);
    3114:	7959      	ldrb	r1, [r3, #5]
    3116:	78da      	ldrb	r2, [r3, #3]
    3118:	7918      	ldrb	r0, [r3, #4]
    311a:	0200      	lsls	r0, r0, #8
    311c:	4310      	orrs	r0, r2
    311e:	4b02      	ldr	r3, [pc, #8]	; (3128 <nwkRouteErrorReceived+0x24>)
    3120:	4798      	blx	r3
	return true;
    3122:	2301      	movs	r3, #1
    3124:	e7f3      	b.n	310e <nwkRouteErrorReceived+0xa>
    3126:	46c0      	nop			; (mov r8, r8)
    3128:	00002f2d 	.word	0x00002f2d

0000312c <nwkRouteDiscoveryFindEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
    312c:	b570      	push	{r4, r5, r6, lr}
    312e:	4b0d      	ldr	r3, [pc, #52]	; (3164 <nwkRouteDiscoveryFindEntry+0x38>)
    3130:	2400      	movs	r4, #0
    3132:	e003      	b.n	313c <nwkRouteDiscoveryFindEntry+0x10>
    3134:	3401      	adds	r4, #1
    3136:	330c      	adds	r3, #12
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    3138:	2c05      	cmp	r4, #5
    313a:	d011      	beq.n	3160 <nwkRouteDiscoveryFindEntry+0x34>
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
    313c:	895d      	ldrh	r5, [r3, #10]
    313e:	2d00      	cmp	r5, #0
    3140:	d0f8      	beq.n	3134 <nwkRouteDiscoveryFindEntry+0x8>
    3142:	881d      	ldrh	r5, [r3, #0]
    3144:	4285      	cmp	r5, r0
    3146:	d1f5      	bne.n	3134 <nwkRouteDiscoveryFindEntry+0x8>
				nwkRouteDiscoveryTable[i].srcAddr == src &&
    3148:	885d      	ldrh	r5, [r3, #2]
    314a:	428d      	cmp	r5, r1
    314c:	d1f2      	bne.n	3134 <nwkRouteDiscoveryFindEntry+0x8>
				nwkRouteDiscoveryTable[i].dstAddr == dst &&
    314e:	791d      	ldrb	r5, [r3, #4]
    3150:	4295      	cmp	r5, r2
    3152:	d1ef      	bne.n	3134 <nwkRouteDiscoveryFindEntry+0x8>
				nwkRouteDiscoveryTable[i].multicast ==
				multicast) {
			return &nwkRouteDiscoveryTable[i];
    3154:	0060      	lsls	r0, r4, #1
    3156:	1904      	adds	r4, r0, r4
    3158:	00a4      	lsls	r4, r4, #2
    315a:	4802      	ldr	r0, [pc, #8]	; (3164 <nwkRouteDiscoveryFindEntry+0x38>)
    315c:	1900      	adds	r0, r0, r4
    315e:	e000      	b.n	3162 <nwkRouteDiscoveryFindEntry+0x36>
		}
	}

	return NULL;
    3160:	2000      	movs	r0, #0
}
    3162:	bd70      	pop	{r4, r5, r6, pc}
    3164:	20000b5c 	.word	0x20000b5c

00003168 <nwkRouteDiscoveryNewEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
    3168:	b510      	push	{r4, lr}
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (0 == nwkRouteDiscoveryTable[i].timeout) {
    316a:	4b10      	ldr	r3, [pc, #64]	; (31ac <nwkRouteDiscoveryNewEntry+0x44>)
    316c:	895b      	ldrh	r3, [r3, #10]
    316e:	2b00      	cmp	r3, #0
    3170:	d00b      	beq.n	318a <nwkRouteDiscoveryNewEntry+0x22>
    3172:	4a0e      	ldr	r2, [pc, #56]	; (31ac <nwkRouteDiscoveryNewEntry+0x44>)
    3174:	2301      	movs	r3, #1
    3176:	0018      	movs	r0, r3
    3178:	8ad1      	ldrh	r1, [r2, #22]
    317a:	2900      	cmp	r1, #0
    317c:	d006      	beq.n	318c <nwkRouteDiscoveryNewEntry+0x24>
    317e:	3301      	adds	r3, #1
    3180:	320c      	adds	r2, #12
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    3182:	2b05      	cmp	r3, #5
    3184:	d1f7      	bne.n	3176 <nwkRouteDiscoveryNewEntry+0xe>
	NwkRouteDiscoveryTableEntry_t *entry = NULL;
    3186:	2400      	movs	r4, #0
		entry->reverseLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
	}

	return entry;
    3188:	e00e      	b.n	31a8 <nwkRouteDiscoveryNewEntry+0x40>
		if (0 == nwkRouteDiscoveryTable[i].timeout) {
    318a:	2000      	movs	r0, #0
			entry = &nwkRouteDiscoveryTable[i];
    318c:	4a07      	ldr	r2, [pc, #28]	; (31ac <nwkRouteDiscoveryNewEntry+0x44>)
    318e:	0043      	lsls	r3, r0, #1
    3190:	181c      	adds	r4, r3, r0
    3192:	00a4      	lsls	r4, r4, #2
    3194:	1914      	adds	r4, r2, r4
		entry->forwardLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    3196:	2100      	movs	r1, #0
    3198:	7221      	strb	r1, [r4, #8]
		entry->reverseLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    319a:	7261      	strb	r1, [r4, #9]
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
    319c:	22fa      	movs	r2, #250	; 0xfa
    319e:	0092      	lsls	r2, r2, #2
    31a0:	8162      	strh	r2, [r4, #10]
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
    31a2:	4803      	ldr	r0, [pc, #12]	; (31b0 <nwkRouteDiscoveryNewEntry+0x48>)
    31a4:	4b03      	ldr	r3, [pc, #12]	; (31b4 <nwkRouteDiscoveryNewEntry+0x4c>)
    31a6:	4798      	blx	r3
}
    31a8:	0020      	movs	r0, r4
    31aa:	bd10      	pop	{r4, pc}
    31ac:	20000b5c 	.word	0x20000b5c
    31b0:	20000b98 	.word	0x20000b98
    31b4:	00004581 	.word	0x00004581

000031b8 <nwkRouteDiscoveryTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
    31b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ba:	46c6      	mov	lr, r8
    31bc:	b500      	push	{lr}
    31be:	b082      	sub	sp, #8
    31c0:	9001      	str	r0, [sp, #4]
    31c2:	4d24      	ldr	r5, [pc, #144]	; (3254 <nwkRouteDiscoveryTimerHandler+0x9c>)
    31c4:	002e      	movs	r6, r5
    31c6:	363c      	adds	r6, #60	; 0x3c
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;
    31c8:	2700      	movs	r7, #0
    31ca:	e009      	b.n	31e0 <nwkRouteDiscoveryTimerHandler+0x28>

		if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL) {
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
			restart = true;
		} else {
			entry->timeout = 0;
    31cc:	2300      	movs	r3, #0
    31ce:	816b      	strh	r3, [r5, #10]

			if (entry->srcAddr == nwkIb.addr) {
    31d0:	882a      	ldrh	r2, [r5, #0]
    31d2:	4b21      	ldr	r3, [pc, #132]	; (3258 <nwkRouteDiscoveryTimerHandler+0xa0>)
    31d4:	881b      	ldrh	r3, [r3, #0]
    31d6:	429a      	cmp	r2, r3
    31d8:	d00a      	beq.n	31f0 <nwkRouteDiscoveryTimerHandler+0x38>
    31da:	350c      	adds	r5, #12
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    31dc:	42b5      	cmp	r5, r6
    31de:	d02e      	beq.n	323e <nwkRouteDiscoveryTimerHandler+0x86>
    31e0:	9500      	str	r5, [sp, #0]
		if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL) {
    31e2:	896b      	ldrh	r3, [r5, #10]
    31e4:	2b64      	cmp	r3, #100	; 0x64
    31e6:	d9f1      	bls.n	31cc <nwkRouteDiscoveryTimerHandler+0x14>
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    31e8:	3b64      	subs	r3, #100	; 0x64
    31ea:	816b      	strh	r3, [r5, #10]
			restart = true;
    31ec:	2701      	movs	r7, #1
    31ee:	e7f4      	b.n	31da <nwkRouteDiscoveryTimerHandler+0x22>
				nwkRouteDiscoveryDone(entry,
						entry->reverseLinkQuality >
    31f0:	9b00      	ldr	r3, [sp, #0]
    31f2:	7a5b      	ldrb	r3, [r3, #9]
    31f4:	4698      	mov	r8, r3
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;
    31f6:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    31f8:	0020      	movs	r0, r4
    31fa:	4b18      	ldr	r3, [pc, #96]	; (325c <nwkRouteDiscoveryTimerHandler+0xa4>)
    31fc:	4798      	blx	r3
    31fe:	1e04      	subs	r4, r0, #0
    3200:	d0eb      	beq.n	31da <nwkRouteDiscoveryTimerHandler+0x22>
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
    3202:	7823      	ldrb	r3, [r4, #0]
    3204:	2b40      	cmp	r3, #64	; 0x40
    3206:	d1f7      	bne.n	31f8 <nwkRouteDiscoveryTimerHandler+0x40>
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    3208:	7be1      	ldrb	r1, [r4, #15]
    320a:	7c23      	ldrb	r3, [r4, #16]
    320c:	021b      	lsls	r3, r3, #8
    320e:	9a00      	ldr	r2, [sp, #0]
    3210:	8852      	ldrh	r2, [r2, #2]
    3212:	430b      	orrs	r3, r1
    3214:	429a      	cmp	r2, r3
    3216:	d1ef      	bne.n	31f8 <nwkRouteDiscoveryTimerHandler+0x40>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
    3218:	7ae3      	ldrb	r3, [r4, #11]
    321a:	071b      	lsls	r3, r3, #28
		if (entry->dstAddr != frame->header.nwkDstAddr ||
    321c:	9a00      	ldr	r2, [sp, #0]
    321e:	7912      	ldrb	r2, [r2, #4]
    3220:	0fdb      	lsrs	r3, r3, #31
    3222:	429a      	cmp	r2, r3
    3224:	d1e8      	bne.n	31f8 <nwkRouteDiscoveryTimerHandler+0x40>
			continue;
		}

		if (status) {
    3226:	4643      	mov	r3, r8
    3228:	2b00      	cmp	r3, #0
    322a:	d003      	beq.n	3234 <nwkRouteDiscoveryTimerHandler+0x7c>
			nwkTxFrame(frame);
    322c:	0020      	movs	r0, r4
    322e:	4b0c      	ldr	r3, [pc, #48]	; (3260 <nwkRouteDiscoveryTimerHandler+0xa8>)
    3230:	4798      	blx	r3
    3232:	e7e1      	b.n	31f8 <nwkRouteDiscoveryTimerHandler+0x40>
		} else {
			nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    3234:	2111      	movs	r1, #17
    3236:	0020      	movs	r0, r4
    3238:	4b0a      	ldr	r3, [pc, #40]	; (3264 <nwkRouteDiscoveryTimerHandler+0xac>)
    323a:	4798      	blx	r3
    323c:	e7dc      	b.n	31f8 <nwkRouteDiscoveryTimerHandler+0x40>
	if (restart) {
    323e:	2f00      	cmp	r7, #0
    3240:	d103      	bne.n	324a <nwkRouteDiscoveryTimerHandler+0x92>
}
    3242:	b002      	add	sp, #8
    3244:	bc04      	pop	{r2}
    3246:	4690      	mov	r8, r2
    3248:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    324a:	9801      	ldr	r0, [sp, #4]
    324c:	4b06      	ldr	r3, [pc, #24]	; (3268 <nwkRouteDiscoveryTimerHandler+0xb0>)
    324e:	4798      	blx	r3
}
    3250:	e7f7      	b.n	3242 <nwkRouteDiscoveryTimerHandler+0x8a>
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	20000b5c 	.word	0x20000b5c
    3258:	20000e94 	.word	0x20000e94
    325c:	00002d99 	.word	0x00002d99
    3260:	00003e69 	.word	0x00003e69
    3264:	00003fed 	.word	0x00003fed
    3268:	00004581 	.word	0x00004581

0000326c <nwkRouteDiscoverySendRequest>:
{
    326c:	b570      	push	{r4, r5, r6, lr}
    326e:	0005      	movs	r5, r0
    3270:	000e      	movs	r6, r1
	if (NULL == (req = nwkFrameAlloc())) {
    3272:	4b1e      	ldr	r3, [pc, #120]	; (32ec <nwkRouteDiscoverySendRequest+0x80>)
    3274:	4798      	blx	r3
    3276:	1e04      	subs	r4, r0, #0
    3278:	d035      	beq.n	32e6 <nwkRouteDiscoverySendRequest+0x7a>
	nwkFrameCommandInit(req);
    327a:	4b1d      	ldr	r3, [pc, #116]	; (32f0 <nwkRouteDiscoverySendRequest+0x84>)
    327c:	4798      	blx	r3
	req->size += sizeof(NwkCommandRouteRequest_t);
    327e:	7863      	ldrb	r3, [r4, #1]
    3280:	3307      	adds	r3, #7
    3282:	7063      	strb	r3, [r4, #1]
	req->tx.confirm = NULL;
    3284:	2200      	movs	r2, #0
    3286:	2389      	movs	r3, #137	; 0x89
    3288:	54e2      	strb	r2, [r4, r3]
    328a:	0023      	movs	r3, r4
    328c:	3389      	adds	r3, #137	; 0x89
    328e:	705a      	strb	r2, [r3, #1]
    3290:	709a      	strb	r2, [r3, #2]
    3292:	70da      	strb	r2, [r3, #3]
	req->header.nwkFcf.linkLocal = 1;
    3294:	7ae3      	ldrb	r3, [r4, #11]
    3296:	2204      	movs	r2, #4
    3298:	4313      	orrs	r3, r2
    329a:	72e3      	strb	r3, [r4, #11]
	req->header.nwkDstAddr = NWK_BROADCAST_ADDR;
    329c:	2301      	movs	r3, #1
    329e:	425b      	negs	r3, r3
    32a0:	73e3      	strb	r3, [r4, #15]
    32a2:	7423      	strb	r3, [r4, #16]
	command = (NwkCommandRouteRequest_t *)req->payload;
    32a4:	3382      	adds	r3, #130	; 0x82
    32a6:	5ce3      	ldrb	r3, [r4, r3]
    32a8:	2282      	movs	r2, #130	; 0x82
    32aa:	5ca2      	ldrb	r2, [r4, r2]
    32ac:	0212      	lsls	r2, r2, #8
    32ae:	431a      	orrs	r2, r3
    32b0:	2383      	movs	r3, #131	; 0x83
    32b2:	5ce3      	ldrb	r3, [r4, r3]
    32b4:	041b      	lsls	r3, r3, #16
    32b6:	431a      	orrs	r2, r3
    32b8:	2384      	movs	r3, #132	; 0x84
    32ba:	5ce3      	ldrb	r3, [r4, r3]
    32bc:	061b      	lsls	r3, r3, #24
    32be:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ROUTE_REQUEST;
    32c0:	2202      	movs	r2, #2
    32c2:	701a      	strb	r2, [r3, #0]
	command->srcAddr = entry->srcAddr;
    32c4:	882a      	ldrh	r2, [r5, #0]
    32c6:	705a      	strb	r2, [r3, #1]
    32c8:	0a12      	lsrs	r2, r2, #8
    32ca:	709a      	strb	r2, [r3, #2]
	command->dstAddr = entry->dstAddr;
    32cc:	886a      	ldrh	r2, [r5, #2]
    32ce:	78a9      	ldrb	r1, [r5, #2]
    32d0:	70d9      	strb	r1, [r3, #3]
    32d2:	0a12      	lsrs	r2, r2, #8
    32d4:	711a      	strb	r2, [r3, #4]
	command->multicast = entry->multicast;
    32d6:	792a      	ldrb	r2, [r5, #4]
    32d8:	715a      	strb	r2, [r3, #5]
	command->linkQuality = lq;
    32da:	719e      	strb	r6, [r3, #6]
	nwkTxFrame(req);
    32dc:	0020      	movs	r0, r4
    32de:	4b05      	ldr	r3, [pc, #20]	; (32f4 <nwkRouteDiscoverySendRequest+0x88>)
    32e0:	4798      	blx	r3
	return true;
    32e2:	2001      	movs	r0, #1
}
    32e4:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    32e6:	2000      	movs	r0, #0
    32e8:	e7fc      	b.n	32e4 <nwkRouteDiscoverySendRequest+0x78>
    32ea:	46c0      	nop			; (mov r8, r8)
    32ec:	00002d15 	.word	0x00002d15
    32f0:	00002ddd 	.word	0x00002ddd
    32f4:	00003e69 	.word	0x00003e69

000032f8 <nwkRouteDiscoverySendReply>:
{
    32f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32fa:	0005      	movs	r5, r0
    32fc:	000f      	movs	r7, r1
    32fe:	0016      	movs	r6, r2
	if (NULL == (req = nwkFrameAlloc())) {
    3300:	4b1c      	ldr	r3, [pc, #112]	; (3374 <nwkRouteDiscoverySendReply+0x7c>)
    3302:	4798      	blx	r3
    3304:	1e04      	subs	r4, r0, #0
    3306:	d033      	beq.n	3370 <nwkRouteDiscoverySendReply+0x78>
	nwkFrameCommandInit(req);
    3308:	4b1b      	ldr	r3, [pc, #108]	; (3378 <nwkRouteDiscoverySendReply+0x80>)
    330a:	4798      	blx	r3
	req->size += sizeof(NwkCommandRouteReply_t);
    330c:	7863      	ldrb	r3, [r4, #1]
    330e:	3308      	adds	r3, #8
    3310:	7063      	strb	r3, [r4, #1]
	req->tx.confirm = NULL;
    3312:	2200      	movs	r2, #0
    3314:	2389      	movs	r3, #137	; 0x89
    3316:	54e2      	strb	r2, [r4, r3]
    3318:	0023      	movs	r3, r4
    331a:	3389      	adds	r3, #137	; 0x89
    331c:	705a      	strb	r2, [r3, #1]
    331e:	709a      	strb	r2, [r3, #2]
    3320:	70da      	strb	r2, [r3, #3]
	req->tx.control = NWK_TX_CONTROL_DIRECT_LINK;
    3322:	3204      	adds	r2, #4
    3324:	2388      	movs	r3, #136	; 0x88
    3326:	54e2      	strb	r2, [r4, r3]
	req->header.nwkDstAddr = entry->senderAddr;
    3328:	88eb      	ldrh	r3, [r5, #6]
    332a:	73e3      	strb	r3, [r4, #15]
    332c:	0a1b      	lsrs	r3, r3, #8
    332e:	7423      	strb	r3, [r4, #16]
	command = (NwkCommandRouteReply_t *)req->payload;
    3330:	2381      	movs	r3, #129	; 0x81
    3332:	5ce3      	ldrb	r3, [r4, r3]
    3334:	327e      	adds	r2, #126	; 0x7e
    3336:	5ca2      	ldrb	r2, [r4, r2]
    3338:	0212      	lsls	r2, r2, #8
    333a:	431a      	orrs	r2, r3
    333c:	2383      	movs	r3, #131	; 0x83
    333e:	5ce3      	ldrb	r3, [r4, r3]
    3340:	041b      	lsls	r3, r3, #16
    3342:	431a      	orrs	r2, r3
    3344:	2384      	movs	r3, #132	; 0x84
    3346:	5ce3      	ldrb	r3, [r4, r3]
    3348:	061b      	lsls	r3, r3, #24
    334a:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ROUTE_REPLY;
    334c:	2203      	movs	r2, #3
    334e:	701a      	strb	r2, [r3, #0]
	command->srcAddr = entry->srcAddr;
    3350:	882a      	ldrh	r2, [r5, #0]
    3352:	705a      	strb	r2, [r3, #1]
    3354:	0a12      	lsrs	r2, r2, #8
    3356:	709a      	strb	r2, [r3, #2]
	command->dstAddr = entry->dstAddr;
    3358:	886a      	ldrh	r2, [r5, #2]
    335a:	78a9      	ldrb	r1, [r5, #2]
    335c:	70d9      	strb	r1, [r3, #3]
    335e:	0a12      	lsrs	r2, r2, #8
    3360:	711a      	strb	r2, [r3, #4]
	command->multicast = entry->multicast;
    3362:	792a      	ldrb	r2, [r5, #4]
    3364:	715a      	strb	r2, [r3, #5]
	command->forwardLinkQuality = flq;
    3366:	719f      	strb	r7, [r3, #6]
	command->reverseLinkQuality = rlq;
    3368:	71de      	strb	r6, [r3, #7]
	nwkTxFrame(req);
    336a:	0020      	movs	r0, r4
    336c:	4b03      	ldr	r3, [pc, #12]	; (337c <nwkRouteDiscoverySendReply+0x84>)
    336e:	4798      	blx	r3
}
    3370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3372:	46c0      	nop			; (mov r8, r8)
    3374:	00002d15 	.word	0x00002d15
    3378:	00002ddd 	.word	0x00002ddd
    337c:	00003e69 	.word	0x00003e69

00003380 <nwkRouteDiscoveryInit>:
		nwkRouteDiscoveryTable[i].timeout = 0;
    3380:	4b07      	ldr	r3, [pc, #28]	; (33a0 <nwkRouteDiscoveryInit+0x20>)
    3382:	2200      	movs	r2, #0
    3384:	815a      	strh	r2, [r3, #10]
    3386:	82da      	strh	r2, [r3, #22]
    3388:	845a      	strh	r2, [r3, #34]	; 0x22
    338a:	85da      	strh	r2, [r3, #46]	; 0x2e
    338c:	875a      	strh	r2, [r3, #58]	; 0x3a
	nwkRouteDiscoveryTimer.interval = NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    338e:	4b05      	ldr	r3, [pc, #20]	; (33a4 <nwkRouteDiscoveryInit+0x24>)
    3390:	3264      	adds	r2, #100	; 0x64
    3392:	609a      	str	r2, [r3, #8]
	nwkRouteDiscoveryTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3394:	2200      	movs	r2, #0
    3396:	731a      	strb	r2, [r3, #12]
	nwkRouteDiscoveryTimer.handler = nwkRouteDiscoveryTimerHandler;
    3398:	4a03      	ldr	r2, [pc, #12]	; (33a8 <nwkRouteDiscoveryInit+0x28>)
    339a:	611a      	str	r2, [r3, #16]
}
    339c:	4770      	bx	lr
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	20000b5c 	.word	0x20000b5c
    33a4:	20000b98 	.word	0x20000b98
    33a8:	000031b9 	.word	0x000031b9

000033ac <nwkRouteDiscoveryRequest>:
{
    33ac:	b510      	push	{r4, lr}
    33ae:	0004      	movs	r4, r0
			header->nwkFcf.multicast);
    33b0:	7ac2      	ldrb	r2, [r0, #11]
    33b2:	0712      	lsls	r2, r2, #28
	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    33b4:	0fd2      	lsrs	r2, r2, #31
    33b6:	7bc0      	ldrb	r0, [r0, #15]
    33b8:	7c21      	ldrb	r1, [r4, #16]
    33ba:	0209      	lsls	r1, r1, #8
    33bc:	4301      	orrs	r1, r0
    33be:	4b14      	ldr	r3, [pc, #80]	; (3410 <nwkRouteDiscoveryRequest+0x64>)
    33c0:	8818      	ldrh	r0, [r3, #0]
    33c2:	4b14      	ldr	r3, [pc, #80]	; (3414 <nwkRouteDiscoveryRequest+0x68>)
    33c4:	4798      	blx	r3
	if (entry) {
    33c6:	2800      	cmp	r0, #0
    33c8:	d002      	beq.n	33d0 <nwkRouteDiscoveryRequest+0x24>
		frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    33ca:	2340      	movs	r3, #64	; 0x40
    33cc:	7023      	strb	r3, [r4, #0]
}
    33ce:	bd10      	pop	{r4, pc}
	entry = nwkRouteDiscoveryNewEntry();
    33d0:	4b11      	ldr	r3, [pc, #68]	; (3418 <nwkRouteDiscoveryRequest+0x6c>)
    33d2:	4798      	blx	r3
	if (entry) {
    33d4:	2800      	cmp	r0, #0
    33d6:	d013      	beq.n	3400 <nwkRouteDiscoveryRequest+0x54>
		entry->srcAddr = nwkIb.addr;
    33d8:	4b0d      	ldr	r3, [pc, #52]	; (3410 <nwkRouteDiscoveryRequest+0x64>)
    33da:	881b      	ldrh	r3, [r3, #0]
    33dc:	8003      	strh	r3, [r0, #0]
		entry->dstAddr = header->nwkDstAddr;
    33de:	7be1      	ldrb	r1, [r4, #15]
    33e0:	7c23      	ldrb	r3, [r4, #16]
    33e2:	021b      	lsls	r3, r3, #8
    33e4:	430b      	orrs	r3, r1
    33e6:	8043      	strh	r3, [r0, #2]
		entry->multicast = header->nwkFcf.multicast;
    33e8:	7ae3      	ldrb	r3, [r4, #11]
    33ea:	071b      	lsls	r3, r3, #28
    33ec:	0fdb      	lsrs	r3, r3, #31
    33ee:	7103      	strb	r3, [r0, #4]
		entry->senderAddr = NWK_BROADCAST_ADDR;
    33f0:	2301      	movs	r3, #1
    33f2:	425b      	negs	r3, r3
    33f4:	80c3      	strh	r3, [r0, #6]
		if (nwkRouteDiscoverySendRequest(entry,
    33f6:	21ff      	movs	r1, #255	; 0xff
    33f8:	4b08      	ldr	r3, [pc, #32]	; (341c <nwkRouteDiscoveryRequest+0x70>)
    33fa:	4798      	blx	r3
    33fc:	2800      	cmp	r0, #0
    33fe:	d104      	bne.n	340a <nwkRouteDiscoveryRequest+0x5e>
	nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    3400:	2111      	movs	r1, #17
    3402:	0020      	movs	r0, r4
    3404:	4b06      	ldr	r3, [pc, #24]	; (3420 <nwkRouteDiscoveryRequest+0x74>)
    3406:	4798      	blx	r3
    3408:	e7e1      	b.n	33ce <nwkRouteDiscoveryRequest+0x22>
			frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    340a:	2340      	movs	r3, #64	; 0x40
    340c:	7023      	strb	r3, [r4, #0]
			return;
    340e:	e7de      	b.n	33ce <nwkRouteDiscoveryRequest+0x22>
    3410:	20000e94 	.word	0x20000e94
    3414:	0000312d 	.word	0x0000312d
    3418:	00003169 	.word	0x00003169
    341c:	0000326d 	.word	0x0000326d
    3420:	00003fed 	.word	0x00003fed

00003424 <nwkRouteDiscoveryRequestReceived>:
{
    3424:	b5f0      	push	{r4, r5, r6, r7, lr}
    3426:	46c6      	mov	lr, r8
    3428:	b500      	push	{lr}
    342a:	0005      	movs	r5, r0
	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
    342c:	7b03      	ldrb	r3, [r0, #12]
		return false;
    342e:	2600      	movs	r6, #0
	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
    3430:	2b07      	cmp	r3, #7
    3432:	d003      	beq.n	343c <nwkRouteDiscoveryRequestReceived+0x18>
}
    3434:	0030      	movs	r0, r6
    3436:	bc04      	pop	{r2}
    3438:	4690      	mov	r8, r2
    343a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	NwkCommandRouteRequest_t *command
    343c:	6884      	ldr	r4, [r0, #8]
	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
    343e:	7962      	ldrb	r2, [r4, #5]
    3440:	2a00      	cmp	r2, #0
    3442:	d153      	bne.n	34ec <nwkRouteDiscoveryRequestReceived+0xc8>
    3444:	78e1      	ldrb	r1, [r4, #3]
    3446:	7923      	ldrb	r3, [r4, #4]
    3448:	021b      	lsls	r3, r3, #8
    344a:	4319      	orrs	r1, r3
    344c:	4b2e      	ldr	r3, [pc, #184]	; (3508 <nwkRouteDiscoveryRequestReceived+0xe4>)
    344e:	881b      	ldrh	r3, [r3, #0]
	if (command->srcAddr == nwkIb.addr) {
    3450:	7866      	ldrb	r6, [r4, #1]
    3452:	78a0      	ldrb	r0, [r4, #2]
    3454:	0200      	lsls	r0, r0, #8
    3456:	4330      	orrs	r0, r6
    3458:	4283      	cmp	r3, r0
    345a:	d03f      	beq.n	34dc <nwkRouteDiscoveryRequestReceived+0xb8>
	bool reply = false;
    345c:	2601      	movs	r6, #1
	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
    345e:	4299      	cmp	r1, r3
    3460:	d14c      	bne.n	34fc <nwkRouteDiscoveryRequestReceived+0xd8>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
	return ((uint16_t)lqa * lqb) >> 8;
    3462:	79a3      	ldrb	r3, [r4, #6]
    3464:	7b6f      	ldrb	r7, [r5, #13]
    3466:	435f      	muls	r7, r3
    3468:	0a3b      	lsrs	r3, r7, #8
    346a:	4698      	mov	r8, r3
	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    346c:	78e3      	ldrb	r3, [r4, #3]
    346e:	7921      	ldrb	r1, [r4, #4]
    3470:	0209      	lsls	r1, r1, #8
    3472:	4319      	orrs	r1, r3
    3474:	4b25      	ldr	r3, [pc, #148]	; (350c <nwkRouteDiscoveryRequestReceived+0xe8>)
    3476:	4798      	blx	r3
    3478:	1e07      	subs	r7, r0, #0
	if (entry) {
    347a:	d01a      	beq.n	34b2 <nwkRouteDiscoveryRequestReceived+0x8e>
		if (linkQuality <= entry->forwardLinkQuality) {
    347c:	7a03      	ldrb	r3, [r0, #8]
    347e:	4543      	cmp	r3, r8
    3480:	d230      	bcs.n	34e4 <nwkRouteDiscoveryRequestReceived+0xc0>
	entry->srcAddr = command->srcAddr;
    3482:	7862      	ldrb	r2, [r4, #1]
    3484:	78a3      	ldrb	r3, [r4, #2]
    3486:	021b      	lsls	r3, r3, #8
    3488:	4313      	orrs	r3, r2
    348a:	803b      	strh	r3, [r7, #0]
	entry->dstAddr = command->dstAddr;
    348c:	78e2      	ldrb	r2, [r4, #3]
    348e:	7923      	ldrb	r3, [r4, #4]
    3490:	021b      	lsls	r3, r3, #8
    3492:	4313      	orrs	r3, r2
    3494:	807b      	strh	r3, [r7, #2]
	entry->multicast = command->multicast;
    3496:	7963      	ldrb	r3, [r4, #5]
    3498:	713b      	strb	r3, [r7, #4]
	entry->senderAddr = ind->srcAddr;
    349a:	882b      	ldrh	r3, [r5, #0]
    349c:	80fb      	strh	r3, [r7, #6]
	entry->forwardLinkQuality = linkQuality;
    349e:	4643      	mov	r3, r8
    34a0:	723b      	strb	r3, [r7, #8]
	if (reply) {
    34a2:	2e00      	cmp	r6, #0
    34a4:	d10b      	bne.n	34be <nwkRouteDiscoveryRequestReceived+0x9a>
		nwkRouteDiscoverySendRequest(entry, linkQuality);
    34a6:	4641      	mov	r1, r8
    34a8:	0038      	movs	r0, r7
    34aa:	4b19      	ldr	r3, [pc, #100]	; (3510 <nwkRouteDiscoveryRequestReceived+0xec>)
    34ac:	4798      	blx	r3
	return true;
    34ae:	2601      	movs	r6, #1
    34b0:	e7c0      	b.n	3434 <nwkRouteDiscoveryRequestReceived+0x10>
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
    34b2:	4b18      	ldr	r3, [pc, #96]	; (3514 <nwkRouteDiscoveryRequestReceived+0xf0>)
    34b4:	4798      	blx	r3
    34b6:	1e07      	subs	r7, r0, #0
    34b8:	d1e3      	bne.n	3482 <nwkRouteDiscoveryRequestReceived+0x5e>
			return true;
    34ba:	2601      	movs	r6, #1
    34bc:	e7ba      	b.n	3434 <nwkRouteDiscoveryRequestReceived+0x10>
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
    34be:	882a      	ldrh	r2, [r5, #0]
    34c0:	7863      	ldrb	r3, [r4, #1]
    34c2:	78a0      	ldrb	r0, [r4, #2]
    34c4:	0200      	lsls	r0, r0, #8
    34c6:	4318      	orrs	r0, r3
    34c8:	4643      	mov	r3, r8
    34ca:	2100      	movs	r1, #0
    34cc:	4c12      	ldr	r4, [pc, #72]	; (3518 <nwkRouteDiscoveryRequestReceived+0xf4>)
    34ce:	47a0      	blx	r4
		nwkRouteDiscoverySendReply(entry, linkQuality,
    34d0:	22ff      	movs	r2, #255	; 0xff
    34d2:	4641      	mov	r1, r8
    34d4:	0038      	movs	r0, r7
    34d6:	4b11      	ldr	r3, [pc, #68]	; (351c <nwkRouteDiscoveryRequestReceived+0xf8>)
    34d8:	4798      	blx	r3
    34da:	e7ab      	b.n	3434 <nwkRouteDiscoveryRequestReceived+0x10>
		return true;
    34dc:	2601      	movs	r6, #1
    34de:	e7a9      	b.n	3434 <nwkRouteDiscoveryRequestReceived+0x10>
		return true;
    34e0:	2601      	movs	r6, #1
    34e2:	e7a7      	b.n	3434 <nwkRouteDiscoveryRequestReceived+0x10>
			return true;
    34e4:	2601      	movs	r6, #1
    34e6:	e7a5      	b.n	3434 <nwkRouteDiscoveryRequestReceived+0x10>
		return true;
    34e8:	2601      	movs	r6, #1
    34ea:	e7a3      	b.n	3434 <nwkRouteDiscoveryRequestReceived+0x10>
	if (command->srcAddr == nwkIb.addr) {
    34ec:	7863      	ldrb	r3, [r4, #1]
    34ee:	78a0      	ldrb	r0, [r4, #2]
    34f0:	0200      	lsls	r0, r0, #8
    34f2:	4318      	orrs	r0, r3
    34f4:	4b04      	ldr	r3, [pc, #16]	; (3508 <nwkRouteDiscoveryRequestReceived+0xe4>)
    34f6:	881b      	ldrh	r3, [r3, #0]
    34f8:	4298      	cmp	r0, r3
    34fa:	d0f5      	beq.n	34e8 <nwkRouteDiscoveryRequestReceived+0xc4>
	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
    34fc:	b21b      	sxth	r3, r3
    34fe:	2b00      	cmp	r3, #0
    3500:	dbee      	blt.n	34e0 <nwkRouteDiscoveryRequestReceived+0xbc>
    3502:	2600      	movs	r6, #0
    3504:	e7ad      	b.n	3462 <nwkRouteDiscoveryRequestReceived+0x3e>
    3506:	46c0      	nop			; (mov r8, r8)
    3508:	20000e94 	.word	0x20000e94
    350c:	0000312d 	.word	0x0000312d
    3510:	0000326d 	.word	0x0000326d
    3514:	00003169 	.word	0x00003169
    3518:	00002ee9 	.word	0x00002ee9
    351c:	000032f9 	.word	0x000032f9

00003520 <nwkRouteDiscoveryReplyReceived>:
{
    3520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3522:	0005      	movs	r5, r0
	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
    3524:	7b03      	ldrb	r3, [r0, #12]
		return false;
    3526:	2000      	movs	r0, #0
	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
    3528:	2b08      	cmp	r3, #8
    352a:	d000      	beq.n	352e <nwkRouteDiscoveryReplyReceived+0xe>
}
    352c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
    352e:	68ac      	ldr	r4, [r5, #8]
	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    3530:	7962      	ldrb	r2, [r4, #5]
    3532:	78e3      	ldrb	r3, [r4, #3]
    3534:	7921      	ldrb	r1, [r4, #4]
    3536:	0209      	lsls	r1, r1, #8
    3538:	4319      	orrs	r1, r3
    353a:	7863      	ldrb	r3, [r4, #1]
    353c:	78a0      	ldrb	r0, [r4, #2]
    353e:	0200      	lsls	r0, r0, #8
    3540:	4318      	orrs	r0, r3
    3542:	4b1d      	ldr	r3, [pc, #116]	; (35b8 <nwkRouteDiscoveryReplyReceived+0x98>)
    3544:	4798      	blx	r3
    3546:	1e06      	subs	r6, r0, #0
	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
    3548:	d034      	beq.n	35b4 <nwkRouteDiscoveryReplyReceived+0x94>
    354a:	79a3      	ldrb	r3, [r4, #6]
    354c:	7a42      	ldrb	r2, [r0, #9]
	return true;
    354e:	2001      	movs	r0, #1
	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
    3550:	429a      	cmp	r2, r3
    3552:	d2eb      	bcs.n	352c <nwkRouteDiscoveryReplyReceived+0xc>
	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
    3554:	79e0      	ldrb	r0, [r4, #7]
    3556:	7b6f      	ldrb	r7, [r5, #13]
		entry->reverseLinkQuality = command->forwardLinkQuality;
    3558:	7273      	strb	r3, [r6, #9]
		if (command->srcAddr == nwkIb.addr) {
    355a:	7862      	ldrb	r2, [r4, #1]
    355c:	78a1      	ldrb	r1, [r4, #2]
    355e:	0209      	lsls	r1, r1, #8
    3560:	4b16      	ldr	r3, [pc, #88]	; (35bc <nwkRouteDiscoveryReplyReceived+0x9c>)
    3562:	881b      	ldrh	r3, [r3, #0]
    3564:	4311      	orrs	r1, r2
    3566:	428b      	cmp	r3, r1
    3568:	d019      	beq.n	359e <nwkRouteDiscoveryReplyReceived+0x7e>
	return ((uint16_t)lqa * lqb) >> 8;
    356a:	4347      	muls	r7, r0
    356c:	0a3f      	lsrs	r7, r7, #8
			nwkRouteUpdateEntry(command->dstAddr,
    356e:	882a      	ldrh	r2, [r5, #0]
    3570:	7961      	ldrb	r1, [r4, #5]
    3572:	78e3      	ldrb	r3, [r4, #3]
    3574:	7920      	ldrb	r0, [r4, #4]
    3576:	0200      	lsls	r0, r0, #8
    3578:	4318      	orrs	r0, r3
    357a:	003b      	movs	r3, r7
    357c:	4d10      	ldr	r5, [pc, #64]	; (35c0 <nwkRouteDiscoveryReplyReceived+0xa0>)
    357e:	47a8      	blx	r5
			nwkRouteUpdateEntry(command->srcAddr, 0,
    3580:	7a33      	ldrb	r3, [r6, #8]
    3582:	88f2      	ldrh	r2, [r6, #6]
    3584:	7861      	ldrb	r1, [r4, #1]
    3586:	78a0      	ldrb	r0, [r4, #2]
    3588:	0200      	lsls	r0, r0, #8
    358a:	4308      	orrs	r0, r1
    358c:	2100      	movs	r1, #0
    358e:	47a8      	blx	r5
			nwkRouteDiscoverySendReply(entry,
    3590:	79a1      	ldrb	r1, [r4, #6]
    3592:	003a      	movs	r2, r7
    3594:	0030      	movs	r0, r6
    3596:	4b0b      	ldr	r3, [pc, #44]	; (35c4 <nwkRouteDiscoveryReplyReceived+0xa4>)
    3598:	4798      	blx	r3
	return true;
    359a:	2001      	movs	r0, #1
    359c:	e7c6      	b.n	352c <nwkRouteDiscoveryReplyReceived+0xc>
			nwkRouteUpdateEntry(command->dstAddr,
    359e:	79a3      	ldrb	r3, [r4, #6]
    35a0:	882a      	ldrh	r2, [r5, #0]
    35a2:	7961      	ldrb	r1, [r4, #5]
    35a4:	78e5      	ldrb	r5, [r4, #3]
    35a6:	7920      	ldrb	r0, [r4, #4]
    35a8:	0200      	lsls	r0, r0, #8
    35aa:	4328      	orrs	r0, r5
    35ac:	4c04      	ldr	r4, [pc, #16]	; (35c0 <nwkRouteDiscoveryReplyReceived+0xa0>)
    35ae:	47a0      	blx	r4
	return true;
    35b0:	2001      	movs	r0, #1
    35b2:	e7bb      	b.n	352c <nwkRouteDiscoveryReplyReceived+0xc>
    35b4:	2001      	movs	r0, #1
    35b6:	e7b9      	b.n	352c <nwkRouteDiscoveryReplyReceived+0xc>
    35b8:	0000312d 	.word	0x0000312d
    35bc:	20000e94 	.word	0x20000e94
    35c0:	00002ee9 	.word	0x00002ee9
    35c4:	000032f9 	.word	0x000032f9

000035c8 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    35c8:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    35ca:	7b02      	ldrb	r2, [r0, #12]
		return false;
    35cc:	2300      	movs	r3, #0
	if (ind->size < 1) {
    35ce:	2a00      	cmp	r2, #0
    35d0:	d00e      	beq.n	35f0 <nwkRxSeriveDataInd+0x28>
	}

	switch (ind->data[0]) {
    35d2:	6883      	ldr	r3, [r0, #8]
    35d4:	781b      	ldrb	r3, [r3, #0]
    35d6:	2b01      	cmp	r3, #1
    35d8:	d00c      	beq.n	35f4 <nwkRxSeriveDataInd+0x2c>
    35da:	2b00      	cmp	r3, #0
    35dc:	d005      	beq.n	35ea <nwkRxSeriveDataInd+0x22>
    35de:	2b02      	cmp	r3, #2
    35e0:	d00c      	beq.n	35fc <nwkRxSeriveDataInd+0x34>
    35e2:	2b03      	cmp	r3, #3
    35e4:	d00e      	beq.n	3604 <nwkRxSeriveDataInd+0x3c>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    35e6:	2300      	movs	r3, #0
    35e8:	e002      	b.n	35f0 <nwkRxSeriveDataInd+0x28>
		return nwkTxAckReceived(ind);
    35ea:	4b08      	ldr	r3, [pc, #32]	; (360c <nwkRxSeriveDataInd+0x44>)
    35ec:	4798      	blx	r3
    35ee:	0003      	movs	r3, r0
	}
}
    35f0:	0018      	movs	r0, r3
    35f2:	bd10      	pop	{r4, pc}
		return nwkRouteErrorReceived(ind);
    35f4:	4b06      	ldr	r3, [pc, #24]	; (3610 <nwkRxSeriveDataInd+0x48>)
    35f6:	4798      	blx	r3
    35f8:	0003      	movs	r3, r0
    35fa:	e7f9      	b.n	35f0 <nwkRxSeriveDataInd+0x28>
		return nwkRouteDiscoveryRequestReceived(ind);
    35fc:	4b05      	ldr	r3, [pc, #20]	; (3614 <nwkRxSeriveDataInd+0x4c>)
    35fe:	4798      	blx	r3
    3600:	0003      	movs	r3, r0
    3602:	e7f5      	b.n	35f0 <nwkRxSeriveDataInd+0x28>
		return nwkRouteDiscoveryReplyReceived(ind);
    3604:	4b04      	ldr	r3, [pc, #16]	; (3618 <nwkRxSeriveDataInd+0x50>)
    3606:	4798      	blx	r3
    3608:	0003      	movs	r3, r0
    360a:	e7f1      	b.n	35f0 <nwkRxSeriveDataInd+0x28>
    360c:	00003fad 	.word	0x00003fad
    3610:	00003105 	.word	0x00003105
    3614:	00003425 	.word	0x00003425
    3618:	00003521 	.word	0x00003521

0000361c <nwkRxDuplicateRejectionTimerHandler>:
{
    361c:	b570      	push	{r4, r5, r6, lr}
    361e:	490b      	ldr	r1, [pc, #44]	; (364c <nwkRxDuplicateRejectionTimerHandler+0x30>)
    3620:	1d0b      	adds	r3, r1, #4
    3622:	3131      	adds	r1, #49	; 0x31
    3624:	31ff      	adds	r1, #255	; 0xff
	bool restart = false;
    3626:	2400      	movs	r4, #0
			restart = true;
    3628:	2501      	movs	r5, #1
    362a:	e002      	b.n	3632 <nwkRxDuplicateRejectionTimerHandler+0x16>
    362c:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    362e:	428b      	cmp	r3, r1
    3630:	d006      	beq.n	3640 <nwkRxDuplicateRejectionTimerHandler+0x24>
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    3632:	781a      	ldrb	r2, [r3, #0]
    3634:	2a00      	cmp	r2, #0
    3636:	d0f9      	beq.n	362c <nwkRxDuplicateRejectionTimerHandler+0x10>
			nwkRxDuplicateRejectionTable[i].ttl--;
    3638:	3a01      	subs	r2, #1
    363a:	701a      	strb	r2, [r3, #0]
			restart = true;
    363c:	002c      	movs	r4, r5
    363e:	e7f5      	b.n	362c <nwkRxDuplicateRejectionTimerHandler+0x10>
	if (restart) {
    3640:	2c00      	cmp	r4, #0
    3642:	d100      	bne.n	3646 <nwkRxDuplicateRejectionTimerHandler+0x2a>
}
    3644:	bd70      	pop	{r4, r5, r6, pc}
		SYS_TimerStart(timer);
    3646:	4b02      	ldr	r3, [pc, #8]	; (3650 <nwkRxDuplicateRejectionTimerHandler+0x34>)
    3648:	4798      	blx	r3
}
    364a:	e7fb      	b.n	3644 <nwkRxDuplicateRejectionTimerHandler+0x28>
    364c:	20000bb0 	.word	0x20000bb0
    3650:	00004581 	.word	0x00004581

00003654 <nwkRxInit>:
{
    3654:	b510      	push	{r4, lr}
    3656:	4a0a      	ldr	r2, [pc, #40]	; (3680 <nwkRxInit+0x2c>)
    3658:	1d13      	adds	r3, r2, #4
    365a:	3231      	adds	r2, #49	; 0x31
    365c:	32ff      	adds	r2, #255	; 0xff
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    365e:	2100      	movs	r1, #0
    3660:	7019      	strb	r1, [r3, #0]
    3662:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    3664:	4293      	cmp	r3, r2
    3666:	d1fb      	bne.n	3660 <nwkRxInit+0xc>
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    3668:	4b06      	ldr	r3, [pc, #24]	; (3684 <nwkRxInit+0x30>)
    366a:	2264      	movs	r2, #100	; 0x64
    366c:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    366e:	2200      	movs	r2, #0
    3670:	731a      	strb	r2, [r3, #12]
		= nwkRxDuplicateRejectionTimerHandler;
    3672:	4a05      	ldr	r2, [pc, #20]	; (3688 <nwkRxInit+0x34>)
    3674:	611a      	str	r2, [r3, #16]
	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    3676:	4905      	ldr	r1, [pc, #20]	; (368c <nwkRxInit+0x38>)
    3678:	2000      	movs	r0, #0
    367a:	4b05      	ldr	r3, [pc, #20]	; (3690 <nwkRxInit+0x3c>)
    367c:	4798      	blx	r3
}
    367e:	bd10      	pop	{r4, pc}
    3680:	20000bb0 	.word	0x20000bb0
    3684:	20000cdc 	.word	0x20000cdc
    3688:	0000361d 	.word	0x0000361d
    368c:	000035c9 	.word	0x000035c9
    3690:	00002af1 	.word	0x00002af1

00003694 <PHY_DataInd>:
{
    3694:	b510      	push	{r4, lr}
    3696:	0004      	movs	r4, r0
	if (0x88 != ind->data[1] ||
    3698:	6803      	ldr	r3, [r0, #0]
    369a:	785a      	ldrb	r2, [r3, #1]
    369c:	2a88      	cmp	r2, #136	; 0x88
    369e:	d000      	beq.n	36a2 <PHY_DataInd+0xe>
}
    36a0:	bd10      	pop	{r4, pc}
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    36a2:	781b      	ldrb	r3, [r3, #0]
    36a4:	3a68      	subs	r2, #104	; 0x68
    36a6:	4393      	bics	r3, r2
    36a8:	2b41      	cmp	r3, #65	; 0x41
    36aa:	d1f9      	bne.n	36a0 <PHY_DataInd+0xc>
    36ac:	7903      	ldrb	r3, [r0, #4]
    36ae:	2b0f      	cmp	r3, #15
    36b0:	d9f6      	bls.n	36a0 <PHY_DataInd+0xc>
	if (NULL == (frame = nwkFrameAlloc())) {
    36b2:	4b0a      	ldr	r3, [pc, #40]	; (36dc <PHY_DataInd+0x48>)
    36b4:	4798      	blx	r3
    36b6:	2800      	cmp	r0, #0
    36b8:	d0f2      	beq.n	36a0 <PHY_DataInd+0xc>
	frame->state = NWK_RX_STATE_RECEIVED;
    36ba:	2320      	movs	r3, #32
    36bc:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    36be:	7923      	ldrb	r3, [r4, #4]
    36c0:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    36c2:	7962      	ldrb	r2, [r4, #5]
    36c4:	2385      	movs	r3, #133	; 0x85
    36c6:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    36c8:	2206      	movs	r2, #6
    36ca:	56a2      	ldrsb	r2, [r4, r2]
    36cc:	3301      	adds	r3, #1
    36ce:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    36d0:	3002      	adds	r0, #2
    36d2:	7922      	ldrb	r2, [r4, #4]
    36d4:	6821      	ldr	r1, [r4, #0]
    36d6:	4b02      	ldr	r3, [pc, #8]	; (36e0 <PHY_DataInd+0x4c>)
    36d8:	4798      	blx	r3
    36da:	e7e1      	b.n	36a0 <PHY_DataInd+0xc>
    36dc:	00002d15 	.word	0x00002d15
    36e0:	00005701 	.word	0x00005701

000036e4 <NWK_SetAckControl>:
	nwkRxAckControl = control;
    36e4:	4b01      	ldr	r3, [pc, #4]	; (36ec <NWK_SetAckControl+0x8>)
    36e6:	7018      	strb	r0, [r3, #0]
}
    36e8:	4770      	bx	lr
    36ea:	46c0      	nop			; (mov r8, r8)
    36ec:	20000bac 	.word	0x20000bac

000036f0 <nwkRxDecryptConf>:
	if (status) {
    36f0:	2900      	cmp	r1, #0
    36f2:	d102      	bne.n	36fa <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_FINISH;
    36f4:	2324      	movs	r3, #36	; 0x24
    36f6:	7003      	strb	r3, [r0, #0]
}
    36f8:	4770      	bx	lr
		frame->state = NWK_RX_STATE_INDICATE;
    36fa:	2322      	movs	r3, #34	; 0x22
    36fc:	7003      	strb	r3, [r0, #0]
    36fe:	e7fb      	b.n	36f8 <nwkRxDecryptConf+0x8>

00003700 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    3700:	b5f0      	push	{r4, r5, r6, r7, lr}
    3702:	46ce      	mov	lr, r9
    3704:	4647      	mov	r7, r8
    3706:	b580      	push	{r7, lr}
    3708:	b087      	sub	sp, #28
	NwkFrame_t *frame = NULL;
    370a:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    370c:	4d79      	ldr	r5, [pc, #484]	; (38f4 <nwkRxTaskHandler+0x1f4>)
		switch (frame->state) {
    370e:	4b7a      	ldr	r3, [pc, #488]	; (38f8 <nwkRxTaskHandler+0x1f8>)
    3710:	4698      	mov	r8, r3
	while (NULL != (frame = nwkFrameNext(frame))) {
    3712:	e0e1      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
	frame->state = NWK_RX_STATE_FINISH;
    3714:	2324      	movs	r3, #36	; 0x24
    3716:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast) {
    3718:	7ae2      	ldrb	r2, [r4, #11]
    371a:	0713      	lsls	r3, r2, #28
    371c:	d500      	bpl.n	3720 <nwkRxTaskHandler+0x20>
    371e:	e0db      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    3720:	7960      	ldrb	r0, [r4, #5]
    3722:	79a3      	ldrb	r3, [r4, #6]
    3724:	021b      	lsls	r3, r3, #8
    3726:	4303      	orrs	r3, r0
    3728:	4974      	ldr	r1, [pc, #464]	; (38fc <nwkRxTaskHandler+0x1fc>)
    372a:	428b      	cmp	r3, r1
    372c:	d018      	beq.n	3760 <nwkRxTaskHandler+0x60>
	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    372e:	7be0      	ldrb	r0, [r4, #15]
    3730:	7c23      	ldrb	r3, [r4, #16]
    3732:	021b      	lsls	r3, r3, #8
    3734:	4303      	orrs	r3, r0
    3736:	4971      	ldr	r1, [pc, #452]	; (38fc <nwkRxTaskHandler+0x1fc>)
    3738:	428b      	cmp	r3, r1
    373a:	d025      	beq.n	3788 <nwkRxTaskHandler+0x88>
	if (nwkIb.addr == header->nwkSrcAddr) {
    373c:	7b61      	ldrb	r1, [r4, #13]
    373e:	7ba3      	ldrb	r3, [r4, #14]
    3740:	021b      	lsls	r3, r3, #8
    3742:	4a6f      	ldr	r2, [pc, #444]	; (3900 <nwkRxTaskHandler+0x200>)
    3744:	8812      	ldrh	r2, [r2, #0]
    3746:	430b      	orrs	r3, r1
    3748:	429a      	cmp	r2, r3
    374a:	d100      	bne.n	374e <nwkRxTaskHandler+0x4e>
    374c:	e0c4      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
	nwkRouteFrameReceived(frame);
    374e:	0020      	movs	r0, r4
    3750:	4b6c      	ldr	r3, [pc, #432]	; (3904 <nwkRxTaskHandler+0x204>)
    3752:	4798      	blx	r3
    3754:	4b6c      	ldr	r3, [pc, #432]	; (3908 <nwkRxTaskHandler+0x208>)
    3756:	2200      	movs	r2, #0
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    3758:	2100      	movs	r1, #0
    375a:	9101      	str	r1, [sp, #4]
		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    375c:	1ca7      	adds	r7, r4, #2
    375e:	e03d      	b.n	37dc <nwkRxTaskHandler+0xdc>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    3760:	7be0      	ldrb	r0, [r4, #15]
    3762:	7c23      	ldrb	r3, [r4, #16]
    3764:	021b      	lsls	r3, r3, #8
    3766:	4303      	orrs	r3, r0
    3768:	4965      	ldr	r1, [pc, #404]	; (3900 <nwkRxTaskHandler+0x200>)
    376a:	8809      	ldrh	r1, [r1, #0]
    376c:	4299      	cmp	r1, r3
    376e:	d003      	beq.n	3778 <nwkRxTaskHandler+0x78>
    3770:	4962      	ldr	r1, [pc, #392]	; (38fc <nwkRxTaskHandler+0x1fc>)
    3772:	428b      	cmp	r3, r1
    3774:	d000      	beq.n	3778 <nwkRxTaskHandler+0x78>
    3776:	e0af      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
			if (header->nwkFcf.security) {
    3778:	0793      	lsls	r3, r2, #30
    377a:	d502      	bpl.n	3782 <nwkRxTaskHandler+0x82>
				frame->state = NWK_RX_STATE_DECRYPT;
    377c:	2321      	movs	r3, #33	; 0x21
    377e:	7023      	strb	r3, [r4, #0]
    3780:	e0aa      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
			frame->state = NWK_RX_STATE_INDICATE;
    3782:	2322      	movs	r3, #34	; 0x22
    3784:	7023      	strb	r3, [r4, #0]
    3786:	e0a7      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    3788:	07d3      	lsls	r3, r2, #31
    378a:	d5d7      	bpl.n	373c <nwkRxTaskHandler+0x3c>
    378c:	e0a4      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
				entry->mask |= (1 << diff);
    378e:	9800      	ldr	r0, [sp, #0]
    3790:	0041      	lsls	r1, r0, #1
    3792:	1808      	adds	r0, r1, r0
    3794:	0040      	lsls	r0, r0, #1
    3796:	495c      	ldr	r1, [pc, #368]	; (3908 <nwkRxTaskHandler+0x208>)
    3798:	1808      	adds	r0, r1, r0
    379a:	2101      	movs	r1, #1
    379c:	4099      	lsls	r1, r3
    379e:	430a      	orrs	r2, r1
    37a0:	70c2      	strb	r2, [r0, #3]
    37a2:	e062      	b.n	386a <nwkRxTaskHandler+0x16a>
				entry->seq = header->nwkSeq;
    37a4:	4a58      	ldr	r2, [pc, #352]	; (3908 <nwkRxTaskHandler+0x208>)
    37a6:	4694      	mov	ip, r2
    37a8:	9800      	ldr	r0, [sp, #0]
    37aa:	0047      	lsls	r7, r0, #1
    37ac:	183a      	adds	r2, r7, r0
    37ae:	0052      	lsls	r2, r2, #1
    37b0:	4462      	add	r2, ip
    37b2:	7091      	strb	r1, [r2, #2]
				entry->mask = (entry->mask << shift) | 1;
    37b4:	78d1      	ldrb	r1, [r2, #3]
				uint8_t shift = -(int8_t)diff;
    37b6:	425b      	negs	r3, r3
				entry->mask = (entry->mask << shift) | 1;
    37b8:	b2db      	uxtb	r3, r3
    37ba:	4099      	lsls	r1, r3
    37bc:	000b      	movs	r3, r1
    37be:	2101      	movs	r1, #1
    37c0:	430b      	orrs	r3, r1
    37c2:	70d3      	strb	r3, [r2, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    37c4:	4681      	mov	r9, r0
    37c6:	444f      	add	r7, r9
    37c8:	007f      	lsls	r7, r7, #1
    37ca:	4467      	add	r7, ip
    37cc:	2315      	movs	r3, #21
    37ce:	713b      	strb	r3, [r7, #4]
    37d0:	e04b      	b.n	386a <nwkRxTaskHandler+0x16a>
			freeEntry = entry;
    37d2:	9301      	str	r3, [sp, #4]
    37d4:	3201      	adds	r2, #1
    37d6:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    37d8:	2a32      	cmp	r2, #50	; 0x32
    37da:	d035      	beq.n	3848 <nwkRxTaskHandler+0x148>
		entry = &nwkRxDuplicateRejectionTable[i];
    37dc:	9200      	str	r2, [sp, #0]
		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    37de:	7919      	ldrb	r1, [r3, #4]
    37e0:	2900      	cmp	r1, #0
    37e2:	d0f6      	beq.n	37d2 <nwkRxTaskHandler+0xd2>
    37e4:	7af9      	ldrb	r1, [r7, #11]
    37e6:	4689      	mov	r9, r1
    37e8:	7b39      	ldrb	r1, [r7, #12]
    37ea:	0209      	lsls	r1, r1, #8
    37ec:	8818      	ldrh	r0, [r3, #0]
    37ee:	464e      	mov	r6, r9
    37f0:	4331      	orrs	r1, r6
    37f2:	4288      	cmp	r0, r1
    37f4:	d1ee      	bne.n	37d4 <nwkRxTaskHandler+0xd4>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    37f6:	7b21      	ldrb	r1, [r4, #12]
    37f8:	0010      	movs	r0, r2
    37fa:	0053      	lsls	r3, r2, #1
    37fc:	4694      	mov	ip, r2
    37fe:	4463      	add	r3, ip
    3800:	005b      	lsls	r3, r3, #1
    3802:	4a41      	ldr	r2, [pc, #260]	; (3908 <nwkRxTaskHandler+0x208>)
    3804:	18d3      	adds	r3, r2, r3
    3806:	789b      	ldrb	r3, [r3, #2]
    3808:	1a5b      	subs	r3, r3, r1
    380a:	b2db      	uxtb	r3, r3
			if (diff < 8) {
    380c:	2b07      	cmp	r3, #7
    380e:	d8c9      	bhi.n	37a4 <nwkRxTaskHandler+0xa4>
				if (entry->mask & (1 << diff)) {
    3810:	0042      	lsls	r2, r0, #1
    3812:	4462      	add	r2, ip
    3814:	0052      	lsls	r2, r2, #1
    3816:	493c      	ldr	r1, [pc, #240]	; (3908 <nwkRxTaskHandler+0x208>)
    3818:	188a      	adds	r2, r1, r2
    381a:	78d2      	ldrb	r2, [r2, #3]
    381c:	0011      	movs	r1, r2
    381e:	4119      	asrs	r1, r3
    3820:	07c9      	lsls	r1, r1, #31
    3822:	d5b4      	bpl.n	378e <nwkRxTaskHandler+0x8e>
					if (nwkIb.addr == header->macDstAddr) {
    3824:	79e1      	ldrb	r1, [r4, #7]
    3826:	7a23      	ldrb	r3, [r4, #8]
    3828:	021b      	lsls	r3, r3, #8
    382a:	4a35      	ldr	r2, [pc, #212]	; (3900 <nwkRxTaskHandler+0x200>)
    382c:	8812      	ldrh	r2, [r2, #0]
    382e:	430b      	orrs	r3, r1
    3830:	429a      	cmp	r2, r3
    3832:	d151      	bne.n	38d8 <nwkRxTaskHandler+0x1d8>
								header->nwkFcf.multicast);
    3834:	7ae1      	ldrb	r1, [r4, #11]
    3836:	0709      	lsls	r1, r1, #28
						nwkRouteRemove(
    3838:	0fc9      	lsrs	r1, r1, #31
    383a:	7be2      	ldrb	r2, [r4, #15]
    383c:	7c20      	ldrb	r0, [r4, #16]
    383e:	0200      	lsls	r0, r0, #8
    3840:	4310      	orrs	r0, r2
    3842:	4b32      	ldr	r3, [pc, #200]	; (390c <nwkRxTaskHandler+0x20c>)
    3844:	4798      	blx	r3
    3846:	e047      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
	if (NULL == freeEntry) {
    3848:	9801      	ldr	r0, [sp, #4]
    384a:	2800      	cmp	r0, #0
    384c:	d044      	beq.n	38d8 <nwkRxTaskHandler+0x1d8>
	freeEntry->src = header->nwkSrcAddr;
    384e:	7b61      	ldrb	r1, [r4, #13]
    3850:	7ba3      	ldrb	r3, [r4, #14]
    3852:	021b      	lsls	r3, r3, #8
    3854:	430b      	orrs	r3, r1
    3856:	8003      	strh	r3, [r0, #0]
	freeEntry->seq = header->nwkSeq;
    3858:	7b23      	ldrb	r3, [r4, #12]
    385a:	7083      	strb	r3, [r0, #2]
	freeEntry->mask = 1;
    385c:	2301      	movs	r3, #1
    385e:	70c3      	strb	r3, [r0, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    3860:	3314      	adds	r3, #20
    3862:	7103      	strb	r3, [r0, #4]
	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    3864:	482a      	ldr	r0, [pc, #168]	; (3910 <nwkRxTaskHandler+0x210>)
    3866:	4b2b      	ldr	r3, [pc, #172]	; (3914 <nwkRxTaskHandler+0x214>)
    3868:	4798      	blx	r3
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    386a:	79e1      	ldrb	r1, [r4, #7]
    386c:	7a23      	ldrb	r3, [r4, #8]
    386e:	021b      	lsls	r3, r3, #8
    3870:	430b      	orrs	r3, r1
    3872:	4a22      	ldr	r2, [pc, #136]	; (38fc <nwkRxTaskHandler+0x1fc>)
    3874:	4293      	cmp	r3, r2
    3876:	d013      	beq.n	38a0 <nwkRxTaskHandler+0x1a0>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    3878:	4b21      	ldr	r3, [pc, #132]	; (3900 <nwkRxTaskHandler+0x200>)
    387a:	881a      	ldrh	r2, [r3, #0]
    387c:	7be0      	ldrb	r0, [r4, #15]
    387e:	7c23      	ldrb	r3, [r4, #16]
    3880:	021b      	lsls	r3, r3, #8
    3882:	4303      	orrs	r3, r0
    3884:	429a      	cmp	r2, r3
    3886:	d01a      	beq.n	38be <nwkRxTaskHandler+0x1be>
    3888:	491c      	ldr	r1, [pc, #112]	; (38fc <nwkRxTaskHandler+0x1fc>)
    388a:	428b      	cmp	r3, r1
    388c:	d017      	beq.n	38be <nwkRxTaskHandler+0x1be>
		else if (nwkIb.addr == header->macDstAddr) {
    388e:	79e0      	ldrb	r0, [r4, #7]
    3890:	7a23      	ldrb	r3, [r4, #8]
    3892:	021b      	lsls	r3, r3, #8
    3894:	4303      	orrs	r3, r0
    3896:	4293      	cmp	r3, r2
    3898:	d11e      	bne.n	38d8 <nwkRxTaskHandler+0x1d8>
			frame->state = NWK_RX_STATE_ROUTE;
    389a:	2323      	movs	r3, #35	; 0x23
    389c:	7023      	strb	r3, [r4, #0]
    389e:	e01b      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    38a0:	4b17      	ldr	r3, [pc, #92]	; (3900 <nwkRxTaskHandler+0x200>)
    38a2:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    38a4:	7be0      	ldrb	r0, [r4, #15]
    38a6:	7c23      	ldrb	r3, [r4, #16]
    38a8:	021b      	lsls	r3, r3, #8
    38aa:	4303      	orrs	r3, r0
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    38ac:	429a      	cmp	r2, r3
    38ae:	d006      	beq.n	38be <nwkRxTaskHandler+0x1be>
				0 == header->nwkFcf.linkLocal) {
    38b0:	7ae1      	ldrb	r1, [r4, #11]
				header->nwkDstAddr &&
    38b2:	0749      	lsls	r1, r1, #29
    38b4:	d4e8      	bmi.n	3888 <nwkRxTaskHandler+0x188>
			nwkTxBroadcastFrame(frame);
    38b6:	0020      	movs	r0, r4
    38b8:	4b17      	ldr	r3, [pc, #92]	; (3918 <nwkRxTaskHandler+0x218>)
    38ba:	4798      	blx	r3
    38bc:	e7dc      	b.n	3878 <nwkRxTaskHandler+0x178>
			if (header->nwkFcf.security) {
    38be:	7ae3      	ldrb	r3, [r4, #11]
    38c0:	079b      	lsls	r3, r3, #30
    38c2:	d502      	bpl.n	38ca <nwkRxTaskHandler+0x1ca>
				frame->state = NWK_RX_STATE_DECRYPT;
    38c4:	2321      	movs	r3, #33	; 0x21
    38c6:	7023      	strb	r3, [r4, #0]
    38c8:	e006      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
			frame->state = NWK_RX_STATE_INDICATE;
    38ca:	2322      	movs	r3, #34	; 0x22
    38cc:	7023      	strb	r3, [r4, #0]
    38ce:	e003      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    38d0:	2100      	movs	r1, #0
    38d2:	0020      	movs	r0, r4
    38d4:	4b11      	ldr	r3, [pc, #68]	; (391c <nwkRxTaskHandler+0x21c>)
    38d6:	4798      	blx	r3
	while (NULL != (frame = nwkFrameNext(frame))) {
    38d8:	0020      	movs	r0, r4
    38da:	47a8      	blx	r5
    38dc:	1e04      	subs	r4, r0, #0
    38de:	d100      	bne.n	38e2 <nwkRxTaskHandler+0x1e2>
    38e0:	e0f4      	b.n	3acc <nwkRxTaskHandler+0x3cc>
		switch (frame->state) {
    38e2:	7823      	ldrb	r3, [r4, #0]
    38e4:	3b20      	subs	r3, #32
    38e6:	b2da      	uxtb	r2, r3
    38e8:	2a04      	cmp	r2, #4
    38ea:	d8f5      	bhi.n	38d8 <nwkRxTaskHandler+0x1d8>
    38ec:	0093      	lsls	r3, r2, #2
    38ee:	4642      	mov	r2, r8
    38f0:	58d3      	ldr	r3, [r2, r3]
    38f2:	469f      	mov	pc, r3
    38f4:	00002d99 	.word	0x00002d99
    38f8:	00006044 	.word	0x00006044
    38fc:	0000ffff 	.word	0x0000ffff
    3900:	20000e94 	.word	0x20000e94
    3904:	00002f45 	.word	0x00002f45
    3908:	20000bb0 	.word	0x20000bb0
    390c:	00002f2d 	.word	0x00002f2d
    3910:	20000cdc 	.word	0x20000cdc
    3914:	00004581 	.word	0x00004581
    3918:	00003f25 	.word	0x00003f25
    391c:	00003b29 	.word	0x00003b29
	nwkRxAckControl = 0;
    3920:	2200      	movs	r2, #0
    3922:	4b6d      	ldr	r3, [pc, #436]	; (3ad8 <nwkRxTaskHandler+0x3d8>)
    3924:	701a      	strb	r2, [r3, #0]
	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    3926:	7c63      	ldrb	r3, [r4, #17]
    3928:	091b      	lsrs	r3, r3, #4
    392a:	469c      	mov	ip, r3
    392c:	466a      	mov	r2, sp
    392e:	7013      	strb	r3, [r2, #0]
    3930:	7813      	ldrb	r3, [r2, #0]
    3932:	3302      	adds	r3, #2
    3934:	009b      	lsls	r3, r3, #2
    3936:	4a69      	ldr	r2, [pc, #420]	; (3adc <nwkRxTaskHandler+0x3dc>)
    3938:	5899      	ldr	r1, [r3, r2]
    393a:	2900      	cmp	r1, #0
    393c:	d100      	bne.n	3940 <nwkRxTaskHandler+0x240>
    393e:	e0af      	b.n	3aa0 <nwkRxTaskHandler+0x3a0>
	ind.srcAddr = header->nwkSrcAddr;
    3940:	1ca0      	adds	r0, r4, #2
    3942:	7b62      	ldrb	r2, [r4, #13]
    3944:	7ba3      	ldrb	r3, [r4, #14]
    3946:	021b      	lsls	r3, r3, #8
    3948:	4313      	orrs	r3, r2
    394a:	aa02      	add	r2, sp, #8
    394c:	8013      	strh	r3, [r2, #0]
	ind.dstAddr = header->nwkDstAddr;
    394e:	7be2      	ldrb	r2, [r4, #15]
    3950:	7c27      	ldrb	r7, [r4, #16]
    3952:	023f      	lsls	r7, r7, #8
    3954:	4317      	orrs	r7, r2
    3956:	aa02      	add	r2, sp, #8
    3958:	8057      	strh	r7, [r2, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    395a:	7c62      	ldrb	r2, [r4, #17]
    395c:	0712      	lsls	r2, r2, #28
    395e:	0f12      	lsrs	r2, r2, #28
    3960:	ae02      	add	r6, sp, #8
    3962:	7132      	strb	r2, [r6, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    3964:	0032      	movs	r2, r6
    3966:	4666      	mov	r6, ip
    3968:	7156      	strb	r6, [r2, #5]
	ind.data = frame->payload;
    396a:	2281      	movs	r2, #129	; 0x81
    396c:	5ca2      	ldrb	r2, [r4, r2]
    396e:	4694      	mov	ip, r2
    3970:	2282      	movs	r2, #130	; 0x82
    3972:	5ca2      	ldrb	r2, [r4, r2]
    3974:	0212      	lsls	r2, r2, #8
    3976:	4666      	mov	r6, ip
    3978:	4316      	orrs	r6, r2
    397a:	2283      	movs	r2, #131	; 0x83
    397c:	5ca2      	ldrb	r2, [r4, r2]
    397e:	0412      	lsls	r2, r2, #16
    3980:	4316      	orrs	r6, r2
    3982:	2284      	movs	r2, #132	; 0x84
    3984:	5ca2      	ldrb	r2, [r4, r2]
    3986:	0612      	lsls	r2, r2, #24
    3988:	4332      	orrs	r2, r6
    398a:	9204      	str	r2, [sp, #16]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    398c:	1a12      	subs	r2, r2, r0
    398e:	7866      	ldrb	r6, [r4, #1]
    3990:	1ab2      	subs	r2, r6, r2
	ind.size = nwkFramePayloadSize(frame);
    3992:	ae02      	add	r6, sp, #8
    3994:	7332      	strb	r2, [r6, #12]
	ind.lqi = frame->rx.lqi;
    3996:	2285      	movs	r2, #133	; 0x85
    3998:	5ca2      	ldrb	r2, [r4, r2]
    399a:	7372      	strb	r2, [r6, #13]
	ind.rssi = frame->rx.rssi;
    399c:	2286      	movs	r2, #134	; 0x86
    399e:	5ca2      	ldrb	r2, [r4, r2]
    39a0:	73b2      	strb	r2, [r6, #14]
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    39a2:	7ae0      	ldrb	r0, [r4, #11]
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    39a4:	2203      	movs	r2, #3
    39a6:	4002      	ands	r2, r0
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    39a8:	0746      	lsls	r6, r0, #29
    39aa:	0ff6      	lsrs	r6, r6, #31
    39ac:	0176      	lsls	r6, r6, #5
    39ae:	4332      	orrs	r2, r6
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    39b0:	0700      	lsls	r0, r0, #28
    39b2:	0fc0      	lsrs	r0, r0, #31
    39b4:	0180      	lsls	r0, r0, #6
    39b6:	4310      	orrs	r0, r2
		|= (NWK_BROADCAST_ADDR ==
    39b8:	4a49      	ldr	r2, [pc, #292]	; (3ae0 <nwkRxTaskHandler+0x3e0>)
    39ba:	4694      	mov	ip, r2
    39bc:	4467      	add	r7, ip
    39be:	427a      	negs	r2, r7
    39c0:	4157      	adcs	r7, r2
    39c2:	00bf      	lsls	r7, r7, #2
    39c4:	4338      	orrs	r0, r7
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    39c6:	1ca7      	adds	r7, r4, #2
    39c8:	7a62      	ldrb	r2, [r4, #9]
    39ca:	4694      	mov	ip, r2
    39cc:	7aa2      	ldrb	r2, [r4, #10]
    39ce:	0212      	lsls	r2, r2, #8
		|= (header->nwkSrcAddr ==
    39d0:	4666      	mov	r6, ip
    39d2:	4332      	orrs	r2, r6
    39d4:	1a9b      	subs	r3, r3, r2
    39d6:	425a      	negs	r2, r3
    39d8:	4153      	adcs	r3, r2
    39da:	00db      	lsls	r3, r3, #3
    39dc:	4303      	orrs	r3, r0
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    39de:	0038      	movs	r0, r7
    39e0:	78ff      	ldrb	r7, [r7, #3]
    39e2:	7902      	ldrb	r2, [r0, #4]
    39e4:	0212      	lsls	r2, r2, #8
		|= (NWK_BROADCAST_PANID ==
    39e6:	433a      	orrs	r2, r7
    39e8:	483d      	ldr	r0, [pc, #244]	; (3ae0 <nwkRxTaskHandler+0x3e0>)
    39ea:	4684      	mov	ip, r0
    39ec:	4462      	add	r2, ip
    39ee:	4250      	negs	r0, r2
    39f0:	4142      	adcs	r2, r0
    39f2:	0112      	lsls	r2, r2, #4
    39f4:	431a      	orrs	r2, r3
    39f6:	ab02      	add	r3, sp, #8
    39f8:	719a      	strb	r2, [r3, #6]
	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    39fa:	0018      	movs	r0, r3
    39fc:	4788      	blx	r1
	if (0 == frame->header.nwkFcf.ackRequest) {
    39fe:	7ae2      	ldrb	r2, [r4, #11]
		ack = false;
    3a00:	07d3      	lsls	r3, r2, #31
    3a02:	17db      	asrs	r3, r3, #31
    3a04:	4018      	ands	r0, r3
	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    3a06:	79e1      	ldrb	r1, [r4, #7]
    3a08:	7a23      	ldrb	r3, [r4, #8]
    3a0a:	021b      	lsls	r3, r3, #8
    3a0c:	430b      	orrs	r3, r1
    3a0e:	4935      	ldr	r1, [pc, #212]	; (3ae4 <nwkRxTaskHandler+0x3e4>)
    3a10:	428b      	cmp	r3, r1
    3a12:	d047      	beq.n	3aa4 <nwkRxTaskHandler+0x3a4>
	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    3a14:	7962      	ldrb	r2, [r4, #5]
    3a16:	79a3      	ldrb	r3, [r4, #6]
    3a18:	021b      	lsls	r3, r3, #8
    3a1a:	4313      	orrs	r3, r2
    3a1c:	4a31      	ldr	r2, [pc, #196]	; (3ae4 <nwkRxTaskHandler+0x3e4>)
    3a1e:	4293      	cmp	r3, r2
    3a20:	d03b      	beq.n	3a9a <nwkRxTaskHandler+0x39a>
	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    3a22:	4b2e      	ldr	r3, [pc, #184]	; (3adc <nwkRxTaskHandler+0x3dc>)
    3a24:	881a      	ldrh	r2, [r3, #0]
    3a26:	4b2f      	ldr	r3, [pc, #188]	; (3ae4 <nwkRxTaskHandler+0x3e4>)
    3a28:	429a      	cmp	r2, r3
    3a2a:	d036      	beq.n	3a9a <nwkRxTaskHandler+0x39a>
	if (ack) {
    3a2c:	2800      	cmp	r0, #0
    3a2e:	d034      	beq.n	3a9a <nwkRxTaskHandler+0x39a>
	if (NULL == (ack = nwkFrameAlloc())) {
    3a30:	4b2d      	ldr	r3, [pc, #180]	; (3ae8 <nwkRxTaskHandler+0x3e8>)
    3a32:	4798      	blx	r3
    3a34:	1e07      	subs	r7, r0, #0
    3a36:	d030      	beq.n	3a9a <nwkRxTaskHandler+0x39a>
	nwkFrameCommandInit(ack);
    3a38:	4b2c      	ldr	r3, [pc, #176]	; (3aec <nwkRxTaskHandler+0x3ec>)
    3a3a:	4798      	blx	r3
	ack->size += sizeof(NwkCommandAck_t);
    3a3c:	787b      	ldrb	r3, [r7, #1]
    3a3e:	3303      	adds	r3, #3
    3a40:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    3a42:	2200      	movs	r2, #0
    3a44:	2389      	movs	r3, #137	; 0x89
    3a46:	54fa      	strb	r2, [r7, r3]
    3a48:	003b      	movs	r3, r7
    3a4a:	3389      	adds	r3, #137	; 0x89
    3a4c:	705a      	strb	r2, [r3, #1]
    3a4e:	709a      	strb	r2, [r3, #2]
    3a50:	70da      	strb	r2, [r3, #3]
	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    3a52:	7ae3      	ldrb	r3, [r4, #11]
    3a54:	3202      	adds	r2, #2
    3a56:	401a      	ands	r2, r3
    3a58:	7afb      	ldrb	r3, [r7, #11]
    3a5a:	2102      	movs	r1, #2
    3a5c:	438b      	bics	r3, r1
    3a5e:	4313      	orrs	r3, r2
    3a60:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    3a62:	7b62      	ldrb	r2, [r4, #13]
    3a64:	7ba3      	ldrb	r3, [r4, #14]
    3a66:	73fa      	strb	r2, [r7, #15]
    3a68:	743b      	strb	r3, [r7, #16]
	command = (NwkCommandAck_t *)ack->payload;
    3a6a:	2381      	movs	r3, #129	; 0x81
    3a6c:	5cfb      	ldrb	r3, [r7, r3]
    3a6e:	2282      	movs	r2, #130	; 0x82
    3a70:	5cba      	ldrb	r2, [r7, r2]
    3a72:	0212      	lsls	r2, r2, #8
    3a74:	431a      	orrs	r2, r3
    3a76:	2383      	movs	r3, #131	; 0x83
    3a78:	5cfb      	ldrb	r3, [r7, r3]
    3a7a:	041b      	lsls	r3, r3, #16
    3a7c:	431a      	orrs	r2, r3
    3a7e:	2384      	movs	r3, #132	; 0x84
    3a80:	5cfb      	ldrb	r3, [r7, r3]
    3a82:	061b      	lsls	r3, r3, #24
    3a84:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    3a86:	2200      	movs	r2, #0
    3a88:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    3a8a:	4a13      	ldr	r2, [pc, #76]	; (3ad8 <nwkRxTaskHandler+0x3d8>)
    3a8c:	7812      	ldrb	r2, [r2, #0]
    3a8e:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    3a90:	7b22      	ldrb	r2, [r4, #12]
    3a92:	705a      	strb	r2, [r3, #1]
	nwkTxFrame(ack);
    3a94:	0038      	movs	r0, r7
    3a96:	4b16      	ldr	r3, [pc, #88]	; (3af0 <nwkRxTaskHandler+0x3f0>)
    3a98:	4798      	blx	r3
	frame->state = NWK_RX_STATE_FINISH;
    3a9a:	2324      	movs	r3, #36	; 0x24
    3a9c:	7023      	strb	r3, [r4, #0]
    3a9e:	e71b      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
		return false;
    3aa0:	2000      	movs	r0, #0
    3aa2:	e7ac      	b.n	39fe <nwkRxTaskHandler+0x2fe>
			nwkIb.addr == frame->header.nwkDstAddr &&
    3aa4:	7be7      	ldrb	r7, [r4, #15]
    3aa6:	7c23      	ldrb	r3, [r4, #16]
    3aa8:	021b      	lsls	r3, r3, #8
	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    3aaa:	490c      	ldr	r1, [pc, #48]	; (3adc <nwkRxTaskHandler+0x3dc>)
    3aac:	8809      	ldrh	r1, [r1, #0]
    3aae:	433b      	orrs	r3, r7
    3ab0:	4299      	cmp	r1, r3
    3ab2:	d1af      	bne.n	3a14 <nwkRxTaskHandler+0x314>
			nwkIb.addr == frame->header.nwkDstAddr &&
    3ab4:	0713      	lsls	r3, r2, #28
    3ab6:	d4ad      	bmi.n	3a14 <nwkRxTaskHandler+0x314>
		ack = true;
    3ab8:	2001      	movs	r0, #1
    3aba:	e7ab      	b.n	3a14 <nwkRxTaskHandler+0x314>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    3abc:	0020      	movs	r0, r4
    3abe:	4b0d      	ldr	r3, [pc, #52]	; (3af4 <nwkRxTaskHandler+0x3f4>)
    3ac0:	4798      	blx	r3
		}
		break;
    3ac2:	e709      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    3ac4:	0020      	movs	r0, r4
    3ac6:	4b0c      	ldr	r3, [pc, #48]	; (3af8 <nwkRxTaskHandler+0x3f8>)
    3ac8:	4798      	blx	r3
		}
		break;
    3aca:	e705      	b.n	38d8 <nwkRxTaskHandler+0x1d8>
		}
	}
}
    3acc:	b007      	add	sp, #28
    3ace:	bc0c      	pop	{r2, r3}
    3ad0:	4690      	mov	r8, r2
    3ad2:	4699      	mov	r9, r3
    3ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ad6:	46c0      	nop			; (mov r8, r8)
    3ad8:	20000bac 	.word	0x20000bac
    3adc:	20000e94 	.word	0x20000e94
    3ae0:	ffff0001 	.word	0xffff0001
    3ae4:	0000ffff 	.word	0x0000ffff
    3ae8:	00002d15 	.word	0x00002d15
    3aec:	00002ddd 	.word	0x00002ddd
    3af0:	00003e69 	.word	0x00003e69
    3af4:	00003035 	.word	0x00003035
    3af8:	00002d85 	.word	0x00002d85

00003afc <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    3afc:	2300      	movs	r3, #0
    3afe:	4a02      	ldr	r2, [pc, #8]	; (3b08 <nwkSecurityInit+0xc>)
    3b00:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    3b02:	4a02      	ldr	r2, [pc, #8]	; (3b0c <nwkSecurityInit+0x10>)
    3b04:	6013      	str	r3, [r2, #0]
}
    3b06:	4770      	bx	lr
    3b08:	20000cf4 	.word	0x20000cf4
    3b0c:	20000cf0 	.word	0x20000cf0

00003b10 <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    3b10:	b510      	push	{r4, lr}
    3b12:	0001      	movs	r1, r0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    3b14:	2210      	movs	r2, #16
    3b16:	4802      	ldr	r0, [pc, #8]	; (3b20 <NWK_SetSecurityKey+0x10>)
    3b18:	4b02      	ldr	r3, [pc, #8]	; (3b24 <NWK_SetSecurityKey+0x14>)
    3b1a:	4798      	blx	r3
}
    3b1c:	bd10      	pop	{r4, pc}
    3b1e:	46c0      	nop			; (mov r8, r8)
    3b20:	20000edc 	.word	0x20000edc
    3b24:	00005701 	.word	0x00005701

00003b28 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    3b28:	2900      	cmp	r1, #0
    3b2a:	d106      	bne.n	3b3a <nwkSecurityProcess+0x12>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    3b2c:	2331      	movs	r3, #49	; 0x31
    3b2e:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    3b30:	4a03      	ldr	r2, [pc, #12]	; (3b40 <nwkSecurityProcess+0x18>)
    3b32:	7813      	ldrb	r3, [r2, #0]
    3b34:	3301      	adds	r3, #1
    3b36:	7013      	strb	r3, [r2, #0]
}
    3b38:	4770      	bx	lr
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    3b3a:	2330      	movs	r3, #48	; 0x30
    3b3c:	7003      	strb	r3, [r0, #0]
    3b3e:	e7f7      	b.n	3b30 <nwkSecurityProcess+0x8>
    3b40:	20000cf4 	.word	0x20000cf4

00003b44 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    3b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b46:	46c6      	mov	lr, r8
    3b48:	b500      	push	{lr}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    3b4a:	4b25      	ldr	r3, [pc, #148]	; (3be0 <SYS_EncryptConf+0x9c>)
    3b4c:	681b      	ldr	r3, [r3, #0]
    3b4e:	469c      	mov	ip, r3
    3b50:	2381      	movs	r3, #129	; 0x81
    3b52:	4662      	mov	r2, ip
    3b54:	5cd1      	ldrb	r1, [r2, r3]
    3b56:	3301      	adds	r3, #1
    3b58:	5cd3      	ldrb	r3, [r2, r3]
    3b5a:	021b      	lsls	r3, r3, #8
    3b5c:	4319      	orrs	r1, r3
    3b5e:	2383      	movs	r3, #131	; 0x83
    3b60:	5cd3      	ldrb	r3, [r2, r3]
    3b62:	041b      	lsls	r3, r3, #16
    3b64:	430b      	orrs	r3, r1
    3b66:	2284      	movs	r2, #132	; 0x84
    3b68:	4661      	mov	r1, ip
    3b6a:	5c89      	ldrb	r1, [r1, r2]
    3b6c:	0609      	lsls	r1, r1, #24
    3b6e:	4319      	orrs	r1, r3
    3b70:	4b1c      	ldr	r3, [pc, #112]	; (3be4 <SYS_EncryptConf+0xa0>)
    3b72:	781b      	ldrb	r3, [r3, #0]
    3b74:	4698      	mov	r8, r3
	uint8_t block;

	block
		= (nwkSecuritySize <
    3b76:	4b1c      	ldr	r3, [pc, #112]	; (3be8 <SYS_EncryptConf+0xa4>)
    3b78:	781e      	ldrb	r6, [r3, #0]
    3b7a:	1c37      	adds	r7, r6, #0
    3b7c:	2e10      	cmp	r6, #16
    3b7e:	d900      	bls.n	3b82 <SYS_EncryptConf+0x3e>
    3b80:	2710      	movs	r7, #16
    3b82:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    3b84:	2f00      	cmp	r7, #0
    3b86:	d017      	beq.n	3bb8 <SYS_EncryptConf+0x74>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    3b88:	4b18      	ldr	r3, [pc, #96]	; (3bec <SYS_EncryptConf+0xa8>)
    3b8a:	781d      	ldrb	r5, [r3, #0]
    3b8c:	4441      	add	r1, r8
    3b8e:	4a18      	ldr	r2, [pc, #96]	; (3bf0 <SYS_EncryptConf+0xac>)
    3b90:	1e7c      	subs	r4, r7, #1
    3b92:	b2e4      	uxtb	r4, r4
    3b94:	3401      	adds	r4, #1
    3b96:	1914      	adds	r4, r2, r4
    3b98:	e006      	b.n	3ba8 <SYS_EncryptConf+0x64>
			vector[i] = text[i];
		} else {
			vector[i] ^= text[i];
    3b9a:	7810      	ldrb	r0, [r2, #0]
    3b9c:	4043      	eors	r3, r0
    3b9e:	7013      	strb	r3, [r2, #0]
    3ba0:	3101      	adds	r1, #1
    3ba2:	3201      	adds	r2, #1
	for (uint8_t i = 0; i < block; i++) {
    3ba4:	42a2      	cmp	r2, r4
    3ba6:	d007      	beq.n	3bb8 <SYS_EncryptConf+0x74>
		text[i] ^= vector[i];
    3ba8:	780b      	ldrb	r3, [r1, #0]
    3baa:	7810      	ldrb	r0, [r2, #0]
    3bac:	4043      	eors	r3, r0
    3bae:	700b      	strb	r3, [r1, #0]
		if (nwkSecurityEncrypt) {
    3bb0:	2d00      	cmp	r5, #0
    3bb2:	d0f2      	beq.n	3b9a <SYS_EncryptConf+0x56>
			vector[i] = text[i];
    3bb4:	7013      	strb	r3, [r2, #0]
    3bb6:	e7f3      	b.n	3ba0 <SYS_EncryptConf+0x5c>
		}
	}

	nwkSecurityOffset += block;
    3bb8:	4643      	mov	r3, r8
    3bba:	19db      	adds	r3, r3, r7
    3bbc:	4a09      	ldr	r2, [pc, #36]	; (3be4 <SYS_EncryptConf+0xa0>)
    3bbe:	7013      	strb	r3, [r2, #0]
	nwkSecuritySize -= block;
    3bc0:	1bf6      	subs	r6, r6, r7
    3bc2:	b2f6      	uxtb	r6, r6
    3bc4:	4b08      	ldr	r3, [pc, #32]	; (3be8 <SYS_EncryptConf+0xa4>)
    3bc6:	701e      	strb	r6, [r3, #0]

	if (nwkSecuritySize > 0) {
    3bc8:	2e00      	cmp	r6, #0
    3bca:	d105      	bne.n	3bd8 <SYS_EncryptConf+0x94>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    3bcc:	2334      	movs	r3, #52	; 0x34
    3bce:	4662      	mov	r2, ip
    3bd0:	7013      	strb	r3, [r2, #0]
	}
}
    3bd2:	bc04      	pop	{r2}
    3bd4:	4690      	mov	r8, r2
    3bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    3bd8:	2332      	movs	r3, #50	; 0x32
    3bda:	4662      	mov	r2, ip
    3bdc:	7013      	strb	r3, [r2, #0]
    3bde:	e7f8      	b.n	3bd2 <SYS_EncryptConf+0x8e>
    3be0:	20000cf0 	.word	0x20000cf0
    3be4:	20000cf6 	.word	0x20000cf6
    3be8:	20000cf7 	.word	0x20000cf7
    3bec:	20000cf5 	.word	0x20000cf5
    3bf0:	20000cf8 	.word	0x20000cf8

00003bf4 <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    3bf4:	b570      	push	{r4, r5, r6, lr}
    3bf6:	b082      	sub	sp, #8
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    3bf8:	4b55      	ldr	r3, [pc, #340]	; (3d50 <nwkSecurityTaskHandler+0x15c>)
    3bfa:	781b      	ldrb	r3, [r3, #0]
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d008      	beq.n	3c12 <nwkSecurityTaskHandler+0x1e>
		return;
	}

	if (nwkSecurityActiveFrame) {
    3c00:	4b54      	ldr	r3, [pc, #336]	; (3d54 <nwkSecurityTaskHandler+0x160>)
    3c02:	681c      	ldr	r4, [r3, #0]
    3c04:	2c00      	cmp	r4, #0
    3c06:	d057      	beq.n	3cb8 <nwkSecurityTaskHandler+0xc4>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    3c08:	7823      	ldrb	r3, [r4, #0]
		if (NWK_SECURITY_STATE_CONFIRM ==
    3c0a:	2b34      	cmp	r3, #52	; 0x34
    3c0c:	d003      	beq.n	3c16 <nwkSecurityTaskHandler+0x22>
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
			--nwkSecurityActiveFrames;
		} else if (NWK_SECURITY_STATE_PROCESS ==
    3c0e:	2b32      	cmp	r3, #50	; 0x32
    3c10:	d047      	beq.n	3ca2 <nwkSecurityTaskHandler+0xae>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    3c12:	b002      	add	sp, #8
    3c14:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    3c16:	334d      	adds	r3, #77	; 0x4d
    3c18:	5ce0      	ldrb	r0, [r4, r3]
    3c1a:	3301      	adds	r3, #1
    3c1c:	5ce3      	ldrb	r3, [r4, r3]
    3c1e:	021b      	lsls	r3, r3, #8
    3c20:	4303      	orrs	r3, r0
    3c22:	2283      	movs	r2, #131	; 0x83
    3c24:	5ca0      	ldrb	r0, [r4, r2]
    3c26:	0400      	lsls	r0, r0, #16
    3c28:	4303      	orrs	r3, r0
    3c2a:	3201      	adds	r2, #1
    3c2c:	5ca0      	ldrb	r0, [r4, r2]
    3c2e:	0600      	lsls	r0, r0, #24
    3c30:	4318      	orrs	r0, r3
    3c32:	4b49      	ldr	r3, [pc, #292]	; (3d58 <nwkSecurityTaskHandler+0x164>)
    3c34:	781b      	ldrb	r3, [r3, #0]
    3c36:	18c0      	adds	r0, r0, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    3c38:	4b48      	ldr	r3, [pc, #288]	; (3d5c <nwkSecurityTaskHandler+0x168>)
    3c3a:	681d      	ldr	r5, [r3, #0]
    3c3c:	685a      	ldr	r2, [r3, #4]
    3c3e:	4055      	eors	r5, r2
    3c40:	689a      	ldr	r2, [r3, #8]
    3c42:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    3c44:	68db      	ldr	r3, [r3, #12]
    3c46:	405d      	eors	r5, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    3c48:	9500      	str	r5, [sp, #0]
	if (nwkSecurityEncrypt) {
    3c4a:	4b45      	ldr	r3, [pc, #276]	; (3d60 <nwkSecurityTaskHandler+0x16c>)
    3c4c:	781e      	ldrb	r6, [r3, #0]
    3c4e:	2e00      	cmp	r6, #0
    3c50:	d119      	bne.n	3c86 <nwkSecurityTaskHandler+0x92>
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    3c52:	2204      	movs	r2, #4
    3c54:	0001      	movs	r1, r0
    3c56:	a801      	add	r0, sp, #4
    3c58:	4b42      	ldr	r3, [pc, #264]	; (3d64 <nwkSecurityTaskHandler+0x170>)
    3c5a:	4798      	blx	r3
		return vmic == tmic;
    3c5c:	9b01      	ldr	r3, [sp, #4]
    3c5e:	1b5d      	subs	r5, r3, r5
    3c60:	426e      	negs	r6, r5
    3c62:	416e      	adcs	r6, r5
    3c64:	b2f6      	uxtb	r6, r6
			if (nwkSecurityEncrypt) {
    3c66:	4b3e      	ldr	r3, [pc, #248]	; (3d60 <nwkSecurityTaskHandler+0x16c>)
    3c68:	781b      	ldrb	r3, [r3, #0]
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d013      	beq.n	3c96 <nwkSecurityTaskHandler+0xa2>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    3c6e:	4b39      	ldr	r3, [pc, #228]	; (3d54 <nwkSecurityTaskHandler+0x160>)
    3c70:	6818      	ldr	r0, [r3, #0]
    3c72:	4b3d      	ldr	r3, [pc, #244]	; (3d68 <nwkSecurityTaskHandler+0x174>)
    3c74:	4798      	blx	r3
			nwkSecurityActiveFrame = NULL;
    3c76:	2200      	movs	r2, #0
    3c78:	4b36      	ldr	r3, [pc, #216]	; (3d54 <nwkSecurityTaskHandler+0x160>)
    3c7a:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    3c7c:	4a34      	ldr	r2, [pc, #208]	; (3d50 <nwkSecurityTaskHandler+0x15c>)
    3c7e:	7813      	ldrb	r3, [r2, #0]
    3c80:	3b01      	subs	r3, #1
    3c82:	7013      	strb	r3, [r2, #0]
    3c84:	e7c5      	b.n	3c12 <nwkSecurityTaskHandler+0x1e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    3c86:	2204      	movs	r2, #4
    3c88:	4669      	mov	r1, sp
    3c8a:	4b36      	ldr	r3, [pc, #216]	; (3d64 <nwkSecurityTaskHandler+0x170>)
    3c8c:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    3c8e:	7863      	ldrb	r3, [r4, #1]
    3c90:	3304      	adds	r3, #4
    3c92:	7063      	strb	r3, [r4, #1]
    3c94:	e7e7      	b.n	3c66 <nwkSecurityTaskHandler+0x72>
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    3c96:	4b2f      	ldr	r3, [pc, #188]	; (3d54 <nwkSecurityTaskHandler+0x160>)
    3c98:	6818      	ldr	r0, [r3, #0]
    3c9a:	0031      	movs	r1, r6
    3c9c:	4b33      	ldr	r3, [pc, #204]	; (3d6c <nwkSecurityTaskHandler+0x178>)
    3c9e:	4798      	blx	r3
    3ca0:	e7e9      	b.n	3c76 <nwkSecurityTaskHandler+0x82>
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    3ca2:	3301      	adds	r3, #1
    3ca4:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    3ca6:	4932      	ldr	r1, [pc, #200]	; (3d70 <nwkSecurityTaskHandler+0x17c>)
    3ca8:	482c      	ldr	r0, [pc, #176]	; (3d5c <nwkSecurityTaskHandler+0x168>)
    3caa:	4b32      	ldr	r3, [pc, #200]	; (3d74 <nwkSecurityTaskHandler+0x180>)
    3cac:	4798      	blx	r3
    3cae:	e7b0      	b.n	3c12 <nwkSecurityTaskHandler+0x1e>
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    3cb0:	7863      	ldrb	r3, [r4, #1]
    3cb2:	3b04      	subs	r3, #4
    3cb4:	7063      	strb	r3, [r4, #1]
    3cb6:	e02b      	b.n	3d10 <nwkSecurityTaskHandler+0x11c>
	while (NULL != (frame = nwkFrameNext(frame))) {
    3cb8:	4d2f      	ldr	r5, [pc, #188]	; (3d78 <nwkSecurityTaskHandler+0x184>)
    3cba:	0020      	movs	r0, r4
    3cbc:	47a8      	blx	r5
    3cbe:	1e04      	subs	r4, r0, #0
    3cc0:	d0a7      	beq.n	3c12 <nwkSecurityTaskHandler+0x1e>
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    3cc2:	7823      	ldrb	r3, [r4, #0]
    3cc4:	3b30      	subs	r3, #48	; 0x30
    3cc6:	2b01      	cmp	r3, #1
    3cc8:	d8f7      	bhi.n	3cba <nwkSecurityTaskHandler+0xc6>
			nwkSecurityActiveFrame = frame;
    3cca:	4b22      	ldr	r3, [pc, #136]	; (3d54 <nwkSecurityTaskHandler+0x160>)
    3ccc:	601c      	str	r4, [r3, #0]
	nwkSecurityVector[0] = header->nwkSeq;
    3cce:	4923      	ldr	r1, [pc, #140]	; (3d5c <nwkSecurityTaskHandler+0x168>)
    3cd0:	7b23      	ldrb	r3, [r4, #12]
    3cd2:	600b      	str	r3, [r1, #0]
		= ((uint32_t)header->nwkDstAddr <<
    3cd4:	7be0      	ldrb	r0, [r4, #15]
    3cd6:	7c23      	ldrb	r3, [r4, #16]
    3cd8:	021b      	lsls	r3, r3, #8
    3cda:	4303      	orrs	r3, r0
    3cdc:	041b      	lsls	r3, r3, #16
			16) | header->nwkDstEndpoint;
    3cde:	7c60      	ldrb	r0, [r4, #17]
    3ce0:	0900      	lsrs	r0, r0, #4
    3ce2:	4303      	orrs	r3, r0
		= ((uint32_t)header->nwkDstAddr <<
    3ce4:	604b      	str	r3, [r1, #4]
		= ((uint32_t)header->nwkSrcAddr <<
    3ce6:	7b60      	ldrb	r0, [r4, #13]
    3ce8:	7ba3      	ldrb	r3, [r4, #14]
    3cea:	021b      	lsls	r3, r3, #8
    3cec:	4303      	orrs	r3, r0
    3cee:	041b      	lsls	r3, r3, #16
			16) | header->nwkSrcEndpoint;
    3cf0:	7c60      	ldrb	r0, [r4, #17]
    3cf2:	0700      	lsls	r0, r0, #28
    3cf4:	0f00      	lsrs	r0, r0, #28
    3cf6:	4303      	orrs	r3, r0
		= ((uint32_t)header->nwkSrcAddr <<
    3cf8:	608b      	str	r3, [r1, #8]
		= ((uint32_t)header->macDstPanId <<
    3cfa:	7960      	ldrb	r0, [r4, #5]
    3cfc:	79a3      	ldrb	r3, [r4, #6]
    3cfe:	021b      	lsls	r3, r3, #8
    3d00:	4303      	orrs	r3, r0
    3d02:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    3d04:	7ae2      	ldrb	r2, [r4, #11]
    3d06:	4313      	orrs	r3, r2
		= ((uint32_t)header->macDstPanId <<
    3d08:	60cb      	str	r3, [r1, #12]
			nwkSecurityActiveFrame->state) {
    3d0a:	7820      	ldrb	r0, [r4, #0]
	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    3d0c:	2831      	cmp	r0, #49	; 0x31
    3d0e:	d0cf      	beq.n	3cb0 <nwkSecurityTaskHandler+0xbc>
    3d10:	2381      	movs	r3, #129	; 0x81
    3d12:	5ce1      	ldrb	r1, [r4, r3]
    3d14:	3301      	adds	r3, #1
    3d16:	5ce2      	ldrb	r2, [r4, r3]
    3d18:	0212      	lsls	r2, r2, #8
    3d1a:	4311      	orrs	r1, r2
    3d1c:	3301      	adds	r3, #1
    3d1e:	5ce2      	ldrb	r2, [r4, r3]
    3d20:	0412      	lsls	r2, r2, #16
    3d22:	4311      	orrs	r1, r2
    3d24:	3301      	adds	r3, #1
    3d26:	5ce3      	ldrb	r3, [r4, r3]
    3d28:	061b      	lsls	r3, r3, #24
    3d2a:	430b      	orrs	r3, r1
    3d2c:	1ca2      	adds	r2, r4, #2
    3d2e:	1a9b      	subs	r3, r3, r2
    3d30:	7862      	ldrb	r2, [r4, #1]
    3d32:	1ad3      	subs	r3, r2, r3
	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    3d34:	4a11      	ldr	r2, [pc, #68]	; (3d7c <nwkSecurityTaskHandler+0x188>)
    3d36:	7013      	strb	r3, [r2, #0]
	nwkSecurityOffset = 0;
    3d38:	2200      	movs	r2, #0
    3d3a:	4b07      	ldr	r3, [pc, #28]	; (3d58 <nwkSecurityTaskHandler+0x164>)
    3d3c:	701a      	strb	r2, [r3, #0]
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    3d3e:	0003      	movs	r3, r0
    3d40:	3b30      	subs	r3, #48	; 0x30
    3d42:	4259      	negs	r1, r3
    3d44:	4159      	adcs	r1, r3
    3d46:	4a06      	ldr	r2, [pc, #24]	; (3d60 <nwkSecurityTaskHandler+0x16c>)
    3d48:	7011      	strb	r1, [r2, #0]
	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    3d4a:	2332      	movs	r3, #50	; 0x32
    3d4c:	7023      	strb	r3, [r4, #0]
    3d4e:	e760      	b.n	3c12 <nwkSecurityTaskHandler+0x1e>
    3d50:	20000cf4 	.word	0x20000cf4
    3d54:	20000cf0 	.word	0x20000cf0
    3d58:	20000cf6 	.word	0x20000cf6
    3d5c:	20000cf8 	.word	0x20000cf8
    3d60:	20000cf5 	.word	0x20000cf5
    3d64:	00005701 	.word	0x00005701
    3d68:	00003ff7 	.word	0x00003ff7
    3d6c:	000036f1 	.word	0x000036f1
    3d70:	20000edc 	.word	0x20000edc
    3d74:	0000444d 	.word	0x0000444d
    3d78:	00002d99 	.word	0x00002d99
    3d7c:	20000cf7 	.word	0x20000cf7

00003d80 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    3d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d82:	b083      	sub	sp, #12
    3d84:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    3d86:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    3d88:	2000      	movs	r0, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    3d8a:	4d11      	ldr	r5, [pc, #68]	; (3dd0 <nwkTxDelayTimerHandler+0x50>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    3d8c:	2686      	movs	r6, #134	; 0x86
    3d8e:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    3d90:	47a8      	blx	r5
    3d92:	2800      	cmp	r0, #0
    3d94:	d013      	beq.n	3dbe <nwkTxDelayTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    3d96:	7803      	ldrb	r3, [r0, #0]
    3d98:	2b11      	cmp	r3, #17
    3d9a:	d1f9      	bne.n	3d90 <nwkTxDelayTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    3d9c:	5d82      	ldrb	r2, [r0, r6]
    3d9e:	5dc3      	ldrb	r3, [r0, r7]
    3da0:	021b      	lsls	r3, r3, #8
    3da2:	4313      	orrs	r3, r2
    3da4:	3b01      	subs	r3, #1
    3da6:	b29b      	uxth	r3, r3
    3da8:	5583      	strb	r3, [r0, r6]
    3daa:	0a19      	lsrs	r1, r3, #8
    3dac:	0002      	movs	r2, r0
    3dae:	3286      	adds	r2, #134	; 0x86
    3db0:	7051      	strb	r1, [r2, #1]
			restart = true;
    3db2:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    3db4:	2b00      	cmp	r3, #0
    3db6:	d1eb      	bne.n	3d90 <nwkTxDelayTimerHandler+0x10>
				frame->state = NWK_TX_STATE_SEND;
    3db8:	3313      	adds	r3, #19
    3dba:	7003      	strb	r3, [r0, #0]
    3dbc:	e7e8      	b.n	3d90 <nwkTxDelayTimerHandler+0x10>
			}
		}
	}

	if (restart) {
    3dbe:	2c00      	cmp	r4, #0
    3dc0:	d101      	bne.n	3dc6 <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
	}
}
    3dc2:	b003      	add	sp, #12
    3dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    3dc6:	9801      	ldr	r0, [sp, #4]
    3dc8:	4b02      	ldr	r3, [pc, #8]	; (3dd4 <nwkTxDelayTimerHandler+0x54>)
    3dca:	4798      	blx	r3
}
    3dcc:	e7f9      	b.n	3dc2 <nwkTxDelayTimerHandler+0x42>
    3dce:	46c0      	nop			; (mov r8, r8)
    3dd0:	00002d99 	.word	0x00002d99
    3dd4:	00004581 	.word	0x00004581

00003dd8 <nwkTxAckWaitTimerHandler>:
{
    3dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dda:	b083      	sub	sp, #12
    3ddc:	9001      	str	r0, [sp, #4]
	bool restart = false;
    3dde:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    3de0:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    3de2:	4d12      	ldr	r5, [pc, #72]	; (3e2c <nwkTxAckWaitTimerHandler+0x54>)
			if (0 == --frame->tx.timeout) {
    3de4:	2686      	movs	r6, #134	; 0x86
    3de6:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    3de8:	47a8      	blx	r5
    3dea:	2800      	cmp	r0, #0
    3dec:	d016      	beq.n	3e1c <nwkTxAckWaitTimerHandler+0x44>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    3dee:	7803      	ldrb	r3, [r0, #0]
    3df0:	2b16      	cmp	r3, #22
    3df2:	d1f9      	bne.n	3de8 <nwkTxAckWaitTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    3df4:	5d82      	ldrb	r2, [r0, r6]
    3df6:	5dc3      	ldrb	r3, [r0, r7]
    3df8:	021b      	lsls	r3, r3, #8
    3dfa:	4313      	orrs	r3, r2
    3dfc:	3b01      	subs	r3, #1
    3dfe:	b29b      	uxth	r3, r3
    3e00:	5583      	strb	r3, [r0, r6]
    3e02:	0a19      	lsrs	r1, r3, #8
    3e04:	0002      	movs	r2, r0
    3e06:	3286      	adds	r2, #134	; 0x86
    3e08:	7051      	strb	r1, [r2, #1]
			restart = true;
    3e0a:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    3e0c:	2b00      	cmp	r3, #0
    3e0e:	d1eb      	bne.n	3de8 <nwkTxAckWaitTimerHandler+0x10>
	frame->state = NWK_TX_STATE_CONFIRM;
    3e10:	3317      	adds	r3, #23
    3e12:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    3e14:	2210      	movs	r2, #16
    3e16:	336e      	adds	r3, #110	; 0x6e
    3e18:	54c2      	strb	r2, [r0, r3]
    3e1a:	e7e5      	b.n	3de8 <nwkTxAckWaitTimerHandler+0x10>
	if (restart) {
    3e1c:	2c00      	cmp	r4, #0
    3e1e:	d101      	bne.n	3e24 <nwkTxAckWaitTimerHandler+0x4c>
}
    3e20:	b003      	add	sp, #12
    3e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    3e24:	9801      	ldr	r0, [sp, #4]
    3e26:	4b02      	ldr	r3, [pc, #8]	; (3e30 <nwkTxAckWaitTimerHandler+0x58>)
    3e28:	4798      	blx	r3
}
    3e2a:	e7f9      	b.n	3e20 <nwkTxAckWaitTimerHandler+0x48>
    3e2c:	00002d99 	.word	0x00002d99
    3e30:	00004581 	.word	0x00004581

00003e34 <nwkTxInit>:
	nwkTxPhyActiveFrame = NULL;
    3e34:	2200      	movs	r2, #0
    3e36:	4b07      	ldr	r3, [pc, #28]	; (3e54 <nwkTxInit+0x20>)
    3e38:	601a      	str	r2, [r3, #0]
	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    3e3a:	4b07      	ldr	r3, [pc, #28]	; (3e58 <nwkTxInit+0x24>)
    3e3c:	2132      	movs	r1, #50	; 0x32
    3e3e:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3e40:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    3e42:	4906      	ldr	r1, [pc, #24]	; (3e5c <nwkTxInit+0x28>)
    3e44:	6119      	str	r1, [r3, #16]
	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    3e46:	4b06      	ldr	r3, [pc, #24]	; (3e60 <nwkTxInit+0x2c>)
    3e48:	210a      	movs	r1, #10
    3e4a:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3e4c:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    3e4e:	4a05      	ldr	r2, [pc, #20]	; (3e64 <nwkTxInit+0x30>)
    3e50:	611a      	str	r2, [r3, #16]
}
    3e52:	4770      	bx	lr
    3e54:	20000d30 	.word	0x20000d30
    3e58:	20000d08 	.word	0x20000d08
    3e5c:	00003dd9 	.word	0x00003dd9
    3e60:	20000d1c 	.word	0x20000d1c
    3e64:	00003d81 	.word	0x00003d81

00003e68 <nwkTxFrame>:
{
    3e68:	b510      	push	{r4, lr}
    3e6a:	0004      	movs	r4, r0
	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    3e6c:	2388      	movs	r3, #136	; 0x88
    3e6e:	5cc3      	ldrb	r3, [r0, r3]
    3e70:	079a      	lsls	r2, r3, #30
    3e72:	d52d      	bpl.n	3ed0 <nwkTxFrame+0x68>
		frame->state = NWK_TX_STATE_DELAY;
    3e74:	2212      	movs	r2, #18
    3e76:	7002      	strb	r2, [r0, #0]
	frame->tx.status = NWK_SUCCESS_STATUS;
    3e78:	2100      	movs	r1, #0
    3e7a:	2285      	movs	r2, #133	; 0x85
    3e7c:	54a1      	strb	r1, [r4, r2]
	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    3e7e:	07da      	lsls	r2, r3, #31
    3e80:	d52f      	bpl.n	3ee2 <nwkTxFrame+0x7a>
		header->macDstPanId = NWK_BROADCAST_PANID;
    3e82:	2201      	movs	r2, #1
    3e84:	4252      	negs	r2, r2
    3e86:	7162      	strb	r2, [r4, #5]
    3e88:	71a2      	strb	r2, [r4, #6]
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    3e8a:	2205      	movs	r2, #5
    3e8c:	421a      	tst	r2, r3
    3e8e:	d02e      	beq.n	3eee <nwkTxFrame+0x86>
	header->macDstAddr = header->nwkDstAddr;
    3e90:	7be2      	ldrb	r2, [r4, #15]
    3e92:	7c23      	ldrb	r3, [r4, #16]
    3e94:	71e2      	strb	r2, [r4, #7]
    3e96:	7223      	strb	r3, [r4, #8]
	header->macSrcAddr = nwkIb.addr;
    3e98:	491e      	ldr	r1, [pc, #120]	; (3f14 <nwkTxFrame+0xac>)
    3e9a:	780b      	ldrb	r3, [r1, #0]
    3e9c:	7263      	strb	r3, [r4, #9]
    3e9e:	784b      	ldrb	r3, [r1, #1]
    3ea0:	72a3      	strb	r3, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    3ea2:	794b      	ldrb	r3, [r1, #5]
    3ea4:	3301      	adds	r3, #1
    3ea6:	b2db      	uxtb	r3, r3
    3ea8:	714b      	strb	r3, [r1, #5]
    3eaa:	7123      	strb	r3, [r4, #4]
	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    3eac:	79e1      	ldrb	r1, [r4, #7]
    3eae:	7a23      	ldrb	r3, [r4, #8]
    3eb0:	021b      	lsls	r3, r3, #8
    3eb2:	430b      	orrs	r3, r1
    3eb4:	4a18      	ldr	r2, [pc, #96]	; (3f18 <nwkTxFrame+0xb0>)
    3eb6:	4293      	cmp	r3, r2
    3eb8:	d01d      	beq.n	3ef6 <nwkTxFrame+0x8e>
		header->macFcf = 0x8861;
    3eba:	2361      	movs	r3, #97	; 0x61
    3ebc:	70a3      	strb	r3, [r4, #2]
    3ebe:	3bd9      	subs	r3, #217	; 0xd9
    3ec0:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    3ec2:	2200      	movs	r2, #0
    3ec4:	33fe      	adds	r3, #254	; 0xfe
    3ec6:	54e2      	strb	r2, [r4, r3]
    3ec8:	3486      	adds	r4, #134	; 0x86
    3eca:	2300      	movs	r3, #0
    3ecc:	7063      	strb	r3, [r4, #1]
}
    3ece:	bd10      	pop	{r4, pc}
		if (header->nwkFcf.security) {
    3ed0:	7ac2      	ldrb	r2, [r0, #11]
    3ed2:	0792      	lsls	r2, r2, #30
    3ed4:	d502      	bpl.n	3edc <nwkTxFrame+0x74>
			frame->state = NWK_TX_STATE_ENCRYPT;
    3ed6:	2210      	movs	r2, #16
    3ed8:	7002      	strb	r2, [r0, #0]
    3eda:	e7cd      	b.n	3e78 <nwkTxFrame+0x10>
		frame->state = NWK_TX_STATE_DELAY;
    3edc:	2212      	movs	r2, #18
    3ede:	7002      	strb	r2, [r0, #0]
    3ee0:	e7ca      	b.n	3e78 <nwkTxFrame+0x10>
		header->macDstPanId = nwkIb.panId;
    3ee2:	4a0c      	ldr	r2, [pc, #48]	; (3f14 <nwkTxFrame+0xac>)
    3ee4:	7891      	ldrb	r1, [r2, #2]
    3ee6:	7161      	strb	r1, [r4, #5]
    3ee8:	78d2      	ldrb	r2, [r2, #3]
    3eea:	71a2      	strb	r2, [r4, #6]
    3eec:	e7cd      	b.n	3e8a <nwkTxFrame+0x22>
		nwkRoutePrepareTx(frame);
    3eee:	0020      	movs	r0, r4
    3ef0:	4b0a      	ldr	r3, [pc, #40]	; (3f1c <nwkTxFrame+0xb4>)
    3ef2:	4798      	blx	r3
    3ef4:	e7d0      	b.n	3e98 <nwkTxFrame+0x30>
		header->macFcf = 0x8841;
    3ef6:	2341      	movs	r3, #65	; 0x41
    3ef8:	70a3      	strb	r3, [r4, #2]
    3efa:	3bb9      	subs	r3, #185	; 0xb9
    3efc:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    3efe:	4b08      	ldr	r3, [pc, #32]	; (3f20 <nwkTxFrame+0xb8>)
    3f00:	4798      	blx	r3
    3f02:	2307      	movs	r3, #7
    3f04:	4018      	ands	r0, r3
    3f06:	3001      	adds	r0, #1
    3f08:	337f      	adds	r3, #127	; 0x7f
    3f0a:	54e0      	strb	r0, [r4, r3]
    3f0c:	3486      	adds	r4, #134	; 0x86
    3f0e:	2300      	movs	r3, #0
    3f10:	7063      	strb	r3, [r4, #1]
    3f12:	e7dc      	b.n	3ece <nwkTxFrame+0x66>
    3f14:	20000e94 	.word	0x20000e94
    3f18:	0000ffff 	.word	0x0000ffff
    3f1c:	00002fdd 	.word	0x00002fdd
    3f20:	00005781 	.word	0x00005781

00003f24 <nwkTxBroadcastFrame>:
{
    3f24:	b570      	push	{r4, r5, r6, lr}
    3f26:	0005      	movs	r5, r0
	if (NULL == (newFrame = nwkFrameAlloc())) {
    3f28:	4b1c      	ldr	r3, [pc, #112]	; (3f9c <nwkTxBroadcastFrame+0x78>)
    3f2a:	4798      	blx	r3
    3f2c:	1e04      	subs	r4, r0, #0
    3f2e:	d033      	beq.n	3f98 <nwkTxBroadcastFrame+0x74>
	newFrame->state = NWK_TX_STATE_DELAY;
    3f30:	2312      	movs	r3, #18
    3f32:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    3f34:	786b      	ldrb	r3, [r5, #1]
    3f36:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    3f38:	2200      	movs	r2, #0
    3f3a:	2385      	movs	r3, #133	; 0x85
    3f3c:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    3f3e:	4b18      	ldr	r3, [pc, #96]	; (3fa0 <nwkTxBroadcastFrame+0x7c>)
    3f40:	4798      	blx	r3
    3f42:	2307      	movs	r3, #7
    3f44:	4018      	ands	r0, r3
    3f46:	3001      	adds	r0, #1
    3f48:	337f      	adds	r3, #127	; 0x7f
    3f4a:	54e0      	strb	r0, [r4, r3]
    3f4c:	0c00      	lsrs	r0, r0, #16
    3f4e:	0023      	movs	r3, r4
    3f50:	3386      	adds	r3, #134	; 0x86
    3f52:	7058      	strb	r0, [r3, #1]
	newFrame->tx.confirm = NULL;
    3f54:	2200      	movs	r2, #0
    3f56:	2389      	movs	r3, #137	; 0x89
    3f58:	54e2      	strb	r2, [r4, r3]
    3f5a:	0023      	movs	r3, r4
    3f5c:	3389      	adds	r3, #137	; 0x89
    3f5e:	705a      	strb	r2, [r3, #1]
    3f60:	709a      	strb	r2, [r3, #2]
    3f62:	70da      	strb	r2, [r3, #3]
	memcpy(newFrame->data, frame->data, frame->size);
    3f64:	1ca0      	adds	r0, r4, #2
    3f66:	786a      	ldrb	r2, [r5, #1]
    3f68:	1ca9      	adds	r1, r5, #2
    3f6a:	4b0e      	ldr	r3, [pc, #56]	; (3fa4 <nwkTxBroadcastFrame+0x80>)
    3f6c:	4798      	blx	r3
	newFrame->header.macFcf = 0x8841;
    3f6e:	2341      	movs	r3, #65	; 0x41
    3f70:	70a3      	strb	r3, [r4, #2]
    3f72:	3bb9      	subs	r3, #185	; 0xb9
    3f74:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    3f76:	3377      	adds	r3, #119	; 0x77
    3f78:	71e3      	strb	r3, [r4, #7]
    3f7a:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    3f7c:	796a      	ldrb	r2, [r5, #5]
    3f7e:	79ab      	ldrb	r3, [r5, #6]
    3f80:	7162      	strb	r2, [r4, #5]
    3f82:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    3f84:	4a08      	ldr	r2, [pc, #32]	; (3fa8 <nwkTxBroadcastFrame+0x84>)
    3f86:	7813      	ldrb	r3, [r2, #0]
    3f88:	7263      	strb	r3, [r4, #9]
    3f8a:	7853      	ldrb	r3, [r2, #1]
    3f8c:	72a3      	strb	r3, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    3f8e:	7953      	ldrb	r3, [r2, #5]
    3f90:	3301      	adds	r3, #1
    3f92:	b2db      	uxtb	r3, r3
    3f94:	7153      	strb	r3, [r2, #5]
    3f96:	7123      	strb	r3, [r4, #4]
}
    3f98:	bd70      	pop	{r4, r5, r6, pc}
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	00002d15 	.word	0x00002d15
    3fa0:	00005781 	.word	0x00005781
    3fa4:	00005701 	.word	0x00005701
    3fa8:	20000e94 	.word	0x20000e94

00003fac <nwkTxAckReceived>:
{
    3fac:	b570      	push	{r4, r5, r6, lr}
	if (sizeof(NwkCommandAck_t) != ind->size) {
    3fae:	7b02      	ldrb	r2, [r0, #12]
		return false;
    3fb0:	2300      	movs	r3, #0
	if (sizeof(NwkCommandAck_t) != ind->size) {
    3fb2:	2a03      	cmp	r2, #3
    3fb4:	d001      	beq.n	3fba <nwkTxAckReceived+0xe>
}
    3fb6:	0018      	movs	r0, r3
    3fb8:	bd70      	pop	{r4, r5, r6, pc}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    3fba:	6885      	ldr	r5, [r0, #8]
    3fbc:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    3fbe:	4c0a      	ldr	r4, [pc, #40]	; (3fe8 <nwkTxAckReceived+0x3c>)
    3fc0:	47a0      	blx	r4
    3fc2:	2800      	cmp	r0, #0
    3fc4:	d00d      	beq.n	3fe2 <nwkTxAckReceived+0x36>
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    3fc6:	7803      	ldrb	r3, [r0, #0]
    3fc8:	2b16      	cmp	r3, #22
    3fca:	d1f9      	bne.n	3fc0 <nwkTxAckReceived+0x14>
    3fcc:	7b02      	ldrb	r2, [r0, #12]
    3fce:	786b      	ldrb	r3, [r5, #1]
    3fd0:	429a      	cmp	r2, r3
    3fd2:	d1f5      	bne.n	3fc0 <nwkTxAckReceived+0x14>
			frame->state = NWK_TX_STATE_CONFIRM;
    3fd4:	2317      	movs	r3, #23
    3fd6:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    3fd8:	78aa      	ldrb	r2, [r5, #2]
    3fda:	3371      	adds	r3, #113	; 0x71
    3fdc:	54c2      	strb	r2, [r0, r3]
			return true;
    3fde:	3b87      	subs	r3, #135	; 0x87
    3fe0:	e7e9      	b.n	3fb6 <nwkTxAckReceived+0xa>
	return false;
    3fe2:	2300      	movs	r3, #0
    3fe4:	e7e7      	b.n	3fb6 <nwkTxAckReceived+0xa>
    3fe6:	46c0      	nop			; (mov r8, r8)
    3fe8:	00002d99 	.word	0x00002d99

00003fec <nwkTxConfirm>:
	frame->state = NWK_TX_STATE_CONFIRM;
    3fec:	2317      	movs	r3, #23
    3fee:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    3ff0:	336e      	adds	r3, #110	; 0x6e
    3ff2:	54c1      	strb	r1, [r0, r3]
}
    3ff4:	4770      	bx	lr

00003ff6 <nwkTxEncryptConf>:
	frame->state = NWK_TX_STATE_DELAY;
    3ff6:	2312      	movs	r3, #18
    3ff8:	7003      	strb	r3, [r0, #0]
}
    3ffa:	4770      	bx	lr

00003ffc <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    3ffc:	4b0c      	ldr	r3, [pc, #48]	; (4030 <PHY_DataConf+0x34>)
    3ffe:	681b      	ldr	r3, [r3, #0]
	switch (status) {
    4000:	2801      	cmp	r0, #1
    4002:	d005      	beq.n	4010 <PHY_DataConf+0x14>
    4004:	2800      	cmp	r0, #0
    4006:	d004      	beq.n	4012 <PHY_DataConf+0x16>
    4008:	2802      	cmp	r0, #2
    400a:	d00f      	beq.n	402c <PHY_DataConf+0x30>
		return NWK_ERROR_STATUS;
    400c:	2001      	movs	r0, #1
    400e:	e000      	b.n	4012 <PHY_DataConf+0x16>
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    4010:	2020      	movs	r0, #32
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    4012:	2285      	movs	r2, #133	; 0x85
    4014:	5498      	strb	r0, [r3, r2]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    4016:	3a70      	subs	r2, #112	; 0x70
    4018:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    401a:	2200      	movs	r2, #0
    401c:	4b04      	ldr	r3, [pc, #16]	; (4030 <PHY_DataConf+0x34>)
    401e:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    4020:	4904      	ldr	r1, [pc, #16]	; (4034 <PHY_DataConf+0x38>)
    4022:	3258      	adds	r2, #88	; 0x58
    4024:	5a8b      	ldrh	r3, [r1, r2]
    4026:	3b01      	subs	r3, #1
    4028:	528b      	strh	r3, [r1, r2]
}
    402a:	4770      	bx	lr
		return NWK_PHY_NO_ACK_STATUS;
    402c:	2021      	movs	r0, #33	; 0x21
    402e:	e7f0      	b.n	4012 <PHY_DataConf+0x16>
    4030:	20000d30 	.word	0x20000d30
    4034:	20000e94 	.word	0x20000e94

00004038 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    4038:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    403a:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    403c:	4d37      	ldr	r5, [pc, #220]	; (411c <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    403e:	4e38      	ldr	r6, [pc, #224]	; (4120 <nwkTxTaskHandler+0xe8>)
	while (NULL != (frame = nwkFrameNext(frame))) {
    4040:	e003      	b.n	404a <nwkTxTaskHandler+0x12>
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    4042:	2101      	movs	r1, #1
    4044:	0020      	movs	r0, r4
    4046:	4b37      	ldr	r3, [pc, #220]	; (4124 <nwkTxTaskHandler+0xec>)
    4048:	4798      	blx	r3
	while (NULL != (frame = nwkFrameNext(frame))) {
    404a:	0020      	movs	r0, r4
    404c:	47a8      	blx	r5
    404e:	1e04      	subs	r4, r0, #0
    4050:	d063      	beq.n	411a <nwkTxTaskHandler+0xe2>
		switch (frame->state) {
    4052:	7823      	ldrb	r3, [r4, #0]
    4054:	3b10      	subs	r3, #16
    4056:	b2da      	uxtb	r2, r3
    4058:	2a07      	cmp	r2, #7
    405a:	d8f6      	bhi.n	404a <nwkTxTaskHandler+0x12>
    405c:	0093      	lsls	r3, r2, #2
    405e:	58f3      	ldr	r3, [r6, r3]
    4060:	469f      	mov	pc, r3
		break;
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    4062:	2386      	movs	r3, #134	; 0x86
    4064:	5ce2      	ldrb	r2, [r4, r3]
    4066:	3301      	adds	r3, #1
    4068:	5ce3      	ldrb	r3, [r4, r3]
    406a:	021b      	lsls	r3, r3, #8
    406c:	4313      	orrs	r3, r2
    406e:	d102      	bne.n	4076 <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
				SYS_TimerStart(&nwkTxDelayTimer);
			} else {
				frame->state = NWK_TX_STATE_SEND;
    4070:	2313      	movs	r3, #19
    4072:	7023      	strb	r3, [r4, #0]
    4074:	e7e9      	b.n	404a <nwkTxTaskHandler+0x12>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    4076:	2311      	movs	r3, #17
    4078:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    407a:	482b      	ldr	r0, [pc, #172]	; (4128 <nwkTxTaskHandler+0xf0>)
    407c:	4b2b      	ldr	r3, [pc, #172]	; (412c <nwkTxTaskHandler+0xf4>)
    407e:	4798      	blx	r3
    4080:	e7e3      	b.n	404a <nwkTxTaskHandler+0x12>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    4082:	4b2b      	ldr	r3, [pc, #172]	; (4130 <nwkTxTaskHandler+0xf8>)
    4084:	681b      	ldr	r3, [r3, #0]
    4086:	2b00      	cmp	r3, #0
    4088:	d1df      	bne.n	404a <nwkTxTaskHandler+0x12>
				nwkTxPhyActiveFrame = frame;
    408a:	4b29      	ldr	r3, [pc, #164]	; (4130 <nwkTxTaskHandler+0xf8>)
    408c:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    408e:	2314      	movs	r3, #20
    4090:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    4092:	1c60      	adds	r0, r4, #1
    4094:	4b27      	ldr	r3, [pc, #156]	; (4134 <nwkTxTaskHandler+0xfc>)
    4096:	4798      	blx	r3
				nwkIb.lock++;
    4098:	4927      	ldr	r1, [pc, #156]	; (4138 <nwkTxTaskHandler+0x100>)
    409a:	2258      	movs	r2, #88	; 0x58
    409c:	5a8b      	ldrh	r3, [r1, r2]
    409e:	3301      	adds	r3, #1
    40a0:	528b      	strh	r3, [r1, r2]
    40a2:	e7d2      	b.n	404a <nwkTxTaskHandler+0x12>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    40a4:	2385      	movs	r3, #133	; 0x85
    40a6:	5ce3      	ldrb	r3, [r4, r3]
    40a8:	2b00      	cmp	r3, #0
    40aa:	d11a      	bne.n	40e2 <nwkTxTaskHandler+0xaa>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    40ac:	7b61      	ldrb	r1, [r4, #13]
    40ae:	7ba3      	ldrb	r3, [r4, #14]
    40b0:	021b      	lsls	r3, r3, #8
    40b2:	4a21      	ldr	r2, [pc, #132]	; (4138 <nwkTxTaskHandler+0x100>)
    40b4:	8812      	ldrh	r2, [r2, #0]
    40b6:	430b      	orrs	r3, r1
    40b8:	429a      	cmp	r2, r3
    40ba:	d002      	beq.n	40c2 <nwkTxTaskHandler+0x8a>
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    40bc:	2317      	movs	r3, #23
    40be:	7023      	strb	r3, [r4, #0]
    40c0:	e7c3      	b.n	404a <nwkTxTaskHandler+0x12>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    40c2:	7ae3      	ldrb	r3, [r4, #11]
    40c4:	07db      	lsls	r3, r3, #31
    40c6:	d5f9      	bpl.n	40bc <nwkTxTaskHandler+0x84>
					frame->state = NWK_TX_STATE_WAIT_ACK;
    40c8:	2316      	movs	r3, #22
    40ca:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    40cc:	2215      	movs	r2, #21
    40ce:	3370      	adds	r3, #112	; 0x70
    40d0:	54e2      	strb	r2, [r4, r3]
    40d2:	2200      	movs	r2, #0
    40d4:	0023      	movs	r3, r4
    40d6:	3386      	adds	r3, #134	; 0x86
    40d8:	705a      	strb	r2, [r3, #1]
					SYS_TimerStart(&nwkTxAckWaitTimer);
    40da:	4818      	ldr	r0, [pc, #96]	; (413c <nwkTxTaskHandler+0x104>)
    40dc:	4b13      	ldr	r3, [pc, #76]	; (412c <nwkTxTaskHandler+0xf4>)
    40de:	4798      	blx	r3
    40e0:	e7b3      	b.n	404a <nwkTxTaskHandler+0x12>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    40e2:	2317      	movs	r3, #23
    40e4:	7023      	strb	r3, [r4, #0]
    40e6:	e7b0      	b.n	404a <nwkTxTaskHandler+0x12>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    40e8:	0020      	movs	r0, r4
    40ea:	4b15      	ldr	r3, [pc, #84]	; (4140 <nwkTxTaskHandler+0x108>)
    40ec:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    40ee:	2389      	movs	r3, #137	; 0x89
    40f0:	5ce3      	ldrb	r3, [r4, r3]
    40f2:	228a      	movs	r2, #138	; 0x8a
    40f4:	5ca2      	ldrb	r2, [r4, r2]
    40f6:	0212      	lsls	r2, r2, #8
    40f8:	431a      	orrs	r2, r3
    40fa:	238b      	movs	r3, #139	; 0x8b
    40fc:	5ce3      	ldrb	r3, [r4, r3]
    40fe:	041b      	lsls	r3, r3, #16
    4100:	431a      	orrs	r2, r3
    4102:	238c      	movs	r3, #140	; 0x8c
    4104:	5ce3      	ldrb	r3, [r4, r3]
    4106:	061b      	lsls	r3, r3, #24
    4108:	4313      	orrs	r3, r2
    410a:	d002      	beq.n	4112 <nwkTxTaskHandler+0xda>
				nwkFrameFree(frame);
			} else {
				frame->tx.confirm(frame);
    410c:	0020      	movs	r0, r4
    410e:	4798      	blx	r3
    4110:	e79b      	b.n	404a <nwkTxTaskHandler+0x12>
				nwkFrameFree(frame);
    4112:	0020      	movs	r0, r4
    4114:	4b0b      	ldr	r3, [pc, #44]	; (4144 <nwkTxTaskHandler+0x10c>)
    4116:	4798      	blx	r3
    4118:	e797      	b.n	404a <nwkTxTaskHandler+0x12>

		default:
			break;
		}
	}
}
    411a:	bd70      	pop	{r4, r5, r6, pc}
    411c:	00002d99 	.word	0x00002d99
    4120:	00006058 	.word	0x00006058
    4124:	00003b29 	.word	0x00003b29
    4128:	20000d1c 	.word	0x20000d1c
    412c:	00004581 	.word	0x00004581
    4130:	20000d30 	.word	0x20000d30
    4134:	00004289 	.word	0x00004289
    4138:	20000e94 	.word	0x20000e94
    413c:	20000d08 	.word	0x20000d08
    4140:	00002f49 	.word	0x00002f49
    4144:	00002d85 	.word	0x00002d85

00004148 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    4148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    414a:	0004      	movs	r4, r0
	trx_reg_write(reg, value);
    414c:	4f0b      	ldr	r7, [pc, #44]	; (417c <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    414e:	4e0c      	ldr	r6, [pc, #48]	; (4180 <phyTrxSetState+0x38>)
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    4150:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    4152:	2103      	movs	r1, #3
    4154:	2002      	movs	r0, #2
    4156:	47b8      	blx	r7
	value = trx_reg_read(reg);
    4158:	2001      	movs	r0, #1
    415a:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    415c:	4028      	ands	r0, r5
    415e:	2808      	cmp	r0, #8
    4160:	d1f7      	bne.n	4152 <phyTrxSetState+0xa>
	trx_reg_write(reg, value);
    4162:	4f06      	ldr	r7, [pc, #24]	; (417c <phyTrxSetState+0x34>)
	value = trx_reg_read(reg);
    4164:	4e06      	ldr	r6, [pc, #24]	; (4180 <phyTrxSetState+0x38>)

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    4166:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    4168:	0021      	movs	r1, r4
    416a:	2002      	movs	r0, #2
    416c:	47b8      	blx	r7
	value = trx_reg_read(reg);
    416e:	2001      	movs	r0, #1
    4170:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    4172:	4028      	ands	r0, r5
    4174:	4284      	cmp	r4, r0
    4176:	d1f7      	bne.n	4168 <phyTrxSetState+0x20>
}
    4178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    417a:	46c0      	nop			; (mov r8, r8)
    417c:	00004bd5 	.word	0x00004bd5
    4180:	00004ad9 	.word	0x00004ad9

00004184 <phySetRxState>:
{
    4184:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    4186:	2008      	movs	r0, #8
    4188:	4b06      	ldr	r3, [pc, #24]	; (41a4 <phySetRxState+0x20>)
    418a:	4798      	blx	r3
	value = trx_reg_read(reg);
    418c:	200f      	movs	r0, #15
    418e:	4b06      	ldr	r3, [pc, #24]	; (41a8 <phySetRxState+0x24>)
    4190:	4798      	blx	r3
	if (phyRxState) {
    4192:	4b06      	ldr	r3, [pc, #24]	; (41ac <phySetRxState+0x28>)
    4194:	781b      	ldrb	r3, [r3, #0]
    4196:	2b00      	cmp	r3, #0
    4198:	d100      	bne.n	419c <phySetRxState+0x18>
}
    419a:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    419c:	2016      	movs	r0, #22
    419e:	4b01      	ldr	r3, [pc, #4]	; (41a4 <phySetRxState+0x20>)
    41a0:	4798      	blx	r3
}
    41a2:	e7fa      	b.n	419a <phySetRxState+0x16>
    41a4:	00004149 	.word	0x00004149
    41a8:	00004ad9 	.word	0x00004ad9
    41ac:	20000db4 	.word	0x20000db4

000041b0 <PHY_Init>:
{
    41b0:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    41b2:	4b0e      	ldr	r3, [pc, #56]	; (41ec <PHY_Init+0x3c>)
    41b4:	4798      	blx	r3
	PhyReset();
    41b6:	4b0e      	ldr	r3, [pc, #56]	; (41f0 <PHY_Init+0x40>)
    41b8:	4798      	blx	r3
	phyRxState = false;
    41ba:	2200      	movs	r2, #0
    41bc:	4b0d      	ldr	r3, [pc, #52]	; (41f4 <PHY_Init+0x44>)
    41be:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    41c0:	3201      	adds	r2, #1
    41c2:	4b0d      	ldr	r3, [pc, #52]	; (41f8 <PHY_Init+0x48>)
    41c4:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    41c6:	4e0d      	ldr	r6, [pc, #52]	; (41fc <PHY_Init+0x4c>)
	value = trx_reg_read(reg);
    41c8:	4d0d      	ldr	r5, [pc, #52]	; (4200 <PHY_Init+0x50>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    41ca:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    41cc:	2108      	movs	r1, #8
    41ce:	2002      	movs	r0, #2
    41d0:	47b0      	blx	r6
	value = trx_reg_read(reg);
    41d2:	2001      	movs	r0, #1
    41d4:	47a8      	blx	r5
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    41d6:	4020      	ands	r0, r4
    41d8:	2808      	cmp	r0, #8
    41da:	d1f7      	bne.n	41cc <PHY_Init+0x1c>
	trx_reg_write(reg, value);
    41dc:	212e      	movs	r1, #46	; 0x2e
    41de:	3804      	subs	r0, #4
    41e0:	4c06      	ldr	r4, [pc, #24]	; (41fc <PHY_Init+0x4c>)
    41e2:	47a0      	blx	r4
    41e4:	21a0      	movs	r1, #160	; 0xa0
    41e6:	200c      	movs	r0, #12
    41e8:	47a0      	blx	r4
}
    41ea:	bd70      	pop	{r4, r5, r6, pc}
    41ec:	0000498d 	.word	0x0000498d
    41f0:	00004aa9 	.word	0x00004aa9
    41f4:	20000db4 	.word	0x20000db4
    41f8:	20000db5 	.word	0x20000db5
    41fc:	00004bd5 	.word	0x00004bd5
    4200:	00004ad9 	.word	0x00004ad9

00004204 <PHY_SetRxState>:
{
    4204:	b510      	push	{r4, lr}
	phyRxState = rx;
    4206:	4b02      	ldr	r3, [pc, #8]	; (4210 <PHY_SetRxState+0xc>)
    4208:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    420a:	4b02      	ldr	r3, [pc, #8]	; (4214 <PHY_SetRxState+0x10>)
    420c:	4798      	blx	r3
}
    420e:	bd10      	pop	{r4, pc}
    4210:	20000db4 	.word	0x20000db4
    4214:	00004185 	.word	0x00004185

00004218 <PHY_SetChannel>:
{
    4218:	b510      	push	{r4, lr}
    421a:	0004      	movs	r4, r0
	value = trx_reg_read(reg);
    421c:	2008      	movs	r0, #8
    421e:	4b05      	ldr	r3, [pc, #20]	; (4234 <PHY_SetChannel+0x1c>)
    4220:	4798      	blx	r3
	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    4222:	231f      	movs	r3, #31
    4224:	0001      	movs	r1, r0
    4226:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    4228:	4321      	orrs	r1, r4
	trx_reg_write(reg, value);
    422a:	b2c9      	uxtb	r1, r1
    422c:	2008      	movs	r0, #8
    422e:	4b02      	ldr	r3, [pc, #8]	; (4238 <PHY_SetChannel+0x20>)
    4230:	4798      	blx	r3
}
    4232:	bd10      	pop	{r4, pc}
    4234:	00004ad9 	.word	0x00004ad9
    4238:	00004bd5 	.word	0x00004bd5

0000423c <PHY_SetPanId>:
{
    423c:	b530      	push	{r4, r5, lr}
    423e:	b083      	sub	sp, #12
    4240:	466b      	mov	r3, sp
    4242:	1d9d      	adds	r5, r3, #6
    4244:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    4246:	b2c1      	uxtb	r1, r0
    4248:	2022      	movs	r0, #34	; 0x22
    424a:	4c03      	ldr	r4, [pc, #12]	; (4258 <PHY_SetPanId+0x1c>)
    424c:	47a0      	blx	r4
    424e:	7869      	ldrb	r1, [r5, #1]
    4250:	2023      	movs	r0, #35	; 0x23
    4252:	47a0      	blx	r4
}
    4254:	b003      	add	sp, #12
    4256:	bd30      	pop	{r4, r5, pc}
    4258:	00004bd5 	.word	0x00004bd5

0000425c <PHY_SetShortAddr>:
{
    425c:	b570      	push	{r4, r5, r6, lr}
    425e:	b082      	sub	sp, #8
    4260:	466b      	mov	r3, sp
    4262:	1d9e      	adds	r6, r3, #6
    4264:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    4266:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    4268:	0021      	movs	r1, r4
    426a:	2020      	movs	r0, #32
    426c:	4d05      	ldr	r5, [pc, #20]	; (4284 <PHY_SetShortAddr+0x28>)
    426e:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    4270:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    4272:	0031      	movs	r1, r6
    4274:	2021      	movs	r0, #33	; 0x21
    4276:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    4278:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    427a:	b2e1      	uxtb	r1, r4
    427c:	202d      	movs	r0, #45	; 0x2d
    427e:	47a8      	blx	r5
}
    4280:	b002      	add	sp, #8
    4282:	bd70      	pop	{r4, r5, r6, pc}
    4284:	00004bd5 	.word	0x00004bd5

00004288 <PHY_DataReq>:
{
    4288:	b510      	push	{r4, lr}
    428a:	0004      	movs	r4, r0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    428c:	2019      	movs	r0, #25
    428e:	4b0c      	ldr	r3, [pc, #48]	; (42c0 <PHY_DataReq+0x38>)
    4290:	4798      	blx	r3
	value = trx_reg_read(reg);
    4292:	200f      	movs	r0, #15
    4294:	4b0b      	ldr	r3, [pc, #44]	; (42c4 <PHY_DataReq+0x3c>)
    4296:	4798      	blx	r3
	data[0] += 2;
    4298:	7821      	ldrb	r1, [r4, #0]
    429a:	1c8b      	adds	r3, r1, #2
    429c:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    429e:	3101      	adds	r1, #1
    42a0:	b2c9      	uxtb	r1, r1
    42a2:	0020      	movs	r0, r4
    42a4:	4b08      	ldr	r3, [pc, #32]	; (42c8 <PHY_DataReq+0x40>)
    42a6:	4798      	blx	r3
	phyState = PHY_STATE_TX_WAIT_END;
    42a8:	2203      	movs	r2, #3
    42aa:	4b08      	ldr	r3, [pc, #32]	; (42cc <PHY_DataReq+0x44>)
    42ac:	701a      	strb	r2, [r3, #0]
    42ae:	4b08      	ldr	r3, [pc, #32]	; (42d0 <PHY_DataReq+0x48>)
    42b0:	2280      	movs	r2, #128	; 0x80
    42b2:	0352      	lsls	r2, r2, #13
    42b4:	619a      	str	r2, [r3, #24]
  __ASM volatile ("nop");
    42b6:	46c0      	nop			; (mov r8, r8)
    42b8:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    42ba:	615a      	str	r2, [r3, #20]
}
    42bc:	bd10      	pop	{r4, pc}
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	00004149 	.word	0x00004149
    42c4:	00004ad9 	.word	0x00004ad9
    42c8:	00004e05 	.word	0x00004e05
    42cc:	20000db5 	.word	0x20000db5
    42d0:	41004400 	.word	0x41004400

000042d4 <PHY_RandomReq>:
{
    42d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42d6:	46c6      	mov	lr, r8
    42d8:	b500      	push	{lr}
	phyTrxSetState(TRX_CMD_RX_ON);
    42da:	2006      	movs	r0, #6
    42dc:	4b0d      	ldr	r3, [pc, #52]	; (4314 <PHY_RandomReq+0x40>)
    42de:	4798      	blx	r3
    42e0:	2400      	movs	r4, #0
	uint16_t rnd = 0;
    42e2:	2500      	movs	r5, #0
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    42e4:	4f0c      	ldr	r7, [pc, #48]	; (4318 <PHY_RandomReq+0x44>)
	value = trx_reg_read(reg);
    42e6:	4e0d      	ldr	r6, [pc, #52]	; (431c <PHY_RandomReq+0x48>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    42e8:	2303      	movs	r3, #3
    42ea:	4698      	mov	r8, r3
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    42ec:	2001      	movs	r0, #1
    42ee:	47b8      	blx	r7
	value = trx_reg_read(reg);
    42f0:	2006      	movs	r0, #6
    42f2:	47b0      	blx	r6
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    42f4:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    42f6:	4643      	mov	r3, r8
    42f8:	4018      	ands	r0, r3
    42fa:	40a0      	lsls	r0, r4
    42fc:	4305      	orrs	r5, r0
    42fe:	b2ad      	uxth	r5, r5
    4300:	3402      	adds	r4, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    4302:	2c10      	cmp	r4, #16
    4304:	d1f2      	bne.n	42ec <PHY_RandomReq+0x18>
	phySetRxState();
    4306:	4b06      	ldr	r3, [pc, #24]	; (4320 <PHY_RandomReq+0x4c>)
    4308:	4798      	blx	r3
}
    430a:	0028      	movs	r0, r5
    430c:	bc04      	pop	{r2}
    430e:	4690      	mov	r8, r2
    4310:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4312:	46c0      	nop			; (mov r8, r8)
    4314:	00004149 	.word	0x00004149
    4318:	00000155 	.word	0x00000155
    431c:	00004ad9 	.word	0x00004ad9
    4320:	00004185 	.word	0x00004185

00004324 <PHY_EncryptReq>:
{
    4324:	b510      	push	{r4, lr}
    4326:	0004      	movs	r4, r0
    4328:	0008      	movs	r0, r1
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    432a:	2200      	movs	r2, #0
    432c:	2100      	movs	r1, #0
    432e:	4b05      	ldr	r3, [pc, #20]	; (4344 <PHY_EncryptReq+0x20>)
    4330:	4798      	blx	r3
	sal_aes_wrrd(text, NULL);
    4332:	2100      	movs	r1, #0
    4334:	0020      	movs	r0, r4
    4336:	4b04      	ldr	r3, [pc, #16]	; (4348 <PHY_EncryptReq+0x24>)
    4338:	4798      	blx	r3
	sal_aes_read(text);
    433a:	0020      	movs	r0, r4
    433c:	4b03      	ldr	r3, [pc, #12]	; (434c <PHY_EncryptReq+0x28>)
    433e:	4798      	blx	r3
}
    4340:	bd10      	pop	{r4, pc}
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	00004825 	.word	0x00004825
    4348:	000047b9 	.word	0x000047b9
    434c:	0000495d 	.word	0x0000495d

00004350 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    4350:	b5f0      	push	{r4, r5, r6, r7, lr}
    4352:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    4354:	4b26      	ldr	r3, [pc, #152]	; (43f0 <PHY_TaskHandler+0xa0>)
    4356:	781b      	ldrb	r3, [r3, #0]
    4358:	2b02      	cmp	r3, #2
    435a:	d00a      	beq.n	4372 <PHY_TaskHandler+0x22>
	value = trx_reg_read(reg);
    435c:	200f      	movs	r0, #15
    435e:	4b25      	ldr	r3, [pc, #148]	; (43f4 <PHY_TaskHandler+0xa4>)
    4360:	4798      	blx	r3
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    4362:	0703      	lsls	r3, r0, #28
    4364:	d505      	bpl.n	4372 <PHY_TaskHandler+0x22>
		if (PHY_STATE_IDLE == phyState) {
    4366:	4b22      	ldr	r3, [pc, #136]	; (43f0 <PHY_TaskHandler+0xa0>)
    4368:	781b      	ldrb	r3, [r3, #0]
    436a:	2b01      	cmp	r3, #1
    436c:	d003      	beq.n	4376 <PHY_TaskHandler+0x26>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    436e:	2b03      	cmp	r3, #3
    4370:	d026      	beq.n	43c0 <PHY_TaskHandler+0x70>
			phyState = PHY_STATE_IDLE;

			PHY_DataConf(status);
		}
	}
}
    4372:	b005      	add	sp, #20
    4374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	value = trx_reg_read(reg);
    4376:	2007      	movs	r0, #7
    4378:	4b1e      	ldr	r3, [pc, #120]	; (43f4 <PHY_TaskHandler+0xa4>)
    437a:	4798      	blx	r3
    437c:	0006      	movs	r6, r0
			trx_frame_read(&size, 1);
    437e:	466b      	mov	r3, sp
    4380:	1ddd      	adds	r5, r3, #7
    4382:	2101      	movs	r1, #1
    4384:	0028      	movs	r0, r5
    4386:	4f1c      	ldr	r7, [pc, #112]	; (43f8 <PHY_TaskHandler+0xa8>)
    4388:	47b8      	blx	r7
			trx_frame_read(phyRxBuffer, size + 2);
    438a:	7829      	ldrb	r1, [r5, #0]
    438c:	3102      	adds	r1, #2
    438e:	b2c9      	uxtb	r1, r1
    4390:	4c1a      	ldr	r4, [pc, #104]	; (43fc <PHY_TaskHandler+0xac>)
    4392:	0020      	movs	r0, r4
    4394:	47b8      	blx	r7
			ind.data = phyRxBuffer + 1;
    4396:	a802      	add	r0, sp, #8
    4398:	1c63      	adds	r3, r4, #1
    439a:	9302      	str	r3, [sp, #8]
			ind.size = size - PHY_CRC_SIZE;
    439c:	782b      	ldrb	r3, [r5, #0]
    439e:	1e9a      	subs	r2, r3, #2
    43a0:	7102      	strb	r2, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    43a2:	18e4      	adds	r4, r4, r3
    43a4:	7863      	ldrb	r3, [r4, #1]
    43a6:	7143      	strb	r3, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    43a8:	3e5b      	subs	r6, #91	; 0x5b
    43aa:	7186      	strb	r6, [r0, #6]
			PHY_DataInd(&ind);
    43ac:	4b14      	ldr	r3, [pc, #80]	; (4400 <PHY_TaskHandler+0xb0>)
    43ae:	4798      	blx	r3
	value = trx_reg_read(reg);
    43b0:	4d10      	ldr	r5, [pc, #64]	; (43f4 <PHY_TaskHandler+0xa4>)
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    43b2:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    43b4:	2001      	movs	r0, #1
    43b6:	47a8      	blx	r5
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    43b8:	4020      	ands	r0, r4
    43ba:	2816      	cmp	r0, #22
    43bc:	d1fa      	bne.n	43b4 <PHY_TaskHandler+0x64>
    43be:	e7d8      	b.n	4372 <PHY_TaskHandler+0x22>
	value = trx_reg_read(reg);
    43c0:	2002      	movs	r0, #2
    43c2:	4b0c      	ldr	r3, [pc, #48]	; (43f4 <PHY_TaskHandler+0xa4>)
    43c4:	4798      	blx	r3
					TRAC_STATUS) & 7;
    43c6:	0940      	lsrs	r0, r0, #5
    43c8:	b2c4      	uxtb	r4, r0
			if (TRAC_STATUS_SUCCESS == status) {
    43ca:	2c00      	cmp	r4, #0
    43cc:	d005      	beq.n	43da <PHY_TaskHandler+0x8a>
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    43ce:	2c03      	cmp	r4, #3
    43d0:	d00c      	beq.n	43ec <PHY_TaskHandler+0x9c>
				status = PHY_STATUS_ERROR;
    43d2:	3c05      	subs	r4, #5
    43d4:	1e63      	subs	r3, r4, #1
    43d6:	419c      	sbcs	r4, r3
    43d8:	3402      	adds	r4, #2
			phySetRxState();
    43da:	4b0a      	ldr	r3, [pc, #40]	; (4404 <PHY_TaskHandler+0xb4>)
    43dc:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    43de:	2201      	movs	r2, #1
    43e0:	4b03      	ldr	r3, [pc, #12]	; (43f0 <PHY_TaskHandler+0xa0>)
    43e2:	701a      	strb	r2, [r3, #0]
			PHY_DataConf(status);
    43e4:	0020      	movs	r0, r4
    43e6:	4b08      	ldr	r3, [pc, #32]	; (4408 <PHY_TaskHandler+0xb8>)
    43e8:	4798      	blx	r3
    43ea:	e7c2      	b.n	4372 <PHY_TaskHandler+0x22>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    43ec:	2401      	movs	r4, #1
    43ee:	e7f4      	b.n	43da <PHY_TaskHandler+0x8a>
    43f0:	20000db5 	.word	0x20000db5
    43f4:	00004ad9 	.word	0x00004ad9
    43f8:	00004cd5 	.word	0x00004cd5
    43fc:	20000d34 	.word	0x20000d34
    4400:	00003695 	.word	0x00003695
    4404:	00004185 	.word	0x00004185
    4408:	00003ffd 	.word	0x00003ffd

0000440c <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    440c:	b510      	push	{r4, lr}
	SYS_TimerInit();
    440e:	4b04      	ldr	r3, [pc, #16]	; (4420 <SYS_Init+0x14>)
    4410:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    4412:	4b04      	ldr	r3, [pc, #16]	; (4424 <SYS_Init+0x18>)
    4414:	4798      	blx	r3
#endif
	PHY_Init();
    4416:	4b04      	ldr	r3, [pc, #16]	; (4428 <SYS_Init+0x1c>)
    4418:	4798      	blx	r3
	NWK_Init();
    441a:	4b04      	ldr	r3, [pc, #16]	; (442c <SYS_Init+0x20>)
    441c:	4798      	blx	r3
}
    441e:	bd10      	pop	{r4, pc}
    4420:	000044d9 	.word	0x000044d9
    4424:	000047b5 	.word	0x000047b5
    4428:	000041b1 	.word	0x000041b1
    442c:	00002a6d 	.word	0x00002a6d

00004430 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    4430:	b510      	push	{r4, lr}
	PHY_TaskHandler();
    4432:	4b03      	ldr	r3, [pc, #12]	; (4440 <SYS_TaskHandler+0x10>)
    4434:	4798      	blx	r3
	NWK_TaskHandler();
    4436:	4b03      	ldr	r3, [pc, #12]	; (4444 <SYS_TaskHandler+0x14>)
    4438:	4798      	blx	r3
	SYS_TimerTaskHandler();
    443a:	4b03      	ldr	r3, [pc, #12]	; (4448 <SYS_TaskHandler+0x18>)
    443c:	4798      	blx	r3
}
    443e:	bd10      	pop	{r4, pc}
    4440:	00004351 	.word	0x00004351
    4444:	00002b21 	.word	0x00002b21
    4448:	000045a1 	.word	0x000045a1

0000444c <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    444c:	b510      	push	{r4, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    444e:	4b02      	ldr	r3, [pc, #8]	; (4458 <SYS_EncryptReq+0xc>)
    4450:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    4452:	4b02      	ldr	r3, [pc, #8]	; (445c <SYS_EncryptReq+0x10>)
    4454:	4798      	blx	r3
}
    4456:	bd10      	pop	{r4, pc}
    4458:	00004325 	.word	0x00004325
    445c:	00003b45 	.word	0x00003b45

00004460 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    4460:	b530      	push	{r4, r5, lr}
	if (timers) {
    4462:	4b14      	ldr	r3, [pc, #80]	; (44b4 <placeTimer+0x54>)
    4464:	681d      	ldr	r5, [r3, #0]
    4466:	2d00      	cmp	r5, #0
    4468:	d01c      	beq.n	44a4 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    446a:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    446c:	6869      	ldr	r1, [r5, #4]
    446e:	428a      	cmp	r2, r1
    4470:	d309      	bcc.n	4486 <placeTimer+0x26>
    4472:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    4474:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    4476:	6823      	ldr	r3, [r4, #0]
    4478:	2b00      	cmp	r3, #0
    447a:	d008      	beq.n	448e <placeTimer+0x2e>
			if (timeout < t->timeout) {
    447c:	6859      	ldr	r1, [r3, #4]
    447e:	4291      	cmp	r1, r2
    4480:	d803      	bhi.n	448a <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    4482:	001c      	movs	r4, r3
    4484:	e7f6      	b.n	4474 <placeTimer+0x14>
    4486:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    4488:	2400      	movs	r4, #0
				t->timeout -= timeout;
    448a:	1a89      	subs	r1, r1, r2
    448c:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    448e:	6042      	str	r2, [r0, #4]

		if (prev) {
    4490:	2c00      	cmp	r4, #0
    4492:	d003      	beq.n	449c <placeTimer+0x3c>
			timer->next = prev->next;
    4494:	6823      	ldr	r3, [r4, #0]
    4496:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    4498:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    449a:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    449c:	6005      	str	r5, [r0, #0]
			timers = timer;
    449e:	4b05      	ldr	r3, [pc, #20]	; (44b4 <placeTimer+0x54>)
    44a0:	6018      	str	r0, [r3, #0]
    44a2:	e7fa      	b.n	449a <placeTimer+0x3a>
		timer->next = NULL;
    44a4:	2300      	movs	r3, #0
    44a6:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    44a8:	6883      	ldr	r3, [r0, #8]
    44aa:	6043      	str	r3, [r0, #4]
		timers = timer;
    44ac:	4b01      	ldr	r3, [pc, #4]	; (44b4 <placeTimer+0x54>)
    44ae:	6018      	str	r0, [r3, #0]
}
    44b0:	e7f3      	b.n	449a <placeTimer+0x3a>
    44b2:	46c0      	nop			; (mov r8, r8)
    44b4:	20000db8 	.word	0x20000db8

000044b8 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    44b8:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    44ba:	4a04      	ldr	r2, [pc, #16]	; (44cc <SYS_HwExpiry_Cb+0x14>)
    44bc:	7813      	ldrb	r3, [r2, #0]
    44be:	3301      	adds	r3, #1
    44c0:	b2db      	uxtb	r3, r3
    44c2:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    44c4:	4802      	ldr	r0, [pc, #8]	; (44d0 <SYS_HwExpiry_Cb+0x18>)
    44c6:	4b03      	ldr	r3, [pc, #12]	; (44d4 <SYS_HwExpiry_Cb+0x1c>)
    44c8:	4798      	blx	r3
}
    44ca:	bd10      	pop	{r4, pc}
    44cc:	20000ef0 	.word	0x20000ef0
    44d0:	00002710 	.word	0x00002710
    44d4:	00005451 	.word	0x00005451

000044d8 <SYS_TimerInit>:
{
    44d8:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    44da:	2400      	movs	r4, #0
    44dc:	4b06      	ldr	r3, [pc, #24]	; (44f8 <SYS_TimerInit+0x20>)
    44de:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    44e0:	4806      	ldr	r0, [pc, #24]	; (44fc <SYS_TimerInit+0x24>)
    44e2:	4b07      	ldr	r3, [pc, #28]	; (4500 <SYS_TimerInit+0x28>)
    44e4:	4798      	blx	r3
	common_tc_init();
    44e6:	4b07      	ldr	r3, [pc, #28]	; (4504 <SYS_TimerInit+0x2c>)
    44e8:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    44ea:	4807      	ldr	r0, [pc, #28]	; (4508 <SYS_TimerInit+0x30>)
    44ec:	4b07      	ldr	r3, [pc, #28]	; (450c <SYS_TimerInit+0x34>)
    44ee:	4798      	blx	r3
	timers = NULL;
    44f0:	4b07      	ldr	r3, [pc, #28]	; (4510 <SYS_TimerInit+0x38>)
    44f2:	601c      	str	r4, [r3, #0]
}
    44f4:	bd10      	pop	{r4, pc}
    44f6:	46c0      	nop			; (mov r8, r8)
    44f8:	20000ef0 	.word	0x20000ef0
    44fc:	000044b9 	.word	0x000044b9
    4500:	00005541 	.word	0x00005541
    4504:	000054bd 	.word	0x000054bd
    4508:	00002710 	.word	0x00002710
    450c:	00005451 	.word	0x00005451
    4510:	20000db8 	.word	0x20000db8

00004514 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    4514:	4b0e      	ldr	r3, [pc, #56]	; (4550 <SYS_TimerStop+0x3c>)
    4516:	681a      	ldr	r2, [r3, #0]
    4518:	2a00      	cmp	r2, #0
    451a:	d014      	beq.n	4546 <SYS_TimerStop+0x32>
		if (t == timer) {
    451c:	4282      	cmp	r2, r0
    451e:	d013      	beq.n	4548 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    4520:	6813      	ldr	r3, [r2, #0]
    4522:	2b00      	cmp	r3, #0
    4524:	d00f      	beq.n	4546 <SYS_TimerStop+0x32>
		if (t == timer) {
    4526:	4298      	cmp	r0, r3
    4528:	d001      	beq.n	452e <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    452a:	001a      	movs	r2, r3
    452c:	e7f8      	b.n	4520 <SYS_TimerStop+0xc>
			if (prev) {
    452e:	2a00      	cmp	r2, #0
    4530:	d00a      	beq.n	4548 <SYS_TimerStop+0x34>
				prev->next = t->next;
    4532:	6803      	ldr	r3, [r0, #0]
    4534:	6013      	str	r3, [r2, #0]
			if (t->next) {
    4536:	6803      	ldr	r3, [r0, #0]
    4538:	2b00      	cmp	r3, #0
    453a:	d004      	beq.n	4546 <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    453c:	6842      	ldr	r2, [r0, #4]
    453e:	6859      	ldr	r1, [r3, #4]
    4540:	468c      	mov	ip, r1
    4542:	4462      	add	r2, ip
    4544:	605a      	str	r2, [r3, #4]
}
    4546:	4770      	bx	lr
				timers = t->next;
    4548:	4b01      	ldr	r3, [pc, #4]	; (4550 <SYS_TimerStop+0x3c>)
    454a:	6802      	ldr	r2, [r0, #0]
    454c:	601a      	str	r2, [r3, #0]
    454e:	e7f2      	b.n	4536 <SYS_TimerStop+0x22>
    4550:	20000db8 	.word	0x20000db8

00004554 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    4554:	4b09      	ldr	r3, [pc, #36]	; (457c <SYS_TimerStarted+0x28>)
    4556:	681b      	ldr	r3, [r3, #0]
    4558:	2b00      	cmp	r3, #0
    455a:	d00a      	beq.n	4572 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    455c:	4283      	cmp	r3, r0
    455e:	d00a      	beq.n	4576 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    4560:	681b      	ldr	r3, [r3, #0]
    4562:	2b00      	cmp	r3, #0
    4564:	d003      	beq.n	456e <SYS_TimerStarted+0x1a>
		if (t == timer) {
    4566:	4298      	cmp	r0, r3
    4568:	d1fa      	bne.n	4560 <SYS_TimerStarted+0xc>
			return true;
    456a:	2001      	movs	r0, #1
    456c:	e000      	b.n	4570 <SYS_TimerStarted+0x1c>
	return false;
    456e:	2000      	movs	r0, #0
}
    4570:	4770      	bx	lr
	return false;
    4572:	2000      	movs	r0, #0
    4574:	e7fc      	b.n	4570 <SYS_TimerStarted+0x1c>
			return true;
    4576:	2001      	movs	r0, #1
    4578:	e7fa      	b.n	4570 <SYS_TimerStarted+0x1c>
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	20000db8 	.word	0x20000db8

00004580 <SYS_TimerStart>:
{
    4580:	b510      	push	{r4, lr}
    4582:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    4584:	4b04      	ldr	r3, [pc, #16]	; (4598 <SYS_TimerStart+0x18>)
    4586:	4798      	blx	r3
    4588:	2800      	cmp	r0, #0
    458a:	d000      	beq.n	458e <SYS_TimerStart+0xe>
}
    458c:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    458e:	0020      	movs	r0, r4
    4590:	4b02      	ldr	r3, [pc, #8]	; (459c <SYS_TimerStart+0x1c>)
    4592:	4798      	blx	r3
}
    4594:	e7fa      	b.n	458c <SYS_TimerStart+0xc>
    4596:	46c0      	nop			; (mov r8, r8)
    4598:	00004555 	.word	0x00004555
    459c:	00004461 	.word	0x00004461

000045a0 <SYS_TimerTaskHandler>:
{
    45a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45a2:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    45a4:	4b1d      	ldr	r3, [pc, #116]	; (461c <SYS_TimerTaskHandler+0x7c>)
    45a6:	781b      	ldrb	r3, [r3, #0]
    45a8:	2b00      	cmp	r3, #0
    45aa:	d035      	beq.n	4618 <SYS_TimerTaskHandler+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    45ac:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    45b0:	4253      	negs	r3, r2
    45b2:	4153      	adcs	r3, r2
    45b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    45b6:	b672      	cpsid	i
  __ASM volatile ("dmb");
    45b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    45bc:	2100      	movs	r1, #0
    45be:	4b18      	ldr	r3, [pc, #96]	; (4620 <SYS_TimerTaskHandler+0x80>)
    45c0:	7019      	strb	r1, [r3, #0]
	return flags;
    45c2:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    45c4:	4a15      	ldr	r2, [pc, #84]	; (461c <SYS_TimerTaskHandler+0x7c>)
    45c6:	7813      	ldrb	r3, [r2, #0]
    45c8:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    45ca:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    45cc:	2800      	cmp	r0, #0
    45ce:	d005      	beq.n	45dc <SYS_TimerTaskHandler+0x3c>
		cpu_irq_enable();
    45d0:	3101      	adds	r1, #1
    45d2:	4a13      	ldr	r2, [pc, #76]	; (4620 <SYS_TimerTaskHandler+0x80>)
    45d4:	7011      	strb	r1, [r2, #0]
    45d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    45da:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    45dc:	009d      	lsls	r5, r3, #2
    45de:	18ed      	adds	r5, r5, r3
    45e0:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    45e2:	4e10      	ldr	r6, [pc, #64]	; (4624 <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    45e4:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    45e6:	e005      	b.n	45f4 <SYS_TimerTaskHandler+0x54>
			placeTimer(timer);
    45e8:	0020      	movs	r0, r4
    45ea:	4b0f      	ldr	r3, [pc, #60]	; (4628 <SYS_TimerTaskHandler+0x88>)
    45ec:	4798      	blx	r3
    45ee:	e00d      	b.n	460c <SYS_TimerTaskHandler+0x6c>
			timer->handler(timer);
    45f0:	0020      	movs	r0, r4
    45f2:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    45f4:	6834      	ldr	r4, [r6, #0]
    45f6:	2c00      	cmp	r4, #0
    45f8:	d00e      	beq.n	4618 <SYS_TimerTaskHandler+0x78>
    45fa:	6863      	ldr	r3, [r4, #4]
    45fc:	429d      	cmp	r5, r3
    45fe:	d309      	bcc.n	4614 <SYS_TimerTaskHandler+0x74>
		elapsed -= timers->timeout;
    4600:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    4602:	6823      	ldr	r3, [r4, #0]
    4604:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    4606:	7b23      	ldrb	r3, [r4, #12]
    4608:	2b01      	cmp	r3, #1
    460a:	d0ed      	beq.n	45e8 <SYS_TimerTaskHandler+0x48>
		if (timer->handler) {
    460c:	6923      	ldr	r3, [r4, #16]
    460e:	2b00      	cmp	r3, #0
    4610:	d1ee      	bne.n	45f0 <SYS_TimerTaskHandler+0x50>
    4612:	e7ef      	b.n	45f4 <SYS_TimerTaskHandler+0x54>
		timers->timeout -= elapsed;
    4614:	1b5d      	subs	r5, r3, r5
    4616:	6065      	str	r5, [r4, #4]
}
    4618:	b003      	add	sp, #12
    461a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    461c:	20000ef0 	.word	0x20000ef0
    4620:	20000008 	.word	0x20000008
    4624:	20000db8 	.word	0x20000db8
    4628:	00004461 	.word	0x00004461

0000462c <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    462c:	b510      	push	{r4, lr}
	tmr_cca_callback();
    462e:	4b01      	ldr	r3, [pc, #4]	; (4634 <tc_cca_callback+0x8>)
    4630:	4798      	blx	r3
}
    4632:	bd10      	pop	{r4, pc}
    4634:	00005525 	.word	0x00005525

00004638 <tc_ovf_callback>:
{
    4638:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    463a:	4b01      	ldr	r3, [pc, #4]	; (4640 <tc_ovf_callback+0x8>)
    463c:	4798      	blx	r3
}
    463e:	bd10      	pop	{r4, pc}
    4640:	000054dd 	.word	0x000054dd

00004644 <tmr_read_count>:
{
    4644:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    4646:	4802      	ldr	r0, [pc, #8]	; (4650 <tmr_read_count+0xc>)
    4648:	4b02      	ldr	r3, [pc, #8]	; (4654 <tmr_read_count+0x10>)
    464a:	4798      	blx	r3
    464c:	b280      	uxth	r0, r0
}
    464e:	bd10      	pop	{r4, pc}
    4650:	20000f28 	.word	0x20000f28
    4654:	00001fa9 	.word	0x00001fa9

00004658 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    4658:	4b03      	ldr	r3, [pc, #12]	; (4668 <tmr_disable_cc_interrupt+0x10>)
    465a:	2110      	movs	r1, #16
    465c:	681a      	ldr	r2, [r3, #0]
    465e:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    4660:	7e5a      	ldrb	r2, [r3, #25]
    4662:	438a      	bics	r2, r1
    4664:	765a      	strb	r2, [r3, #25]
}
    4666:	4770      	bx	lr
    4668:	20000f28 	.word	0x20000f28

0000466c <tmr_enable_cc_interrupt>:
{
    466c:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    466e:	4c0a      	ldr	r4, [pc, #40]	; (4698 <tmr_enable_cc_interrupt+0x2c>)
    4670:	6820      	ldr	r0, [r4, #0]
    4672:	4b0a      	ldr	r3, [pc, #40]	; (469c <tmr_enable_cc_interrupt+0x30>)
    4674:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    4676:	4b0a      	ldr	r3, [pc, #40]	; (46a0 <tmr_enable_cc_interrupt+0x34>)
    4678:	5c1b      	ldrb	r3, [r3, r0]
    467a:	221f      	movs	r2, #31
    467c:	401a      	ands	r2, r3
    467e:	2301      	movs	r3, #1
    4680:	4093      	lsls	r3, r2
    4682:	4a08      	ldr	r2, [pc, #32]	; (46a4 <tmr_enable_cc_interrupt+0x38>)
    4684:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    4686:	7e63      	ldrb	r3, [r4, #25]
    4688:	2210      	movs	r2, #16
    468a:	4313      	orrs	r3, r2
    468c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    468e:	6823      	ldr	r3, [r4, #0]
    4690:	2210      	movs	r2, #16
    4692:	735a      	strb	r2, [r3, #13]
}
    4694:	bd10      	pop	{r4, pc}
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	20000f28 	.word	0x20000f28
    469c:	00001d35 	.word	0x00001d35
    46a0:	00006078 	.word	0x00006078
    46a4:	e000e100 	.word	0xe000e100

000046a8 <tmr_write_cmpreg>:
{
    46a8:	b510      	push	{r4, lr}
    46aa:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    46ac:	2100      	movs	r1, #0
    46ae:	4802      	ldr	r0, [pc, #8]	; (46b8 <tmr_write_cmpreg+0x10>)
    46b0:	4b02      	ldr	r3, [pc, #8]	; (46bc <tmr_write_cmpreg+0x14>)
    46b2:	4798      	blx	r3
}
    46b4:	bd10      	pop	{r4, pc}
    46b6:	46c0      	nop			; (mov r8, r8)
    46b8:	20000f28 	.word	0x20000f28
    46bc:	00001fd5 	.word	0x00001fd5

000046c0 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    46c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46c2:	46ce      	mov	lr, r9
    46c4:	4647      	mov	r7, r8
    46c6:	b580      	push	{r7, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    46c8:	4a2d      	ldr	r2, [pc, #180]	; (4780 <tmr_init+0xc0>)
    46ca:	2300      	movs	r3, #0
    46cc:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    46ce:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    46d0:	2100      	movs	r1, #0
    46d2:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    46d4:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    46d6:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    46d8:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    46da:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    46dc:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    46de:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    46e0:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    46e2:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    46e4:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    46e6:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    46e8:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    46ea:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    46ec:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    46ee:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    46f0:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    46f2:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    46f4:	3b01      	subs	r3, #1
    46f6:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    46f8:	4c22      	ldr	r4, [pc, #136]	; (4784 <tmr_init+0xc4>)
    46fa:	4923      	ldr	r1, [pc, #140]	; (4788 <tmr_init+0xc8>)
    46fc:	0020      	movs	r0, r4
    46fe:	4b23      	ldr	r3, [pc, #140]	; (478c <tmr_init+0xcc>)
    4700:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    4702:	2200      	movs	r2, #0
    4704:	4922      	ldr	r1, [pc, #136]	; (4790 <tmr_init+0xd0>)
    4706:	0020      	movs	r0, r4
    4708:	4d22      	ldr	r5, [pc, #136]	; (4794 <tmr_init+0xd4>)
    470a:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    470c:	2202      	movs	r2, #2
    470e:	4922      	ldr	r1, [pc, #136]	; (4798 <tmr_init+0xd8>)
    4710:	0020      	movs	r0, r4
    4712:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    4714:	6820      	ldr	r0, [r4, #0]
    4716:	4b21      	ldr	r3, [pc, #132]	; (479c <tmr_init+0xdc>)
    4718:	4699      	mov	r9, r3
    471a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    471c:	4b20      	ldr	r3, [pc, #128]	; (47a0 <tmr_init+0xe0>)
    471e:	4698      	mov	r8, r3
    4720:	5c1b      	ldrb	r3, [r3, r0]
    4722:	261f      	movs	r6, #31
    4724:	4033      	ands	r3, r6
    4726:	2501      	movs	r5, #1
    4728:	002a      	movs	r2, r5
    472a:	409a      	lsls	r2, r3
    472c:	4f1d      	ldr	r7, [pc, #116]	; (47a4 <tmr_init+0xe4>)
    472e:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    4730:	7e63      	ldrb	r3, [r4, #25]
    4732:	2201      	movs	r2, #1
    4734:	4313      	orrs	r3, r2
    4736:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    4738:	6823      	ldr	r3, [r4, #0]
    473a:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    473c:	0018      	movs	r0, r3
    473e:	47c8      	blx	r9
    4740:	4643      	mov	r3, r8
    4742:	5c1b      	ldrb	r3, [r3, r0]
    4744:	401e      	ands	r6, r3
    4746:	40b5      	lsls	r5, r6
    4748:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    474a:	7e63      	ldrb	r3, [r4, #25]
    474c:	2210      	movs	r2, #16
    474e:	4313      	orrs	r3, r2
    4750:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    4752:	6822      	ldr	r2, [r4, #0]
    4754:	2310      	movs	r3, #16
    4756:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4758:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    475a:	b25b      	sxtb	r3, r3
    475c:	2b00      	cmp	r3, #0
    475e:	dbfb      	blt.n	4758 <tmr_init+0x98>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    4760:	8813      	ldrh	r3, [r2, #0]
    4762:	2102      	movs	r1, #2
    4764:	430b      	orrs	r3, r1
    4766:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    4768:	2000      	movs	r0, #0
    476a:	4b0f      	ldr	r3, [pc, #60]	; (47a8 <tmr_init+0xe8>)
    476c:	4798      	blx	r3
    476e:	490f      	ldr	r1, [pc, #60]	; (47ac <tmr_init+0xec>)
    4770:	4b0f      	ldr	r3, [pc, #60]	; (47b0 <tmr_init+0xf0>)
    4772:	4798      	blx	r3
	#endif
	return timer_multiplier;
    4774:	b2c0      	uxtb	r0, r0
}
    4776:	bc0c      	pop	{r2, r3}
    4778:	4690      	mov	r8, r2
    477a:	4699      	mov	r9, r3
    477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	20000ef4 	.word	0x20000ef4
    4784:	20000f28 	.word	0x20000f28
    4788:	42002c00 	.word	0x42002c00
    478c:	00001d6d 	.word	0x00001d6d
    4790:	00004639 	.word	0x00004639
    4794:	00001c6d 	.word	0x00001c6d
    4798:	0000462d 	.word	0x0000462d
    479c:	00001d35 	.word	0x00001d35
    47a0:	00006078 	.word	0x00006078
    47a4:	e000e100 	.word	0xe000e100
    47a8:	000019fd 	.word	0x000019fd
    47ac:	000f4240 	.word	0x000f4240
    47b0:	0000554d 	.word	0x0000554d

000047b4 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    47b4:	4770      	bx	lr
	...

000047b8 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    47b8:	b570      	push	{r4, r5, r6, lr}
    47ba:	0003      	movs	r3, r0
    47bc:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    47be:	4c14      	ldr	r4, [pc, #80]	; (4810 <sal_aes_wrrd+0x58>)
    47c0:	1c60      	adds	r0, r4, #1
    47c2:	2210      	movs	r2, #16
    47c4:	0019      	movs	r1, r3
    47c6:	4b13      	ldr	r3, [pc, #76]	; (4814 <sal_aes_wrrd+0x5c>)
    47c8:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    47ca:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    47cc:	4b12      	ldr	r3, [pc, #72]	; (4818 <sal_aes_wrrd+0x60>)
    47ce:	781b      	ldrb	r3, [r3, #0]
    47d0:	2b00      	cmp	r3, #0
    47d2:	d015      	beq.n	4800 <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    47d4:	2212      	movs	r2, #18
    47d6:	490e      	ldr	r1, [pc, #56]	; (4810 <sal_aes_wrrd+0x58>)
    47d8:	2083      	movs	r0, #131	; 0x83
    47da:	4b10      	ldr	r3, [pc, #64]	; (481c <sal_aes_wrrd+0x64>)
    47dc:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    47de:	2200      	movs	r2, #0
    47e0:	4b0d      	ldr	r3, [pc, #52]	; (4818 <sal_aes_wrrd+0x60>)
    47e2:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    47e4:	2d00      	cmp	r5, #0
    47e6:	d005      	beq.n	47f4 <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    47e8:	2210      	movs	r2, #16
    47ea:	4909      	ldr	r1, [pc, #36]	; (4810 <sal_aes_wrrd+0x58>)
    47ec:	3101      	adds	r1, #1
    47ee:	0028      	movs	r0, r5
    47f0:	4b08      	ldr	r3, [pc, #32]	; (4814 <sal_aes_wrrd+0x5c>)
    47f2:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    47f4:	4b06      	ldr	r3, [pc, #24]	; (4810 <sal_aes_wrrd+0x58>)
    47f6:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    47f8:	2018      	movs	r0, #24
    47fa:	4b09      	ldr	r3, [pc, #36]	; (4820 <sal_aes_wrrd+0x68>)
    47fc:	4798      	blx	r3
}
    47fe:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    4800:	2211      	movs	r2, #17
    4802:	4903      	ldr	r1, [pc, #12]	; (4810 <sal_aes_wrrd+0x58>)
    4804:	3101      	adds	r1, #1
    4806:	2084      	movs	r0, #132	; 0x84
    4808:	4b04      	ldr	r3, [pc, #16]	; (481c <sal_aes_wrrd+0x64>)
    480a:	4798      	blx	r3
    480c:	e7ea      	b.n	47e4 <sal_aes_wrrd+0x2c>
    480e:	46c0      	nop			; (mov r8, r8)
    4810:	20000dbc 	.word	0x20000dbc
    4814:	00005701 	.word	0x00005701
    4818:	20000df0 	.word	0x20000df0
    481c:	00005215 	.word	0x00005215
    4820:	00000155 	.word	0x00000155

00004824 <sal_aes_setup>:
{
    4824:	b5f0      	push	{r4, r5, r6, r7, lr}
    4826:	46c6      	mov	lr, r8
    4828:	b500      	push	{lr}
    482a:	b084      	sub	sp, #16
    482c:	0005      	movs	r5, r0
    482e:	000e      	movs	r6, r1
    4830:	0014      	movs	r4, r2
	if (key != NULL) {
    4832:	2800      	cmp	r0, #0
    4834:	d017      	beq.n	4866 <sal_aes_setup+0x42>
		dec_initialized = false;
    4836:	2200      	movs	r2, #0
    4838:	4b3e      	ldr	r3, [pc, #248]	; (4934 <sal_aes_setup+0x110>)
    483a:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    483c:	3202      	adds	r2, #2
    483e:	4b3e      	ldr	r3, [pc, #248]	; (4938 <sal_aes_setup+0x114>)
    4840:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    4842:	320e      	adds	r2, #14
    4844:	0001      	movs	r1, r0
    4846:	483d      	ldr	r0, [pc, #244]	; (493c <sal_aes_setup+0x118>)
    4848:	4b3d      	ldr	r3, [pc, #244]	; (4940 <sal_aes_setup+0x11c>)
    484a:	4698      	mov	r8, r3
    484c:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    484e:	4f3d      	ldr	r7, [pc, #244]	; (4944 <sal_aes_setup+0x120>)
    4850:	2310      	movs	r3, #16
    4852:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    4854:	1c78      	adds	r0, r7, #1
    4856:	2210      	movs	r2, #16
    4858:	0029      	movs	r1, r5
    485a:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    485c:	2211      	movs	r2, #17
    485e:	0039      	movs	r1, r7
    4860:	2083      	movs	r0, #131	; 0x83
    4862:	4b39      	ldr	r3, [pc, #228]	; (4948 <sal_aes_setup+0x124>)
    4864:	4798      	blx	r3
	switch (dir) {
    4866:	2c00      	cmp	r4, #0
    4868:	d003      	beq.n	4872 <sal_aes_setup+0x4e>
    486a:	2c01      	cmp	r4, #1
    486c:	d02f      	beq.n	48ce <sal_aes_setup+0xaa>
		return false;
    486e:	2000      	movs	r0, #0
    4870:	e01b      	b.n	48aa <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    4872:	4b31      	ldr	r3, [pc, #196]	; (4938 <sal_aes_setup+0x114>)
    4874:	781b      	ldrb	r3, [r3, #0]
    4876:	2b01      	cmp	r3, #1
    4878:	d01b      	beq.n	48b2 <sal_aes_setup+0x8e>
	last_dir = dir;
    487a:	4b2f      	ldr	r3, [pc, #188]	; (4938 <sal_aes_setup+0x114>)
    487c:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    487e:	2e00      	cmp	r6, #0
    4880:	d002      	beq.n	4888 <sal_aes_setup+0x64>
		return (false);
    4882:	2000      	movs	r0, #0
	switch (enc_mode) {
    4884:	2e02      	cmp	r6, #2
    4886:	d110      	bne.n	48aa <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    4888:	0136      	lsls	r6, r6, #4
    488a:	2370      	movs	r3, #112	; 0x70
    488c:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    488e:	00e4      	lsls	r4, r4, #3
    4890:	3b68      	subs	r3, #104	; 0x68
    4892:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    4894:	4334      	orrs	r4, r6
    4896:	4b2b      	ldr	r3, [pc, #172]	; (4944 <sal_aes_setup+0x120>)
    4898:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    489a:	2680      	movs	r6, #128	; 0x80
    489c:	4276      	negs	r6, r6
    489e:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    48a0:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    48a2:	2201      	movs	r2, #1
    48a4:	4b29      	ldr	r3, [pc, #164]	; (494c <sal_aes_setup+0x128>)
    48a6:	701a      	strb	r2, [r3, #0]
	return (true);
    48a8:	2001      	movs	r0, #1
}
    48aa:	b004      	add	sp, #16
    48ac:	bc04      	pop	{r2}
    48ae:	4690      	mov	r8, r2
    48b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    48b2:	4d24      	ldr	r5, [pc, #144]	; (4944 <sal_aes_setup+0x120>)
    48b4:	330f      	adds	r3, #15
    48b6:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    48b8:	1c68      	adds	r0, r5, #1
    48ba:	2210      	movs	r2, #16
    48bc:	491f      	ldr	r1, [pc, #124]	; (493c <sal_aes_setup+0x118>)
    48be:	4b20      	ldr	r3, [pc, #128]	; (4940 <sal_aes_setup+0x11c>)
    48c0:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    48c2:	2211      	movs	r2, #17
    48c4:	0029      	movs	r1, r5
    48c6:	2083      	movs	r0, #131	; 0x83
    48c8:	4b1f      	ldr	r3, [pc, #124]	; (4948 <sal_aes_setup+0x124>)
    48ca:	4798      	blx	r3
    48cc:	e7d5      	b.n	487a <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    48ce:	4b1a      	ldr	r3, [pc, #104]	; (4938 <sal_aes_setup+0x114>)
    48d0:	781b      	ldrb	r3, [r3, #0]
    48d2:	2b01      	cmp	r3, #1
    48d4:	d0d1      	beq.n	487a <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    48d6:	2210      	movs	r2, #16
    48d8:	4b1a      	ldr	r3, [pc, #104]	; (4944 <sal_aes_setup+0x120>)
    48da:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    48dc:	4b15      	ldr	r3, [pc, #84]	; (4934 <sal_aes_setup+0x110>)
    48de:	781b      	ldrb	r3, [r3, #0]
    48e0:	2b00      	cmp	r3, #0
    48e2:	d00e      	beq.n	4902 <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    48e4:	4d17      	ldr	r5, [pc, #92]	; (4944 <sal_aes_setup+0x120>)
    48e6:	1c68      	adds	r0, r5, #1
    48e8:	2210      	movs	r2, #16
    48ea:	4919      	ldr	r1, [pc, #100]	; (4950 <sal_aes_setup+0x12c>)
    48ec:	4b14      	ldr	r3, [pc, #80]	; (4940 <sal_aes_setup+0x11c>)
    48ee:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    48f0:	2211      	movs	r2, #17
    48f2:	0029      	movs	r1, r5
    48f4:	2083      	movs	r0, #131	; 0x83
    48f6:	4b14      	ldr	r3, [pc, #80]	; (4948 <sal_aes_setup+0x124>)
    48f8:	4798      	blx	r3
			dec_initialized = true;
    48fa:	4b0e      	ldr	r3, [pc, #56]	; (4934 <sal_aes_setup+0x110>)
    48fc:	2201      	movs	r2, #1
    48fe:	701a      	strb	r2, [r3, #0]
    4900:	e7bb      	b.n	487a <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    4902:	4d10      	ldr	r5, [pc, #64]	; (4944 <sal_aes_setup+0x120>)
    4904:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    4906:	3380      	adds	r3, #128	; 0x80
    4908:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    490a:	3a0f      	subs	r2, #15
    490c:	4b0f      	ldr	r3, [pc, #60]	; (494c <sal_aes_setup+0x128>)
    490e:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    4910:	2100      	movs	r1, #0
    4912:	4668      	mov	r0, sp
    4914:	4b0f      	ldr	r3, [pc, #60]	; (4954 <sal_aes_setup+0x130>)
    4916:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    4918:	2310      	movs	r3, #16
    491a:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    491c:	2201      	movs	r2, #1
    491e:	0029      	movs	r1, r5
    4920:	2083      	movs	r0, #131	; 0x83
    4922:	4b09      	ldr	r3, [pc, #36]	; (4948 <sal_aes_setup+0x124>)
    4924:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    4926:	2210      	movs	r2, #16
    4928:	4909      	ldr	r1, [pc, #36]	; (4950 <sal_aes_setup+0x12c>)
    492a:	2084      	movs	r0, #132	; 0x84
    492c:	4b0a      	ldr	r3, [pc, #40]	; (4958 <sal_aes_setup+0x134>)
    492e:	4798      	blx	r3
    4930:	e7d8      	b.n	48e4 <sal_aes_setup+0xc0>
    4932:	46c0      	nop			; (mov r8, r8)
    4934:	20000dce 	.word	0x20000dce
    4938:	20000009 	.word	0x20000009
    493c:	20000de0 	.word	0x20000de0
    4940:	00005701 	.word	0x00005701
    4944:	20000dbc 	.word	0x20000dbc
    4948:	00004f21 	.word	0x00004f21
    494c:	20000df0 	.word	0x20000df0
    4950:	20000dd0 	.word	0x20000dd0
    4954:	000047b9 	.word	0x000047b9
    4958:	0000508d 	.word	0x0000508d

0000495c <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    495c:	b510      	push	{r4, lr}
    495e:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    4960:	2210      	movs	r2, #16
    4962:	2084      	movs	r0, #132	; 0x84
    4964:	4b01      	ldr	r3, [pc, #4]	; (496c <sal_aes_read+0x10>)
    4966:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    4968:	bd10      	pop	{r4, pc}
    496a:	46c0      	nop			; (mov r8, r8)
    496c:	0000508d 	.word	0x0000508d

00004970 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    4970:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    4972:	2201      	movs	r2, #1
    4974:	4b03      	ldr	r3, [pc, #12]	; (4984 <AT86RFX_ISR+0x14>)
    4976:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    4978:	4b03      	ldr	r3, [pc, #12]	; (4988 <AT86RFX_ISR+0x18>)
    497a:	681b      	ldr	r3, [r3, #0]
    497c:	2b00      	cmp	r3, #0
    497e:	d000      	beq.n	4982 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    4980:	4798      	blx	r3
	}
}
    4982:	bd10      	pop	{r4, pc}
    4984:	40001800 	.word	0x40001800
    4988:	20000df4 	.word	0x20000df4

0000498c <trx_spi_init>:

void trx_spi_init(void)
{
    498c:	b530      	push	{r4, r5, lr}
    498e:	b085      	sub	sp, #20
	config->address_enabled = false;
    4990:	4a34      	ldr	r2, [pc, #208]	; (4a64 <trx_spi_init+0xd8>)
    4992:	2300      	movs	r3, #0
    4994:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    4996:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    4998:	213f      	movs	r1, #63	; 0x3f
    499a:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    499c:	4c32      	ldr	r4, [pc, #200]	; (4a68 <trx_spi_init+0xdc>)
    499e:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    49a0:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    49a2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    49a4:	2201      	movs	r2, #1
    49a6:	4669      	mov	r1, sp
    49a8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    49aa:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    49ac:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    49ae:	203f      	movs	r0, #63	; 0x3f
    49b0:	4b2e      	ldr	r3, [pc, #184]	; (4a6c <trx_spi_init+0xe0>)
    49b2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    49b4:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    49b6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    49b8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    49ba:	2900      	cmp	r1, #0
    49bc:	d104      	bne.n	49c8 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    49be:	0953      	lsrs	r3, r2, #5
    49c0:	01db      	lsls	r3, r3, #7
    49c2:	492b      	ldr	r1, [pc, #172]	; (4a70 <trx_spi_init+0xe4>)
    49c4:	468c      	mov	ip, r1
    49c6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    49c8:	211f      	movs	r1, #31
    49ca:	4011      	ands	r1, r2
    49cc:	2201      	movs	r2, #1
    49ce:	0010      	movs	r0, r2
    49d0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    49d2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    49d4:	4c27      	ldr	r4, [pc, #156]	; (4a74 <trx_spi_init+0xe8>)
    49d6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    49d8:	2300      	movs	r3, #0
    49da:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    49dc:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    49de:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    49e0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    49e2:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    49e4:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    49e6:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    49e8:	3223      	adds	r2, #35	; 0x23
    49ea:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    49ec:	0020      	movs	r0, r4
    49ee:	3018      	adds	r0, #24
    49f0:	3a18      	subs	r2, #24
    49f2:	2100      	movs	r1, #0
    49f4:	4b20      	ldr	r3, [pc, #128]	; (4a78 <trx_spi_init+0xec>)
    49f6:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    49f8:	2380      	movs	r3, #128	; 0x80
    49fa:	025b      	lsls	r3, r3, #9
    49fc:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    49fe:	4b1f      	ldr	r3, [pc, #124]	; (4a7c <trx_spi_init+0xf0>)
    4a00:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    4a02:	4b1f      	ldr	r3, [pc, #124]	; (4a80 <trx_spi_init+0xf4>)
    4a04:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    4a06:	2301      	movs	r3, #1
    4a08:	425b      	negs	r3, r3
    4a0a:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    4a0c:	4b1d      	ldr	r3, [pc, #116]	; (4a84 <trx_spi_init+0xf8>)
    4a0e:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    4a10:	4b1d      	ldr	r3, [pc, #116]	; (4a88 <trx_spi_init+0xfc>)
    4a12:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    4a14:	4d1d      	ldr	r5, [pc, #116]	; (4a8c <trx_spi_init+0x100>)
    4a16:	0022      	movs	r2, r4
    4a18:	491d      	ldr	r1, [pc, #116]	; (4a90 <trx_spi_init+0x104>)
    4a1a:	0028      	movs	r0, r5
    4a1c:	4b1d      	ldr	r3, [pc, #116]	; (4a94 <trx_spi_init+0x108>)
    4a1e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4a20:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4a22:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4a24:	2b00      	cmp	r3, #0
    4a26:	d1fc      	bne.n	4a22 <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4a28:	6813      	ldr	r3, [r2, #0]
    4a2a:	2502      	movs	r5, #2
    4a2c:	432b      	orrs	r3, r5
    4a2e:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    4a30:	ac01      	add	r4, sp, #4
    4a32:	0020      	movs	r0, r4
    4a34:	4b18      	ldr	r3, [pc, #96]	; (4a98 <trx_spi_init+0x10c>)
    4a36:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    4a38:	2320      	movs	r3, #32
    4a3a:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    4a3c:	2380      	movs	r3, #128	; 0x80
    4a3e:	039b      	lsls	r3, r3, #14
    4a40:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    4a42:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    4a44:	2301      	movs	r3, #1
    4a46:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    4a48:	2200      	movs	r2, #0
    4a4a:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    4a4c:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    4a4e:	0021      	movs	r1, r4
    4a50:	2000      	movs	r0, #0
    4a52:	4b12      	ldr	r3, [pc, #72]	; (4a9c <trx_spi_init+0x110>)
    4a54:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    4a56:	2200      	movs	r2, #0
    4a58:	2100      	movs	r1, #0
    4a5a:	4811      	ldr	r0, [pc, #68]	; (4aa0 <trx_spi_init+0x114>)
    4a5c:	4b11      	ldr	r3, [pc, #68]	; (4aa4 <trx_spi_init+0x118>)
    4a5e:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    4a60:	b005      	add	sp, #20
    4a62:	bd30      	pop	{r4, r5, pc}
    4a64:	20000f48 	.word	0x20000f48
    4a68:	20000f4c 	.word	0x20000f4c
    4a6c:	00000495 	.word	0x00000495
    4a70:	41004400 	.word	0x41004400
    4a74:	20000f50 	.word	0x20000f50
    4a78:	00005713 	.word	0x00005713
    4a7c:	004c4b40 	.word	0x004c4b40
    4a80:	00530005 	.word	0x00530005
    4a84:	003e0005 	.word	0x003e0005
    4a88:	00520005 	.word	0x00520005
    4a8c:	20000f88 	.word	0x20000f88
    4a90:	42001800 	.word	0x42001800
    4a94:	00000955 	.word	0x00000955
    4a98:	00000409 	.word	0x00000409
    4a9c:	0000041d 	.word	0x0000041d
    4aa0:	00004971 	.word	0x00004971
    4aa4:	000002c5 	.word	0x000002c5

00004aa8 <PhyReset>:

void PhyReset(void)
{
    4aa8:	b570      	push	{r4, r5, r6, lr}
    4aaa:	4c08      	ldr	r4, [pc, #32]	; (4acc <PhyReset+0x24>)
    4aac:	2580      	movs	r5, #128	; 0x80
    4aae:	022d      	lsls	r5, r5, #8
    4ab0:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    4ab2:	2280      	movs	r2, #128	; 0x80
    4ab4:	0352      	lsls	r2, r2, #13
    4ab6:	4b06      	ldr	r3, [pc, #24]	; (4ad0 <PhyReset+0x28>)
    4ab8:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    4aba:	20a5      	movs	r0, #165	; 0xa5
    4abc:	0040      	lsls	r0, r0, #1
    4abe:	4e05      	ldr	r6, [pc, #20]	; (4ad4 <PhyReset+0x2c>)
    4ac0:	47b0      	blx	r6
    4ac2:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    4ac4:	200a      	movs	r0, #10
    4ac6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4ac8:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    4aca:	bd70      	pop	{r4, r5, r6, pc}
    4acc:	41004480 	.word	0x41004480
    4ad0:	41004400 	.word	0x41004400
    4ad4:	00000155 	.word	0x00000155

00004ad8 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    4ad8:	b570      	push	{r4, r5, r6, lr}
    4ada:	b082      	sub	sp, #8
    4adc:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4ade:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4ae2:	425a      	negs	r2, r3
    4ae4:	4153      	adcs	r3, r2
    4ae6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4ae8:	b672      	cpsid	i
    4aea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4aee:	2200      	movs	r2, #0
    4af0:	4b33      	ldr	r3, [pc, #204]	; (4bc0 <trx_reg_read+0xe8>)
    4af2:	701a      	strb	r2, [r3, #0]
	return flags;
    4af4:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4af6:	4e33      	ldr	r6, [pc, #204]	; (4bc4 <trx_reg_read+0xec>)
    4af8:	3201      	adds	r2, #1
    4afa:	4933      	ldr	r1, [pc, #204]	; (4bc8 <trx_reg_read+0xf0>)
    4afc:	0030      	movs	r0, r6
    4afe:	4b33      	ldr	r3, [pc, #204]	; (4bcc <trx_reg_read+0xf4>)
    4b00:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4b02:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    4b04:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b06:	7e1a      	ldrb	r2, [r3, #24]
    4b08:	420a      	tst	r2, r1
    4b0a:	d0fc      	beq.n	4b06 <trx_reg_read+0x2e>
    4b0c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4b0e:	07d2      	lsls	r2, r2, #31
    4b10:	d502      	bpl.n	4b18 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4b12:	2280      	movs	r2, #128	; 0x80
    4b14:	4315      	orrs	r5, r2
    4b16:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4b18:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4b1a:	7e1a      	ldrb	r2, [r3, #24]
    4b1c:	420a      	tst	r2, r1
    4b1e:	d0fc      	beq.n	4b1a <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4b20:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4b22:	7e1a      	ldrb	r2, [r3, #24]
    4b24:	420a      	tst	r2, r1
    4b26:	d0fc      	beq.n	4b22 <trx_reg_read+0x4a>
    4b28:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4b2a:	0752      	lsls	r2, r2, #29
    4b2c:	d50c      	bpl.n	4b48 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4b2e:	8b5a      	ldrh	r2, [r3, #26]
    4b30:	0752      	lsls	r2, r2, #29
    4b32:	d501      	bpl.n	4b38 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4b34:	2204      	movs	r2, #4
    4b36:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b38:	4a22      	ldr	r2, [pc, #136]	; (4bc4 <trx_reg_read+0xec>)
    4b3a:	7992      	ldrb	r2, [r2, #6]
    4b3c:	2a01      	cmp	r2, #1
    4b3e:	d034      	beq.n	4baa <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b42:	b2d2      	uxtb	r2, r2
    4b44:	4922      	ldr	r1, [pc, #136]	; (4bd0 <trx_reg_read+0xf8>)
    4b46:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    4b48:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b4a:	7e1a      	ldrb	r2, [r3, #24]
    4b4c:	420a      	tst	r2, r1
    4b4e:	d0fc      	beq.n	4b4a <trx_reg_read+0x72>
    4b50:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4b52:	07d2      	lsls	r2, r2, #31
    4b54:	d501      	bpl.n	4b5a <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4b56:	2200      	movs	r2, #0
    4b58:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4b5a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4b5c:	7e1a      	ldrb	r2, [r3, #24]
    4b5e:	420a      	tst	r2, r1
    4b60:	d0fc      	beq.n	4b5c <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    4b62:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4b64:	7e1a      	ldrb	r2, [r3, #24]
    4b66:	420a      	tst	r2, r1
    4b68:	d0fc      	beq.n	4b64 <trx_reg_read+0x8c>
    4b6a:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    4b6c:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    4b6e:	0752      	lsls	r2, r2, #29
    4b70:	d50a      	bpl.n	4b88 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4b72:	8b5a      	ldrh	r2, [r3, #26]
    4b74:	0752      	lsls	r2, r2, #29
    4b76:	d501      	bpl.n	4b7c <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4b78:	2204      	movs	r2, #4
    4b7a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b7c:	4a11      	ldr	r2, [pc, #68]	; (4bc4 <trx_reg_read+0xec>)
    4b7e:	7992      	ldrb	r2, [r2, #6]
    4b80:	2a01      	cmp	r2, #1
    4b82:	d018      	beq.n	4bb6 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4b84:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    4b86:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4b88:	2200      	movs	r2, #0
    4b8a:	490f      	ldr	r1, [pc, #60]	; (4bc8 <trx_reg_read+0xf0>)
    4b8c:	480d      	ldr	r0, [pc, #52]	; (4bc4 <trx_reg_read+0xec>)
    4b8e:	4b0f      	ldr	r3, [pc, #60]	; (4bcc <trx_reg_read+0xf4>)
    4b90:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    4b92:	23ff      	movs	r3, #255	; 0xff
    4b94:	4223      	tst	r3, r4
    4b96:	d005      	beq.n	4ba4 <trx_reg_read+0xcc>
		cpu_irq_enable();
    4b98:	2201      	movs	r2, #1
    4b9a:	4b09      	ldr	r3, [pc, #36]	; (4bc0 <trx_reg_read+0xe8>)
    4b9c:	701a      	strb	r2, [r3, #0]
    4b9e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4ba2:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    4ba4:	b2e8      	uxtb	r0, r5
}
    4ba6:	b002      	add	sp, #8
    4ba8:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4bac:	05d2      	lsls	r2, r2, #23
    4bae:	0dd2      	lsrs	r2, r2, #23
    4bb0:	4907      	ldr	r1, [pc, #28]	; (4bd0 <trx_reg_read+0xf8>)
    4bb2:	800a      	strh	r2, [r1, #0]
    4bb4:	e7c8      	b.n	4b48 <trx_reg_read+0x70>
    4bb6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    4bb8:	05ed      	lsls	r5, r5, #23
    4bba:	0ded      	lsrs	r5, r5, #23
    4bbc:	e7e4      	b.n	4b88 <trx_reg_read+0xb0>
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	20000008 	.word	0x20000008
    4bc4:	20000f88 	.word	0x20000f88
    4bc8:	20000f4c 	.word	0x20000f4c
    4bcc:	00000c19 	.word	0x00000c19
    4bd0:	20000f44 	.word	0x20000f44

00004bd4 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    4bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bd6:	b083      	sub	sp, #12
    4bd8:	0006      	movs	r6, r0
    4bda:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4bdc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4be0:	425a      	negs	r2, r3
    4be2:	4153      	adcs	r3, r2
    4be4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4be6:	b672      	cpsid	i
    4be8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4bec:	2200      	movs	r2, #0
    4bee:	4b34      	ldr	r3, [pc, #208]	; (4cc0 <trx_reg_write+0xec>)
    4bf0:	701a      	strb	r2, [r3, #0]
	return flags;
    4bf2:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4bf4:	4f33      	ldr	r7, [pc, #204]	; (4cc4 <trx_reg_write+0xf0>)
    4bf6:	3201      	adds	r2, #1
    4bf8:	4933      	ldr	r1, [pc, #204]	; (4cc8 <trx_reg_write+0xf4>)
    4bfa:	0038      	movs	r0, r7
    4bfc:	4b33      	ldr	r3, [pc, #204]	; (4ccc <trx_reg_write+0xf8>)
    4bfe:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4c00:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    4c02:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4c04:	7e1a      	ldrb	r2, [r3, #24]
    4c06:	420a      	tst	r2, r1
    4c08:	d0fc      	beq.n	4c04 <trx_reg_write+0x30>
    4c0a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4c0c:	07d2      	lsls	r2, r2, #31
    4c0e:	d502      	bpl.n	4c16 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4c10:	22c0      	movs	r2, #192	; 0xc0
    4c12:	4316      	orrs	r6, r2
    4c14:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4c16:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4c18:	7e1a      	ldrb	r2, [r3, #24]
    4c1a:	420a      	tst	r2, r1
    4c1c:	d0fc      	beq.n	4c18 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4c1e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4c20:	7e1a      	ldrb	r2, [r3, #24]
    4c22:	420a      	tst	r2, r1
    4c24:	d0fc      	beq.n	4c20 <trx_reg_write+0x4c>
    4c26:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4c28:	0752      	lsls	r2, r2, #29
    4c2a:	d50c      	bpl.n	4c46 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4c2c:	8b5a      	ldrh	r2, [r3, #26]
    4c2e:	0752      	lsls	r2, r2, #29
    4c30:	d501      	bpl.n	4c36 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4c32:	2204      	movs	r2, #4
    4c34:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c36:	4a23      	ldr	r2, [pc, #140]	; (4cc4 <trx_reg_write+0xf0>)
    4c38:	7992      	ldrb	r2, [r2, #6]
    4c3a:	2a01      	cmp	r2, #1
    4c3c:	d033      	beq.n	4ca6 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4c40:	b2d2      	uxtb	r2, r2
    4c42:	4923      	ldr	r1, [pc, #140]	; (4cd0 <trx_reg_write+0xfc>)
    4c44:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    4c46:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4c48:	7e1a      	ldrb	r2, [r3, #24]
    4c4a:	420a      	tst	r2, r1
    4c4c:	d0fc      	beq.n	4c48 <trx_reg_write+0x74>
    4c4e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4c50:	07d2      	lsls	r2, r2, #31
    4c52:	d500      	bpl.n	4c56 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4c54:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    4c56:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4c58:	7e1a      	ldrb	r2, [r3, #24]
    4c5a:	420a      	tst	r2, r1
    4c5c:	d0fc      	beq.n	4c58 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4c5e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4c60:	7e1a      	ldrb	r2, [r3, #24]
    4c62:	420a      	tst	r2, r1
    4c64:	d0fc      	beq.n	4c60 <trx_reg_write+0x8c>
    4c66:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4c68:	0752      	lsls	r2, r2, #29
    4c6a:	d50c      	bpl.n	4c86 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4c6c:	8b5a      	ldrh	r2, [r3, #26]
    4c6e:	0752      	lsls	r2, r2, #29
    4c70:	d501      	bpl.n	4c76 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4c72:	2204      	movs	r2, #4
    4c74:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c76:	4a13      	ldr	r2, [pc, #76]	; (4cc4 <trx_reg_write+0xf0>)
    4c78:	7992      	ldrb	r2, [r2, #6]
    4c7a:	2a01      	cmp	r2, #1
    4c7c:	d019      	beq.n	4cb2 <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c80:	b2db      	uxtb	r3, r3
    4c82:	4a13      	ldr	r2, [pc, #76]	; (4cd0 <trx_reg_write+0xfc>)
    4c84:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4c86:	2200      	movs	r2, #0
    4c88:	490f      	ldr	r1, [pc, #60]	; (4cc8 <trx_reg_write+0xf4>)
    4c8a:	480e      	ldr	r0, [pc, #56]	; (4cc4 <trx_reg_write+0xf0>)
    4c8c:	4b0f      	ldr	r3, [pc, #60]	; (4ccc <trx_reg_write+0xf8>)
    4c8e:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    4c90:	23ff      	movs	r3, #255	; 0xff
    4c92:	422b      	tst	r3, r5
    4c94:	d005      	beq.n	4ca2 <trx_reg_write+0xce>
		cpu_irq_enable();
    4c96:	2201      	movs	r2, #1
    4c98:	4b09      	ldr	r3, [pc, #36]	; (4cc0 <trx_reg_write+0xec>)
    4c9a:	701a      	strb	r2, [r3, #0]
    4c9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4ca0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4ca2:	b003      	add	sp, #12
    4ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ca8:	05d2      	lsls	r2, r2, #23
    4caa:	0dd2      	lsrs	r2, r2, #23
    4cac:	4908      	ldr	r1, [pc, #32]	; (4cd0 <trx_reg_write+0xfc>)
    4cae:	800a      	strh	r2, [r1, #0]
    4cb0:	e7c9      	b.n	4c46 <trx_reg_write+0x72>
    4cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cb4:	05db      	lsls	r3, r3, #23
    4cb6:	0ddb      	lsrs	r3, r3, #23
    4cb8:	4a05      	ldr	r2, [pc, #20]	; (4cd0 <trx_reg_write+0xfc>)
    4cba:	8013      	strh	r3, [r2, #0]
    4cbc:	e7e3      	b.n	4c86 <trx_reg_write+0xb2>
    4cbe:	46c0      	nop			; (mov r8, r8)
    4cc0:	20000008 	.word	0x20000008
    4cc4:	20000f88 	.word	0x20000f88
    4cc8:	20000f4c 	.word	0x20000f4c
    4ccc:	00000c19 	.word	0x00000c19
    4cd0:	20000f44 	.word	0x20000f44

00004cd4 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    4cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cd6:	46d6      	mov	lr, sl
    4cd8:	464f      	mov	r7, r9
    4cda:	4646      	mov	r6, r8
    4cdc:	b5c0      	push	{r6, r7, lr}
    4cde:	b082      	sub	sp, #8
    4ce0:	0005      	movs	r5, r0
    4ce2:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4ce4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4ce8:	425a      	negs	r2, r3
    4cea:	4153      	adcs	r3, r2
    4cec:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4cee:	b672      	cpsid	i
    4cf0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4cf4:	2200      	movs	r2, #0
    4cf6:	4b3e      	ldr	r3, [pc, #248]	; (4df0 <trx_frame_read+0x11c>)
    4cf8:	701a      	strb	r2, [r3, #0]
	return flags;
    4cfa:	9b01      	ldr	r3, [sp, #4]
    4cfc:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4cfe:	4f3d      	ldr	r7, [pc, #244]	; (4df4 <trx_frame_read+0x120>)
    4d00:	3201      	adds	r2, #1
    4d02:	493d      	ldr	r1, [pc, #244]	; (4df8 <trx_frame_read+0x124>)
    4d04:	0038      	movs	r0, r7
    4d06:	4b3d      	ldr	r3, [pc, #244]	; (4dfc <trx_frame_read+0x128>)
    4d08:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d0a:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4d0c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4d0e:	7e1a      	ldrb	r2, [r3, #24]
    4d10:	420a      	tst	r2, r1
    4d12:	d0fc      	beq.n	4d0e <trx_frame_read+0x3a>
    4d14:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4d16:	07d2      	lsls	r2, r2, #31
    4d18:	d501      	bpl.n	4d1e <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4d1a:	2220      	movs	r2, #32
    4d1c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4d1e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4d20:	7e1a      	ldrb	r2, [r3, #24]
    4d22:	420a      	tst	r2, r1
    4d24:	d0fc      	beq.n	4d20 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4d26:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4d28:	7e1a      	ldrb	r2, [r3, #24]
    4d2a:	420a      	tst	r2, r1
    4d2c:	d0fc      	beq.n	4d28 <trx_frame_read+0x54>
    4d2e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4d30:	0752      	lsls	r2, r2, #29
    4d32:	d50c      	bpl.n	4d4e <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4d34:	8b5a      	ldrh	r2, [r3, #26]
    4d36:	0752      	lsls	r2, r2, #29
    4d38:	d501      	bpl.n	4d3e <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4d3a:	2204      	movs	r2, #4
    4d3c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d3e:	4a2d      	ldr	r2, [pc, #180]	; (4df4 <trx_frame_read+0x120>)
    4d40:	7992      	ldrb	r2, [r2, #6]
    4d42:	2a01      	cmp	r2, #1
    4d44:	d013      	beq.n	4d6e <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d48:	b2db      	uxtb	r3, r3
    4d4a:	4a2d      	ldr	r2, [pc, #180]	; (4e00 <trx_frame_read+0x12c>)
    4d4c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4d4e:	1e63      	subs	r3, r4, #1
    4d50:	b2db      	uxtb	r3, r3
    4d52:	2c00      	cmp	r4, #0
    4d54:	d036      	beq.n	4dc4 <trx_frame_read+0xf0>
    4d56:	3301      	adds	r3, #1
    4d58:	469c      	mov	ip, r3
    4d5a:	44ac      	add	ip, r5
    4d5c:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d5e:	4e25      	ldr	r6, [pc, #148]	; (4df4 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    4d60:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4d62:	2300      	movs	r3, #0
    4d64:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4d66:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4d68:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d6a:	46b1      	mov	r9, r6
    4d6c:	e00f      	b.n	4d8e <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d70:	05db      	lsls	r3, r3, #23
    4d72:	0ddb      	lsrs	r3, r3, #23
    4d74:	4a22      	ldr	r2, [pc, #136]	; (4e00 <trx_frame_read+0x12c>)
    4d76:	8013      	strh	r3, [r2, #0]
    4d78:	e7e9      	b.n	4d4e <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d7a:	464a      	mov	r2, r9
    4d7c:	7992      	ldrb	r2, [r2, #6]
    4d7e:	2a01      	cmp	r2, #1
    4d80:	d01c      	beq.n	4dbc <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4d82:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4d84:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    4d86:	702f      	strb	r7, [r5, #0]
		data++;
    4d88:	3501      	adds	r5, #1
	while (length--) {
    4d8a:	4565      	cmp	r5, ip
    4d8c:	d01a      	beq.n	4dc4 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d8e:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4d90:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4d92:	4202      	tst	r2, r0
    4d94:	d0fc      	beq.n	4d90 <trx_frame_read+0xbc>
    4d96:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4d98:	4202      	tst	r2, r0
    4d9a:	d001      	beq.n	4da0 <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4d9c:	4652      	mov	r2, sl
    4d9e:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4da0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4da2:	4222      	tst	r2, r4
    4da4:	d0fc      	beq.n	4da0 <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4da6:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    4da8:	420a      	tst	r2, r1
    4daa:	d0fc      	beq.n	4da6 <trx_frame_read+0xd2>
    4dac:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4dae:	420a      	tst	r2, r1
    4db0:	d0e9      	beq.n	4d86 <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4db2:	8b5a      	ldrh	r2, [r3, #26]
    4db4:	420a      	tst	r2, r1
    4db6:	d0e0      	beq.n	4d7a <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4db8:	8359      	strh	r1, [r3, #26]
    4dba:	e7de      	b.n	4d7a <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4dbc:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    4dbe:	05ff      	lsls	r7, r7, #23
    4dc0:	0dff      	lsrs	r7, r7, #23
    4dc2:	e7e0      	b.n	4d86 <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4dc4:	2200      	movs	r2, #0
    4dc6:	490c      	ldr	r1, [pc, #48]	; (4df8 <trx_frame_read+0x124>)
    4dc8:	480a      	ldr	r0, [pc, #40]	; (4df4 <trx_frame_read+0x120>)
    4dca:	4b0c      	ldr	r3, [pc, #48]	; (4dfc <trx_frame_read+0x128>)
    4dcc:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    4dce:	23ff      	movs	r3, #255	; 0xff
    4dd0:	4642      	mov	r2, r8
    4dd2:	4213      	tst	r3, r2
    4dd4:	d005      	beq.n	4de2 <trx_frame_read+0x10e>
		cpu_irq_enable();
    4dd6:	2201      	movs	r2, #1
    4dd8:	4b05      	ldr	r3, [pc, #20]	; (4df0 <trx_frame_read+0x11c>)
    4dda:	701a      	strb	r2, [r3, #0]
    4ddc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4de0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4de2:	b002      	add	sp, #8
    4de4:	bc1c      	pop	{r2, r3, r4}
    4de6:	4690      	mov	r8, r2
    4de8:	4699      	mov	r9, r3
    4dea:	46a2      	mov	sl, r4
    4dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dee:	46c0      	nop			; (mov r8, r8)
    4df0:	20000008 	.word	0x20000008
    4df4:	20000f88 	.word	0x20000f88
    4df8:	20000f4c 	.word	0x20000f4c
    4dfc:	00000c19 	.word	0x00000c19
    4e00:	20000f44 	.word	0x20000f44

00004e04 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    4e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e06:	46c6      	mov	lr, r8
    4e08:	b500      	push	{lr}
    4e0a:	b082      	sub	sp, #8
    4e0c:	0004      	movs	r4, r0
    4e0e:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4e10:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4e14:	425a      	negs	r2, r3
    4e16:	4153      	adcs	r3, r2
    4e18:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4e1a:	b672      	cpsid	i
    4e1c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4e20:	2200      	movs	r2, #0
    4e22:	4b3a      	ldr	r3, [pc, #232]	; (4f0c <trx_frame_write+0x108>)
    4e24:	701a      	strb	r2, [r3, #0]
	return flags;
    4e26:	9b01      	ldr	r3, [sp, #4]
    4e28:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4e2a:	4f39      	ldr	r7, [pc, #228]	; (4f10 <trx_frame_write+0x10c>)
    4e2c:	3201      	adds	r2, #1
    4e2e:	4939      	ldr	r1, [pc, #228]	; (4f14 <trx_frame_write+0x110>)
    4e30:	0038      	movs	r0, r7
    4e32:	4b39      	ldr	r3, [pc, #228]	; (4f18 <trx_frame_write+0x114>)
    4e34:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4e36:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4e38:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4e3a:	7e1a      	ldrb	r2, [r3, #24]
    4e3c:	420a      	tst	r2, r1
    4e3e:	d0fc      	beq.n	4e3a <trx_frame_write+0x36>
    4e40:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4e42:	07d2      	lsls	r2, r2, #31
    4e44:	d501      	bpl.n	4e4a <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4e46:	2260      	movs	r2, #96	; 0x60
    4e48:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4e4a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4e4c:	7e1a      	ldrb	r2, [r3, #24]
    4e4e:	420a      	tst	r2, r1
    4e50:	d0fc      	beq.n	4e4c <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4e52:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4e54:	7e1a      	ldrb	r2, [r3, #24]
    4e56:	420a      	tst	r2, r1
    4e58:	d0fc      	beq.n	4e54 <trx_frame_write+0x50>
    4e5a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4e5c:	0752      	lsls	r2, r2, #29
    4e5e:	d50c      	bpl.n	4e7a <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4e60:	8b5a      	ldrh	r2, [r3, #26]
    4e62:	0752      	lsls	r2, r2, #29
    4e64:	d501      	bpl.n	4e6a <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4e66:	2204      	movs	r2, #4
    4e68:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e6a:	4a29      	ldr	r2, [pc, #164]	; (4f10 <trx_frame_write+0x10c>)
    4e6c:	7992      	ldrb	r2, [r2, #6]
    4e6e:	2a01      	cmp	r2, #1
    4e70:	d00b      	beq.n	4e8a <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e74:	b2d2      	uxtb	r2, r2
    4e76:	4929      	ldr	r1, [pc, #164]	; (4f1c <trx_frame_write+0x118>)
    4e78:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e7a:	4a25      	ldr	r2, [pc, #148]	; (4f10 <trx_frame_write+0x10c>)
    4e7c:	7992      	ldrb	r2, [r2, #6]
    4e7e:	4694      	mov	ip, r2
    4e80:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4e82:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4e84:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4e86:	2404      	movs	r4, #4
    4e88:	e00d      	b.n	4ea6 <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e8c:	05d2      	lsls	r2, r2, #23
    4e8e:	0dd2      	lsrs	r2, r2, #23
    4e90:	4922      	ldr	r1, [pc, #136]	; (4f1c <trx_frame_write+0x118>)
    4e92:	800a      	strh	r2, [r1, #0]
    4e94:	e7f1      	b.n	4e7a <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e96:	4662      	mov	r2, ip
    4e98:	2a01      	cmp	r2, #1
    4e9a:	d01e      	beq.n	4eda <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e9e:	b2d2      	uxtb	r2, r2
    4ea0:	4e1e      	ldr	r6, [pc, #120]	; (4f1c <trx_frame_write+0x118>)
    4ea2:	8032      	strh	r2, [r6, #0]
    4ea4:	3101      	adds	r1, #1
	while (length--) {
    4ea6:	3d01      	subs	r5, #1
    4ea8:	b2ed      	uxtb	r5, r5
    4eaa:	2dff      	cmp	r5, #255	; 0xff
    4eac:	d01b      	beq.n	4ee6 <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4eae:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4eb0:	423a      	tst	r2, r7
    4eb2:	d0fc      	beq.n	4eae <trx_frame_write+0xaa>
    4eb4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4eb6:	423a      	tst	r2, r7
    4eb8:	d001      	beq.n	4ebe <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4eba:	780a      	ldrb	r2, [r1, #0]
    4ebc:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4ebe:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4ec0:	4202      	tst	r2, r0
    4ec2:	d0fc      	beq.n	4ebe <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4ec4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    4ec6:	4222      	tst	r2, r4
    4ec8:	d0fc      	beq.n	4ec4 <trx_frame_write+0xc0>
    4eca:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4ecc:	4222      	tst	r2, r4
    4ece:	d0e9      	beq.n	4ea4 <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4ed0:	8b5a      	ldrh	r2, [r3, #26]
    4ed2:	4222      	tst	r2, r4
    4ed4:	d0df      	beq.n	4e96 <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4ed6:	835c      	strh	r4, [r3, #26]
    4ed8:	e7dd      	b.n	4e96 <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4edc:	05d2      	lsls	r2, r2, #23
    4ede:	0dd2      	lsrs	r2, r2, #23
    4ee0:	4e0e      	ldr	r6, [pc, #56]	; (4f1c <trx_frame_write+0x118>)
    4ee2:	8032      	strh	r2, [r6, #0]
    4ee4:	e7de      	b.n	4ea4 <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4ee6:	2200      	movs	r2, #0
    4ee8:	490a      	ldr	r1, [pc, #40]	; (4f14 <trx_frame_write+0x110>)
    4eea:	4809      	ldr	r0, [pc, #36]	; (4f10 <trx_frame_write+0x10c>)
    4eec:	4b0a      	ldr	r3, [pc, #40]	; (4f18 <trx_frame_write+0x114>)
    4eee:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    4ef0:	23ff      	movs	r3, #255	; 0xff
    4ef2:	4642      	mov	r2, r8
    4ef4:	4213      	tst	r3, r2
    4ef6:	d005      	beq.n	4f04 <trx_frame_write+0x100>
		cpu_irq_enable();
    4ef8:	2201      	movs	r2, #1
    4efa:	4b04      	ldr	r3, [pc, #16]	; (4f0c <trx_frame_write+0x108>)
    4efc:	701a      	strb	r2, [r3, #0]
    4efe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4f02:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4f04:	b002      	add	sp, #8
    4f06:	bc04      	pop	{r2}
    4f08:	4690      	mov	r8, r2
    4f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f0c:	20000008 	.word	0x20000008
    4f10:	20000f88 	.word	0x20000f88
    4f14:	20000f4c 	.word	0x20000f4c
    4f18:	00000c19 	.word	0x00000c19
    4f1c:	20000f44 	.word	0x20000f44

00004f20 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    4f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f22:	46c6      	mov	lr, r8
    4f24:	b500      	push	{lr}
    4f26:	b082      	sub	sp, #8
    4f28:	0006      	movs	r6, r0
    4f2a:	000d      	movs	r5, r1
    4f2c:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4f2e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4f32:	425a      	negs	r2, r3
    4f34:	4153      	adcs	r3, r2
    4f36:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4f38:	b672      	cpsid	i
    4f3a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4f3e:	2200      	movs	r2, #0
    4f40:	4b4d      	ldr	r3, [pc, #308]	; (5078 <trx_sram_write+0x158>)
    4f42:	701a      	strb	r2, [r3, #0]
	return flags;
    4f44:	9b01      	ldr	r3, [sp, #4]
    4f46:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4f48:	4f4c      	ldr	r7, [pc, #304]	; (507c <trx_sram_write+0x15c>)
    4f4a:	3201      	adds	r2, #1
    4f4c:	494c      	ldr	r1, [pc, #304]	; (5080 <trx_sram_write+0x160>)
    4f4e:	0038      	movs	r0, r7
    4f50:	4b4c      	ldr	r3, [pc, #304]	; (5084 <trx_sram_write+0x164>)
    4f52:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4f54:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4f56:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4f58:	7e1a      	ldrb	r2, [r3, #24]
    4f5a:	420a      	tst	r2, r1
    4f5c:	d0fc      	beq.n	4f58 <trx_sram_write+0x38>
    4f5e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4f60:	07d2      	lsls	r2, r2, #31
    4f62:	d501      	bpl.n	4f68 <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4f64:	2240      	movs	r2, #64	; 0x40
    4f66:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4f68:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4f6a:	7e1a      	ldrb	r2, [r3, #24]
    4f6c:	420a      	tst	r2, r1
    4f6e:	d0fc      	beq.n	4f6a <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4f70:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4f72:	7e1a      	ldrb	r2, [r3, #24]
    4f74:	420a      	tst	r2, r1
    4f76:	d0fc      	beq.n	4f72 <trx_sram_write+0x52>
    4f78:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4f7a:	0752      	lsls	r2, r2, #29
    4f7c:	d50c      	bpl.n	4f98 <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4f7e:	8b5a      	ldrh	r2, [r3, #26]
    4f80:	0752      	lsls	r2, r2, #29
    4f82:	d501      	bpl.n	4f88 <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4f84:	2204      	movs	r2, #4
    4f86:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4f88:	4a3c      	ldr	r2, [pc, #240]	; (507c <trx_sram_write+0x15c>)
    4f8a:	7992      	ldrb	r2, [r2, #6]
    4f8c:	2a01      	cmp	r2, #1
    4f8e:	d02b      	beq.n	4fe8 <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f92:	b2d2      	uxtb	r2, r2
    4f94:	493c      	ldr	r1, [pc, #240]	; (5088 <trx_sram_write+0x168>)
    4f96:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    4f98:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4f9a:	7e1a      	ldrb	r2, [r3, #24]
    4f9c:	420a      	tst	r2, r1
    4f9e:	d0fc      	beq.n	4f9a <trx_sram_write+0x7a>
    4fa0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4fa2:	07d2      	lsls	r2, r2, #31
    4fa4:	d500      	bpl.n	4fa8 <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4fa6:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4fa8:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4faa:	7e1a      	ldrb	r2, [r3, #24]
    4fac:	420a      	tst	r2, r1
    4fae:	d0fc      	beq.n	4faa <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4fb0:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4fb2:	7e1a      	ldrb	r2, [r3, #24]
    4fb4:	420a      	tst	r2, r1
    4fb6:	d0fc      	beq.n	4fb2 <trx_sram_write+0x92>
    4fb8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    4fba:	0752      	lsls	r2, r2, #29
    4fbc:	d50c      	bpl.n	4fd8 <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4fbe:	8b5a      	ldrh	r2, [r3, #26]
    4fc0:	0752      	lsls	r2, r2, #29
    4fc2:	d501      	bpl.n	4fc8 <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4fc4:	2204      	movs	r2, #4
    4fc6:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4fc8:	4a2c      	ldr	r2, [pc, #176]	; (507c <trx_sram_write+0x15c>)
    4fca:	7992      	ldrb	r2, [r2, #6]
    4fcc:	2a01      	cmp	r2, #1
    4fce:	d011      	beq.n	4ff4 <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4fd2:	b2d2      	uxtb	r2, r2
    4fd4:	492c      	ldr	r1, [pc, #176]	; (5088 <trx_sram_write+0x168>)
    4fd6:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4fd8:	4a28      	ldr	r2, [pc, #160]	; (507c <trx_sram_write+0x15c>)
    4fda:	7992      	ldrb	r2, [r2, #6]
    4fdc:	4694      	mov	ip, r2
    4fde:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4fe0:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    4fe2:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4fe4:	2104      	movs	r1, #4
    4fe6:	e013      	b.n	5010 <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4fea:	05d2      	lsls	r2, r2, #23
    4fec:	0dd2      	lsrs	r2, r2, #23
    4fee:	4926      	ldr	r1, [pc, #152]	; (5088 <trx_sram_write+0x168>)
    4ff0:	800a      	strh	r2, [r1, #0]
    4ff2:	e7d1      	b.n	4f98 <trx_sram_write+0x78>
    4ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ff6:	05d2      	lsls	r2, r2, #23
    4ff8:	0dd2      	lsrs	r2, r2, #23
    4ffa:	4923      	ldr	r1, [pc, #140]	; (5088 <trx_sram_write+0x168>)
    4ffc:	800a      	strh	r2, [r1, #0]
    4ffe:	e7eb      	b.n	4fd8 <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5000:	4662      	mov	r2, ip
    5002:	2a01      	cmp	r2, #1
    5004:	d01e      	beq.n	5044 <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5008:	b2d2      	uxtb	r2, r2
    500a:	4f1f      	ldr	r7, [pc, #124]	; (5088 <trx_sram_write+0x168>)
    500c:	803a      	strh	r2, [r7, #0]
    500e:	3001      	adds	r0, #1
	while (length--) {
    5010:	3c01      	subs	r4, #1
    5012:	b2e4      	uxtb	r4, r4
    5014:	2cff      	cmp	r4, #255	; 0xff
    5016:	d01b      	beq.n	5050 <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5018:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    501a:	4232      	tst	r2, r6
    501c:	d0fc      	beq.n	5018 <trx_sram_write+0xf8>
    501e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5020:	4232      	tst	r2, r6
    5022:	d001      	beq.n	5028 <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5024:	7802      	ldrb	r2, [r0, #0]
    5026:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5028:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    502a:	422a      	tst	r2, r5
    502c:	d0fc      	beq.n	5028 <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    502e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    5030:	420a      	tst	r2, r1
    5032:	d0fc      	beq.n	502e <trx_sram_write+0x10e>
    5034:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5036:	420a      	tst	r2, r1
    5038:	d0e9      	beq.n	500e <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    503a:	8b5a      	ldrh	r2, [r3, #26]
    503c:	420a      	tst	r2, r1
    503e:	d0df      	beq.n	5000 <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5040:	8359      	strh	r1, [r3, #26]
    5042:	e7dd      	b.n	5000 <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5046:	05d2      	lsls	r2, r2, #23
    5048:	0dd2      	lsrs	r2, r2, #23
    504a:	4f0f      	ldr	r7, [pc, #60]	; (5088 <trx_sram_write+0x168>)
    504c:	803a      	strh	r2, [r7, #0]
    504e:	e7de      	b.n	500e <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5050:	2200      	movs	r2, #0
    5052:	490b      	ldr	r1, [pc, #44]	; (5080 <trx_sram_write+0x160>)
    5054:	4809      	ldr	r0, [pc, #36]	; (507c <trx_sram_write+0x15c>)
    5056:	4b0b      	ldr	r3, [pc, #44]	; (5084 <trx_sram_write+0x164>)
    5058:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    505a:	23ff      	movs	r3, #255	; 0xff
    505c:	4642      	mov	r2, r8
    505e:	4213      	tst	r3, r2
    5060:	d005      	beq.n	506e <trx_sram_write+0x14e>
		cpu_irq_enable();
    5062:	2201      	movs	r2, #1
    5064:	4b04      	ldr	r3, [pc, #16]	; (5078 <trx_sram_write+0x158>)
    5066:	701a      	strb	r2, [r3, #0]
    5068:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    506c:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    506e:	b002      	add	sp, #8
    5070:	bc04      	pop	{r2}
    5072:	4690      	mov	r8, r2
    5074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5076:	46c0      	nop			; (mov r8, r8)
    5078:	20000008 	.word	0x20000008
    507c:	20000f88 	.word	0x20000f88
    5080:	20000f4c 	.word	0x20000f4c
    5084:	00000c19 	.word	0x00000c19
    5088:	20000f44 	.word	0x20000f44

0000508c <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    508c:	b5f0      	push	{r4, r5, r6, r7, lr}
    508e:	46d6      	mov	lr, sl
    5090:	464f      	mov	r7, r9
    5092:	4646      	mov	r6, r8
    5094:	b5c0      	push	{r6, r7, lr}
    5096:	b082      	sub	sp, #8
    5098:	0004      	movs	r4, r0
    509a:	000d      	movs	r5, r1
    509c:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    509e:	2001      	movs	r0, #1
    50a0:	4b56      	ldr	r3, [pc, #344]	; (51fc <trx_sram_read+0x170>)
    50a2:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    50a4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    50a8:	425a      	negs	r2, r3
    50aa:	4153      	adcs	r3, r2
    50ac:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    50ae:	b672      	cpsid	i
    50b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    50b4:	2200      	movs	r2, #0
    50b6:	4b52      	ldr	r3, [pc, #328]	; (5200 <trx_sram_read+0x174>)
    50b8:	701a      	strb	r2, [r3, #0]
	return flags;
    50ba:	9b01      	ldr	r3, [sp, #4]
    50bc:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    50be:	4e51      	ldr	r6, [pc, #324]	; (5204 <trx_sram_read+0x178>)
    50c0:	3201      	adds	r2, #1
    50c2:	4951      	ldr	r1, [pc, #324]	; (5208 <trx_sram_read+0x17c>)
    50c4:	0030      	movs	r0, r6
    50c6:	4b51      	ldr	r3, [pc, #324]	; (520c <trx_sram_read+0x180>)
    50c8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    50ca:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    50cc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    50ce:	7e1a      	ldrb	r2, [r3, #24]
    50d0:	420a      	tst	r2, r1
    50d2:	d0fc      	beq.n	50ce <trx_sram_read+0x42>
    50d4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    50d6:	07d2      	lsls	r2, r2, #31
    50d8:	d501      	bpl.n	50de <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    50da:	2200      	movs	r2, #0
    50dc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    50de:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    50e0:	7e1a      	ldrb	r2, [r3, #24]
    50e2:	420a      	tst	r2, r1
    50e4:	d0fc      	beq.n	50e0 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    50e6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    50e8:	7e1a      	ldrb	r2, [r3, #24]
    50ea:	420a      	tst	r2, r1
    50ec:	d0fc      	beq.n	50e8 <trx_sram_read+0x5c>
    50ee:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    50f0:	0752      	lsls	r2, r2, #29
    50f2:	d50c      	bpl.n	510e <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    50f4:	8b5a      	ldrh	r2, [r3, #26]
    50f6:	0752      	lsls	r2, r2, #29
    50f8:	d501      	bpl.n	50fe <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    50fa:	2204      	movs	r2, #4
    50fc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    50fe:	4a41      	ldr	r2, [pc, #260]	; (5204 <trx_sram_read+0x178>)
    5100:	7992      	ldrb	r2, [r2, #6]
    5102:	2a01      	cmp	r2, #1
    5104:	d033      	beq.n	516e <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5108:	b2d2      	uxtb	r2, r2
    510a:	4941      	ldr	r1, [pc, #260]	; (5210 <trx_sram_read+0x184>)
    510c:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    510e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5110:	7e1a      	ldrb	r2, [r3, #24]
    5112:	420a      	tst	r2, r1
    5114:	d0fc      	beq.n	5110 <trx_sram_read+0x84>
    5116:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5118:	07d2      	lsls	r2, r2, #31
    511a:	d500      	bpl.n	511e <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    511c:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    511e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5120:	7e1a      	ldrb	r2, [r3, #24]
    5122:	420a      	tst	r2, r1
    5124:	d0fc      	beq.n	5120 <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5126:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5128:	7e1a      	ldrb	r2, [r3, #24]
    512a:	420a      	tst	r2, r1
    512c:	d0fc      	beq.n	5128 <trx_sram_read+0x9c>
    512e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5130:	0752      	lsls	r2, r2, #29
    5132:	d50c      	bpl.n	514e <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5134:	8b5a      	ldrh	r2, [r3, #26]
    5136:	0752      	lsls	r2, r2, #29
    5138:	d501      	bpl.n	513e <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    513a:	2204      	movs	r2, #4
    513c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    513e:	4a31      	ldr	r2, [pc, #196]	; (5204 <trx_sram_read+0x178>)
    5140:	7992      	ldrb	r2, [r2, #6]
    5142:	2a01      	cmp	r2, #1
    5144:	d019      	beq.n	517a <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5148:	b2db      	uxtb	r3, r3
    514a:	4a31      	ldr	r2, [pc, #196]	; (5210 <trx_sram_read+0x184>)
    514c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    514e:	1e7b      	subs	r3, r7, #1
    5150:	b2db      	uxtb	r3, r3
    5152:	2f00      	cmp	r7, #0
    5154:	d03c      	beq.n	51d0 <trx_sram_read+0x144>
    5156:	3301      	adds	r3, #1
    5158:	469c      	mov	ip, r3
    515a:	44ac      	add	ip, r5
    515c:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    515e:	4e29      	ldr	r6, [pc, #164]	; (5204 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    5160:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5162:	2300      	movs	r3, #0
    5164:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    5166:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5168:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    516a:	46b1      	mov	r9, r6
    516c:	e015      	b.n	519a <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    516e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5170:	05d2      	lsls	r2, r2, #23
    5172:	0dd2      	lsrs	r2, r2, #23
    5174:	4926      	ldr	r1, [pc, #152]	; (5210 <trx_sram_read+0x184>)
    5176:	800a      	strh	r2, [r1, #0]
    5178:	e7c9      	b.n	510e <trx_sram_read+0x82>
    517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    517c:	05db      	lsls	r3, r3, #23
    517e:	0ddb      	lsrs	r3, r3, #23
    5180:	4a23      	ldr	r2, [pc, #140]	; (5210 <trx_sram_read+0x184>)
    5182:	8013      	strh	r3, [r2, #0]
    5184:	e7e3      	b.n	514e <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5186:	464a      	mov	r2, r9
    5188:	7992      	ldrb	r2, [r2, #6]
    518a:	2a01      	cmp	r2, #1
    518c:	d01c      	beq.n	51c8 <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    518e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    5190:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    5192:	702f      	strb	r7, [r5, #0]
		data++;
    5194:	3501      	adds	r5, #1
	while (length--) {
    5196:	4565      	cmp	r5, ip
    5198:	d01a      	beq.n	51d0 <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    519a:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    519c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    519e:	4202      	tst	r2, r0
    51a0:	d0fc      	beq.n	519c <trx_sram_read+0x110>
    51a2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    51a4:	4202      	tst	r2, r0
    51a6:	d001      	beq.n	51ac <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    51a8:	4652      	mov	r2, sl
    51aa:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    51ac:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    51ae:	4222      	tst	r2, r4
    51b0:	d0fc      	beq.n	51ac <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    51b2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    51b4:	420a      	tst	r2, r1
    51b6:	d0fc      	beq.n	51b2 <trx_sram_read+0x126>
    51b8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    51ba:	420a      	tst	r2, r1
    51bc:	d0e9      	beq.n	5192 <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    51be:	8b5a      	ldrh	r2, [r3, #26]
    51c0:	420a      	tst	r2, r1
    51c2:	d0e0      	beq.n	5186 <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    51c4:	8359      	strh	r1, [r3, #26]
    51c6:	e7de      	b.n	5186 <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    51c8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    51ca:	05ff      	lsls	r7, r7, #23
    51cc:	0dff      	lsrs	r7, r7, #23
    51ce:	e7e0      	b.n	5192 <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    51d0:	2200      	movs	r2, #0
    51d2:	490d      	ldr	r1, [pc, #52]	; (5208 <trx_sram_read+0x17c>)
    51d4:	480b      	ldr	r0, [pc, #44]	; (5204 <trx_sram_read+0x178>)
    51d6:	4b0d      	ldr	r3, [pc, #52]	; (520c <trx_sram_read+0x180>)
    51d8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    51da:	23ff      	movs	r3, #255	; 0xff
    51dc:	4642      	mov	r2, r8
    51de:	4213      	tst	r3, r2
    51e0:	d005      	beq.n	51ee <trx_sram_read+0x162>
		cpu_irq_enable();
    51e2:	2201      	movs	r2, #1
    51e4:	4b06      	ldr	r3, [pc, #24]	; (5200 <trx_sram_read+0x174>)
    51e6:	701a      	strb	r2, [r3, #0]
    51e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    51ec:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    51ee:	b002      	add	sp, #8
    51f0:	bc1c      	pop	{r2, r3, r4}
    51f2:	4690      	mov	r8, r2
    51f4:	4699      	mov	r9, r3
    51f6:	46a2      	mov	sl, r4
    51f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51fa:	46c0      	nop			; (mov r8, r8)
    51fc:	00000155 	.word	0x00000155
    5200:	20000008 	.word	0x20000008
    5204:	20000f88 	.word	0x20000f88
    5208:	20000f4c 	.word	0x20000f4c
    520c:	00000c19 	.word	0x00000c19
    5210:	20000f44 	.word	0x20000f44

00005214 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    5214:	b5f0      	push	{r4, r5, r6, r7, lr}
    5216:	46d6      	mov	lr, sl
    5218:	464f      	mov	r7, r9
    521a:	4646      	mov	r6, r8
    521c:	b5c0      	push	{r6, r7, lr}
    521e:	0006      	movs	r6, r0
    5220:	468a      	mov	sl, r1
    5222:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    5224:	2001      	movs	r0, #1
    5226:	4b76      	ldr	r3, [pc, #472]	; (5400 <trx_aes_wrrd+0x1ec>)
    5228:	4798      	blx	r3

	ENTER_TRX_REGION();
    522a:	2100      	movs	r1, #0
    522c:	2000      	movs	r0, #0
    522e:	4b75      	ldr	r3, [pc, #468]	; (5404 <trx_aes_wrrd+0x1f0>)
    5230:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5232:	4f75      	ldr	r7, [pc, #468]	; (5408 <trx_aes_wrrd+0x1f4>)
    5234:	2201      	movs	r2, #1
    5236:	4975      	ldr	r1, [pc, #468]	; (540c <trx_aes_wrrd+0x1f8>)
    5238:	0038      	movs	r0, r7
    523a:	4b75      	ldr	r3, [pc, #468]	; (5410 <trx_aes_wrrd+0x1fc>)
    523c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    523e:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    5240:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5242:	7e1a      	ldrb	r2, [r3, #24]
    5244:	420a      	tst	r2, r1
    5246:	d0fc      	beq.n	5242 <trx_aes_wrrd+0x2e>
    5248:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    524a:	07d2      	lsls	r2, r2, #31
    524c:	d501      	bpl.n	5252 <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    524e:	2240      	movs	r2, #64	; 0x40
    5250:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    5252:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5254:	7e1a      	ldrb	r2, [r3, #24]
    5256:	420a      	tst	r2, r1
    5258:	d0fc      	beq.n	5254 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    525a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    525c:	7e1a      	ldrb	r2, [r3, #24]
    525e:	420a      	tst	r2, r1
    5260:	d0fc      	beq.n	525c <trx_aes_wrrd+0x48>
    5262:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    5264:	0752      	lsls	r2, r2, #29
    5266:	d50c      	bpl.n	5282 <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5268:	8b5a      	ldrh	r2, [r3, #26]
    526a:	0752      	lsls	r2, r2, #29
    526c:	d501      	bpl.n	5272 <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    526e:	2204      	movs	r2, #4
    5270:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5272:	4a65      	ldr	r2, [pc, #404]	; (5408 <trx_aes_wrrd+0x1f4>)
    5274:	7992      	ldrb	r2, [r2, #6]
    5276:	2a01      	cmp	r2, #1
    5278:	d055      	beq.n	5326 <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    527a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    527c:	b2d2      	uxtb	r2, r2
    527e:	4965      	ldr	r1, [pc, #404]	; (5414 <trx_aes_wrrd+0x200>)
    5280:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    5282:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5284:	7e1a      	ldrb	r2, [r3, #24]
    5286:	420a      	tst	r2, r1
    5288:	d0fc      	beq.n	5284 <trx_aes_wrrd+0x70>
    528a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    528c:	07d2      	lsls	r2, r2, #31
    528e:	d500      	bpl.n	5292 <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5290:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5292:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5294:	7e1a      	ldrb	r2, [r3, #24]
    5296:	420a      	tst	r2, r1
    5298:	d0fc      	beq.n	5294 <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    529a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    529c:	7e1a      	ldrb	r2, [r3, #24]
    529e:	420a      	tst	r2, r1
    52a0:	d0fc      	beq.n	529c <trx_aes_wrrd+0x88>
    52a2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    52a4:	0752      	lsls	r2, r2, #29
    52a6:	d50c      	bpl.n	52c2 <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    52a8:	8b5a      	ldrh	r2, [r3, #26]
    52aa:	0752      	lsls	r2, r2, #29
    52ac:	d501      	bpl.n	52b2 <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    52ae:	2204      	movs	r2, #4
    52b0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    52b2:	4a55      	ldr	r2, [pc, #340]	; (5408 <trx_aes_wrrd+0x1f4>)
    52b4:	7992      	ldrb	r2, [r2, #6]
    52b6:	2a01      	cmp	r2, #1
    52b8:	d03b      	beq.n	5332 <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    52ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    52bc:	b2d2      	uxtb	r2, r2
    52be:	4955      	ldr	r1, [pc, #340]	; (5414 <trx_aes_wrrd+0x200>)
    52c0:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    52c2:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    52c4:	7e1a      	ldrb	r2, [r3, #24]
    52c6:	420a      	tst	r2, r1
    52c8:	d0fc      	beq.n	52c4 <trx_aes_wrrd+0xb0>
    52ca:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    52cc:	07d2      	lsls	r2, r2, #31
    52ce:	d502      	bpl.n	52d6 <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    52d0:	4652      	mov	r2, sl
    52d2:	7812      	ldrb	r2, [r2, #0]
    52d4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    52d6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    52d8:	7e1a      	ldrb	r2, [r3, #24]
    52da:	420a      	tst	r2, r1
    52dc:	d0fc      	beq.n	52d8 <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    52de:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    52e0:	7e1a      	ldrb	r2, [r3, #24]
    52e2:	420a      	tst	r2, r1
    52e4:	d0fc      	beq.n	52e0 <trx_aes_wrrd+0xcc>
    52e6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    52e8:	0752      	lsls	r2, r2, #29
    52ea:	d50c      	bpl.n	5306 <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    52ec:	8b5a      	ldrh	r2, [r3, #26]
    52ee:	0752      	lsls	r2, r2, #29
    52f0:	d501      	bpl.n	52f6 <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    52f2:	2204      	movs	r2, #4
    52f4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    52f6:	4a44      	ldr	r2, [pc, #272]	; (5408 <trx_aes_wrrd+0x1f4>)
    52f8:	7992      	ldrb	r2, [r2, #6]
    52fa:	2a01      	cmp	r2, #1
    52fc:	d01f      	beq.n	533e <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    52fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5300:	b2db      	uxtb	r3, r3
    5302:	4a44      	ldr	r2, [pc, #272]	; (5414 <trx_aes_wrrd+0x200>)
    5304:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    5306:	2700      	movs	r7, #0
    5308:	2c00      	cmp	r4, #0
    530a:	d043      	beq.n	5394 <trx_aes_wrrd+0x180>
    530c:	4656      	mov	r6, sl
    530e:	3c01      	subs	r4, #1
    5310:	b2e4      	uxtb	r4, r4
    5312:	3401      	adds	r4, #1
    5314:	44a2      	add	sl, r4
    5316:	46d0      	mov	r8, sl
    5318:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    531a:	4d3b      	ldr	r5, [pc, #236]	; (5408 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    531c:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    531e:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    5320:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5322:	46a9      	mov	r9, r5
    5324:	e01b      	b.n	535e <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5328:	05d2      	lsls	r2, r2, #23
    532a:	0dd2      	lsrs	r2, r2, #23
    532c:	4939      	ldr	r1, [pc, #228]	; (5414 <trx_aes_wrrd+0x200>)
    532e:	800a      	strh	r2, [r1, #0]
    5330:	e7a7      	b.n	5282 <trx_aes_wrrd+0x6e>
    5332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5334:	05d2      	lsls	r2, r2, #23
    5336:	0dd2      	lsrs	r2, r2, #23
    5338:	4936      	ldr	r1, [pc, #216]	; (5414 <trx_aes_wrrd+0x200>)
    533a:	800a      	strh	r2, [r1, #0]
    533c:	e7c1      	b.n	52c2 <trx_aes_wrrd+0xae>
    533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5340:	05db      	lsls	r3, r3, #23
    5342:	0ddb      	lsrs	r3, r3, #23
    5344:	4a33      	ldr	r2, [pc, #204]	; (5414 <trx_aes_wrrd+0x200>)
    5346:	8013      	strh	r3, [r2, #0]
    5348:	e7dd      	b.n	5306 <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    534a:	464a      	mov	r2, r9
    534c:	7992      	ldrb	r2, [r2, #6]
    534e:	2a01      	cmp	r2, #1
    5350:	d01c      	beq.n	538c <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5352:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    5354:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    5356:	7037      	strb	r7, [r6, #0]
    5358:	3601      	adds	r6, #1
	while (length > 0) {
    535a:	45b0      	cmp	r8, r6
    535c:	d01a      	beq.n	5394 <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    535e:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5360:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    5362:	4202      	tst	r2, r0
    5364:	d0fc      	beq.n	5360 <trx_aes_wrrd+0x14c>
    5366:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5368:	4202      	tst	r2, r0
    536a:	d001      	beq.n	5370 <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    536c:	7872      	ldrb	r2, [r6, #1]
    536e:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5370:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    5372:	4222      	tst	r2, r4
    5374:	d0fc      	beq.n	5370 <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5376:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    5378:	420a      	tst	r2, r1
    537a:	d0fc      	beq.n	5376 <trx_aes_wrrd+0x162>
    537c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    537e:	420a      	tst	r2, r1
    5380:	d0e9      	beq.n	5356 <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5382:	8b5a      	ldrh	r2, [r3, #26]
    5384:	420a      	tst	r2, r1
    5386:	d0e0      	beq.n	534a <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5388:	8359      	strh	r1, [r3, #26]
    538a:	e7de      	b.n	534a <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    538c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    538e:	05ff      	lsls	r7, r7, #23
    5390:	0dff      	lsrs	r7, r7, #23
    5392:	e7e0      	b.n	5356 <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5394:	4b1c      	ldr	r3, [pc, #112]	; (5408 <trx_aes_wrrd+0x1f4>)
    5396:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    5398:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    539a:	7e1a      	ldrb	r2, [r3, #24]
    539c:	420a      	tst	r2, r1
    539e:	d0fc      	beq.n	539a <trx_aes_wrrd+0x186>
    53a0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    53a2:	07d2      	lsls	r2, r2, #31
    53a4:	d501      	bpl.n	53aa <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    53a6:	2200      	movs	r2, #0
    53a8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    53aa:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    53ac:	7e1a      	ldrb	r2, [r3, #24]
    53ae:	420a      	tst	r2, r1
    53b0:	d0fc      	beq.n	53ac <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    53b2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    53b4:	7e1a      	ldrb	r2, [r3, #24]
    53b6:	420a      	tst	r2, r1
    53b8:	d0fc      	beq.n	53b4 <trx_aes_wrrd+0x1a0>
    53ba:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    53bc:	0752      	lsls	r2, r2, #29
    53be:	d50a      	bpl.n	53d6 <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    53c0:	8b5a      	ldrh	r2, [r3, #26]
    53c2:	0752      	lsls	r2, r2, #29
    53c4:	d501      	bpl.n	53ca <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    53c6:	2204      	movs	r2, #4
    53c8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    53ca:	4a0f      	ldr	r2, [pc, #60]	; (5408 <trx_aes_wrrd+0x1f4>)
    53cc:	7992      	ldrb	r2, [r2, #6]
    53ce:	2a01      	cmp	r2, #1
    53d0:	d011      	beq.n	53f6 <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    53d2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    53d4:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    53d6:	4653      	mov	r3, sl
    53d8:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    53da:	2200      	movs	r2, #0
    53dc:	490b      	ldr	r1, [pc, #44]	; (540c <trx_aes_wrrd+0x1f8>)
    53de:	480a      	ldr	r0, [pc, #40]	; (5408 <trx_aes_wrrd+0x1f4>)
    53e0:	4b0b      	ldr	r3, [pc, #44]	; (5410 <trx_aes_wrrd+0x1fc>)
    53e2:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    53e4:	2100      	movs	r1, #0
    53e6:	2000      	movs	r0, #0
    53e8:	4b0b      	ldr	r3, [pc, #44]	; (5418 <trx_aes_wrrd+0x204>)
    53ea:	4798      	blx	r3
}
    53ec:	bc1c      	pop	{r2, r3, r4}
    53ee:	4690      	mov	r8, r2
    53f0:	4699      	mov	r9, r3
    53f2:	46a2      	mov	sl, r4
    53f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    53f6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    53f8:	05ff      	lsls	r7, r7, #23
    53fa:	0dff      	lsrs	r7, r7, #23
    53fc:	e7eb      	b.n	53d6 <trx_aes_wrrd+0x1c2>
    53fe:	46c0      	nop			; (mov r8, r8)
    5400:	00000155 	.word	0x00000155
    5404:	00000311 	.word	0x00000311
    5408:	20000f88 	.word	0x20000f88
    540c:	20000f4c 	.word	0x20000f4c
    5410:	00000c19 	.word	0x00000c19
    5414:	20000f44 	.word	0x20000f44
    5418:	000002f1 	.word	0x000002f1

0000541c <main>:

 #include "wsndemo.h"
 #include "asf.h"

int main(void)
{
    541c:	b510      	push	{r4, lr}
	irq_initialize_vectors();

	#if SAMD || SAMR21 || SAML21
	system_init();
    541e:	4b07      	ldr	r3, [pc, #28]	; (543c <main+0x20>)
    5420:	4798      	blx	r3
	delay_init();
    5422:	4b07      	ldr	r3, [pc, #28]	; (5440 <main+0x24>)
    5424:	4798      	blx	r3
	#else
	sysclk_init();
	board_init();
	#endif

	wsndemo_init();
    5426:	4b07      	ldr	r3, [pc, #28]	; (5444 <main+0x28>)
    5428:	4798      	blx	r3
	cpu_irq_enable();
    542a:	2201      	movs	r2, #1
    542c:	4b06      	ldr	r3, [pc, #24]	; (5448 <main+0x2c>)
    542e:	701a      	strb	r2, [r3, #0]
    5430:	f3bf 8f5f 	dmb	sy
    5434:	b662      	cpsie	i

	while (1) {
		wsndemo_task();
    5436:	4c05      	ldr	r4, [pc, #20]	; (544c <main+0x30>)
    5438:	47a0      	blx	r4
    543a:	e7fd      	b.n	5438 <main+0x1c>
    543c:	00001c41 	.word	0x00001c41
    5440:	00000115 	.word	0x00000115
    5444:	000028e9 	.word	0x000028e9
    5448:	20000008 	.word	0x20000008
    544c:	000028fd 	.word	0x000028fd

00005450 <common_tc_delay>:
    5450:	b510      	push	{r4, lr}
    5452:	1c04      	adds	r4, r0, #0
    5454:	4b13      	ldr	r3, [pc, #76]	; (54a4 <common_tc_delay+0x54>)
    5456:	4798      	blx	r3
    5458:	4b13      	ldr	r3, [pc, #76]	; (54a8 <common_tc_delay+0x58>)
    545a:	781a      	ldrb	r2, [r3, #0]
    545c:	4362      	muls	r2, r4
    545e:	1881      	adds	r1, r0, r2
    5460:	4b12      	ldr	r3, [pc, #72]	; (54ac <common_tc_delay+0x5c>)
    5462:	6059      	str	r1, [r3, #4]
    5464:	6859      	ldr	r1, [r3, #4]
    5466:	0c09      	lsrs	r1, r1, #16
    5468:	6059      	str	r1, [r3, #4]
    546a:	685b      	ldr	r3, [r3, #4]
    546c:	2b00      	cmp	r3, #0
    546e:	d007      	beq.n	5480 <common_tc_delay+0x30>
    5470:	4b0e      	ldr	r3, [pc, #56]	; (54ac <common_tc_delay+0x5c>)
    5472:	6859      	ldr	r1, [r3, #4]
    5474:	3201      	adds	r2, #1
    5476:	1880      	adds	r0, r0, r2
    5478:	8118      	strh	r0, [r3, #8]
    547a:	4b0d      	ldr	r3, [pc, #52]	; (54b0 <common_tc_delay+0x60>)
    547c:	4798      	blx	r3
    547e:	e004      	b.n	548a <common_tc_delay+0x3a>
    5480:	1882      	adds	r2, r0, r2
    5482:	4b0a      	ldr	r3, [pc, #40]	; (54ac <common_tc_delay+0x5c>)
    5484:	811a      	strh	r2, [r3, #8]
    5486:	4b0b      	ldr	r3, [pc, #44]	; (54b4 <common_tc_delay+0x64>)
    5488:	4798      	blx	r3
    548a:	4b08      	ldr	r3, [pc, #32]	; (54ac <common_tc_delay+0x5c>)
    548c:	891b      	ldrh	r3, [r3, #8]
    548e:	2b63      	cmp	r3, #99	; 0x63
    5490:	d802      	bhi.n	5498 <common_tc_delay+0x48>
    5492:	3364      	adds	r3, #100	; 0x64
    5494:	4a05      	ldr	r2, [pc, #20]	; (54ac <common_tc_delay+0x5c>)
    5496:	8113      	strh	r3, [r2, #8]
    5498:	4b04      	ldr	r3, [pc, #16]	; (54ac <common_tc_delay+0x5c>)
    549a:	8918      	ldrh	r0, [r3, #8]
    549c:	4b06      	ldr	r3, [pc, #24]	; (54b8 <common_tc_delay+0x68>)
    549e:	4798      	blx	r3
    54a0:	bd10      	pop	{r4, pc}
    54a2:	46c0      	nop			; (mov r8, r8)
    54a4:	00004645 	.word	0x00004645
    54a8:	20000f94 	.word	0x20000f94
    54ac:	20000df8 	.word	0x20000df8
    54b0:	00004659 	.word	0x00004659
    54b4:	0000466d 	.word	0x0000466d
    54b8:	000046a9 	.word	0x000046a9

000054bc <common_tc_init>:
    54bc:	b508      	push	{r3, lr}
    54be:	2200      	movs	r2, #0
    54c0:	4b03      	ldr	r3, [pc, #12]	; (54d0 <common_tc_init+0x14>)
    54c2:	701a      	strb	r2, [r3, #0]
    54c4:	4b03      	ldr	r3, [pc, #12]	; (54d4 <common_tc_init+0x18>)
    54c6:	4798      	blx	r3
    54c8:	4b03      	ldr	r3, [pc, #12]	; (54d8 <common_tc_init+0x1c>)
    54ca:	7018      	strb	r0, [r3, #0]
    54cc:	bd08      	pop	{r3, pc}
    54ce:	46c0      	nop			; (mov r8, r8)
    54d0:	20000df8 	.word	0x20000df8
    54d4:	000046c1 	.word	0x000046c1
    54d8:	20000f94 	.word	0x20000f94

000054dc <tmr_ovf_callback>:
    54dc:	b508      	push	{r3, lr}
    54de:	4b0e      	ldr	r3, [pc, #56]	; (5518 <tmr_ovf_callback+0x3c>)
    54e0:	685b      	ldr	r3, [r3, #4]
    54e2:	2b00      	cmp	r3, #0
    54e4:	d007      	beq.n	54f6 <tmr_ovf_callback+0x1a>
    54e6:	4a0c      	ldr	r2, [pc, #48]	; (5518 <tmr_ovf_callback+0x3c>)
    54e8:	6853      	ldr	r3, [r2, #4]
    54ea:	3b01      	subs	r3, #1
    54ec:	6053      	str	r3, [r2, #4]
    54ee:	2b00      	cmp	r3, #0
    54f0:	d101      	bne.n	54f6 <tmr_ovf_callback+0x1a>
    54f2:	4b0a      	ldr	r3, [pc, #40]	; (551c <tmr_ovf_callback+0x40>)
    54f4:	4798      	blx	r3
    54f6:	4a08      	ldr	r2, [pc, #32]	; (5518 <tmr_ovf_callback+0x3c>)
    54f8:	7813      	ldrb	r3, [r2, #0]
    54fa:	3301      	adds	r3, #1
    54fc:	b2db      	uxtb	r3, r3
    54fe:	7013      	strb	r3, [r2, #0]
    5500:	4a07      	ldr	r2, [pc, #28]	; (5520 <tmr_ovf_callback+0x44>)
    5502:	7812      	ldrb	r2, [r2, #0]
    5504:	429a      	cmp	r2, r3
    5506:	d806      	bhi.n	5516 <tmr_ovf_callback+0x3a>
    5508:	4b03      	ldr	r3, [pc, #12]	; (5518 <tmr_ovf_callback+0x3c>)
    550a:	2200      	movs	r2, #0
    550c:	701a      	strb	r2, [r3, #0]
    550e:	68db      	ldr	r3, [r3, #12]
    5510:	2b00      	cmp	r3, #0
    5512:	d000      	beq.n	5516 <tmr_ovf_callback+0x3a>
    5514:	4798      	blx	r3
    5516:	bd08      	pop	{r3, pc}
    5518:	20000df8 	.word	0x20000df8
    551c:	0000466d 	.word	0x0000466d
    5520:	20000f94 	.word	0x20000f94

00005524 <tmr_cca_callback>:
    5524:	b508      	push	{r3, lr}
    5526:	4b04      	ldr	r3, [pc, #16]	; (5538 <tmr_cca_callback+0x14>)
    5528:	4798      	blx	r3
    552a:	4b04      	ldr	r3, [pc, #16]	; (553c <tmr_cca_callback+0x18>)
    552c:	691b      	ldr	r3, [r3, #16]
    552e:	2b00      	cmp	r3, #0
    5530:	d000      	beq.n	5534 <tmr_cca_callback+0x10>
    5532:	4798      	blx	r3
    5534:	bd08      	pop	{r3, pc}
    5536:	46c0      	nop			; (mov r8, r8)
    5538:	00004659 	.word	0x00004659
    553c:	20000df8 	.word	0x20000df8

00005540 <set_common_tc_expiry_callback>:
    5540:	4b01      	ldr	r3, [pc, #4]	; (5548 <set_common_tc_expiry_callback+0x8>)
    5542:	6118      	str	r0, [r3, #16]
    5544:	4770      	bx	lr
    5546:	46c0      	nop			; (mov r8, r8)
    5548:	20000df8 	.word	0x20000df8

0000554c <__udivsi3>:
    554c:	2200      	movs	r2, #0
    554e:	0843      	lsrs	r3, r0, #1
    5550:	428b      	cmp	r3, r1
    5552:	d374      	bcc.n	563e <__udivsi3+0xf2>
    5554:	0903      	lsrs	r3, r0, #4
    5556:	428b      	cmp	r3, r1
    5558:	d35f      	bcc.n	561a <__udivsi3+0xce>
    555a:	0a03      	lsrs	r3, r0, #8
    555c:	428b      	cmp	r3, r1
    555e:	d344      	bcc.n	55ea <__udivsi3+0x9e>
    5560:	0b03      	lsrs	r3, r0, #12
    5562:	428b      	cmp	r3, r1
    5564:	d328      	bcc.n	55b8 <__udivsi3+0x6c>
    5566:	0c03      	lsrs	r3, r0, #16
    5568:	428b      	cmp	r3, r1
    556a:	d30d      	bcc.n	5588 <__udivsi3+0x3c>
    556c:	22ff      	movs	r2, #255	; 0xff
    556e:	0209      	lsls	r1, r1, #8
    5570:	ba12      	rev	r2, r2
    5572:	0c03      	lsrs	r3, r0, #16
    5574:	428b      	cmp	r3, r1
    5576:	d302      	bcc.n	557e <__udivsi3+0x32>
    5578:	1212      	asrs	r2, r2, #8
    557a:	0209      	lsls	r1, r1, #8
    557c:	d065      	beq.n	564a <__udivsi3+0xfe>
    557e:	0b03      	lsrs	r3, r0, #12
    5580:	428b      	cmp	r3, r1
    5582:	d319      	bcc.n	55b8 <__udivsi3+0x6c>
    5584:	e000      	b.n	5588 <__udivsi3+0x3c>
    5586:	0a09      	lsrs	r1, r1, #8
    5588:	0bc3      	lsrs	r3, r0, #15
    558a:	428b      	cmp	r3, r1
    558c:	d301      	bcc.n	5592 <__udivsi3+0x46>
    558e:	03cb      	lsls	r3, r1, #15
    5590:	1ac0      	subs	r0, r0, r3
    5592:	4152      	adcs	r2, r2
    5594:	0b83      	lsrs	r3, r0, #14
    5596:	428b      	cmp	r3, r1
    5598:	d301      	bcc.n	559e <__udivsi3+0x52>
    559a:	038b      	lsls	r3, r1, #14
    559c:	1ac0      	subs	r0, r0, r3
    559e:	4152      	adcs	r2, r2
    55a0:	0b43      	lsrs	r3, r0, #13
    55a2:	428b      	cmp	r3, r1
    55a4:	d301      	bcc.n	55aa <__udivsi3+0x5e>
    55a6:	034b      	lsls	r3, r1, #13
    55a8:	1ac0      	subs	r0, r0, r3
    55aa:	4152      	adcs	r2, r2
    55ac:	0b03      	lsrs	r3, r0, #12
    55ae:	428b      	cmp	r3, r1
    55b0:	d301      	bcc.n	55b6 <__udivsi3+0x6a>
    55b2:	030b      	lsls	r3, r1, #12
    55b4:	1ac0      	subs	r0, r0, r3
    55b6:	4152      	adcs	r2, r2
    55b8:	0ac3      	lsrs	r3, r0, #11
    55ba:	428b      	cmp	r3, r1
    55bc:	d301      	bcc.n	55c2 <__udivsi3+0x76>
    55be:	02cb      	lsls	r3, r1, #11
    55c0:	1ac0      	subs	r0, r0, r3
    55c2:	4152      	adcs	r2, r2
    55c4:	0a83      	lsrs	r3, r0, #10
    55c6:	428b      	cmp	r3, r1
    55c8:	d301      	bcc.n	55ce <__udivsi3+0x82>
    55ca:	028b      	lsls	r3, r1, #10
    55cc:	1ac0      	subs	r0, r0, r3
    55ce:	4152      	adcs	r2, r2
    55d0:	0a43      	lsrs	r3, r0, #9
    55d2:	428b      	cmp	r3, r1
    55d4:	d301      	bcc.n	55da <__udivsi3+0x8e>
    55d6:	024b      	lsls	r3, r1, #9
    55d8:	1ac0      	subs	r0, r0, r3
    55da:	4152      	adcs	r2, r2
    55dc:	0a03      	lsrs	r3, r0, #8
    55de:	428b      	cmp	r3, r1
    55e0:	d301      	bcc.n	55e6 <__udivsi3+0x9a>
    55e2:	020b      	lsls	r3, r1, #8
    55e4:	1ac0      	subs	r0, r0, r3
    55e6:	4152      	adcs	r2, r2
    55e8:	d2cd      	bcs.n	5586 <__udivsi3+0x3a>
    55ea:	09c3      	lsrs	r3, r0, #7
    55ec:	428b      	cmp	r3, r1
    55ee:	d301      	bcc.n	55f4 <__udivsi3+0xa8>
    55f0:	01cb      	lsls	r3, r1, #7
    55f2:	1ac0      	subs	r0, r0, r3
    55f4:	4152      	adcs	r2, r2
    55f6:	0983      	lsrs	r3, r0, #6
    55f8:	428b      	cmp	r3, r1
    55fa:	d301      	bcc.n	5600 <__udivsi3+0xb4>
    55fc:	018b      	lsls	r3, r1, #6
    55fe:	1ac0      	subs	r0, r0, r3
    5600:	4152      	adcs	r2, r2
    5602:	0943      	lsrs	r3, r0, #5
    5604:	428b      	cmp	r3, r1
    5606:	d301      	bcc.n	560c <__udivsi3+0xc0>
    5608:	014b      	lsls	r3, r1, #5
    560a:	1ac0      	subs	r0, r0, r3
    560c:	4152      	adcs	r2, r2
    560e:	0903      	lsrs	r3, r0, #4
    5610:	428b      	cmp	r3, r1
    5612:	d301      	bcc.n	5618 <__udivsi3+0xcc>
    5614:	010b      	lsls	r3, r1, #4
    5616:	1ac0      	subs	r0, r0, r3
    5618:	4152      	adcs	r2, r2
    561a:	08c3      	lsrs	r3, r0, #3
    561c:	428b      	cmp	r3, r1
    561e:	d301      	bcc.n	5624 <__udivsi3+0xd8>
    5620:	00cb      	lsls	r3, r1, #3
    5622:	1ac0      	subs	r0, r0, r3
    5624:	4152      	adcs	r2, r2
    5626:	0883      	lsrs	r3, r0, #2
    5628:	428b      	cmp	r3, r1
    562a:	d301      	bcc.n	5630 <__udivsi3+0xe4>
    562c:	008b      	lsls	r3, r1, #2
    562e:	1ac0      	subs	r0, r0, r3
    5630:	4152      	adcs	r2, r2
    5632:	0843      	lsrs	r3, r0, #1
    5634:	428b      	cmp	r3, r1
    5636:	d301      	bcc.n	563c <__udivsi3+0xf0>
    5638:	004b      	lsls	r3, r1, #1
    563a:	1ac0      	subs	r0, r0, r3
    563c:	4152      	adcs	r2, r2
    563e:	1a41      	subs	r1, r0, r1
    5640:	d200      	bcs.n	5644 <__udivsi3+0xf8>
    5642:	4601      	mov	r1, r0
    5644:	4152      	adcs	r2, r2
    5646:	4610      	mov	r0, r2
    5648:	4770      	bx	lr
    564a:	e7ff      	b.n	564c <__udivsi3+0x100>
    564c:	b501      	push	{r0, lr}
    564e:	2000      	movs	r0, #0
    5650:	f000 f806 	bl	5660 <__aeabi_idiv0>
    5654:	bd02      	pop	{r1, pc}
    5656:	46c0      	nop			; (mov r8, r8)

00005658 <__aeabi_uidivmod>:
    5658:	2900      	cmp	r1, #0
    565a:	d0f7      	beq.n	564c <__udivsi3+0x100>
    565c:	e776      	b.n	554c <__udivsi3>
    565e:	4770      	bx	lr

00005660 <__aeabi_idiv0>:
    5660:	4770      	bx	lr
    5662:	46c0      	nop			; (mov r8, r8)

00005664 <__aeabi_lmul>:
    5664:	b5f0      	push	{r4, r5, r6, r7, lr}
    5666:	46ce      	mov	lr, r9
    5668:	4647      	mov	r7, r8
    566a:	0415      	lsls	r5, r2, #16
    566c:	0c2d      	lsrs	r5, r5, #16
    566e:	002e      	movs	r6, r5
    5670:	b580      	push	{r7, lr}
    5672:	0407      	lsls	r7, r0, #16
    5674:	0c14      	lsrs	r4, r2, #16
    5676:	0c3f      	lsrs	r7, r7, #16
    5678:	4699      	mov	r9, r3
    567a:	0c03      	lsrs	r3, r0, #16
    567c:	437e      	muls	r6, r7
    567e:	435d      	muls	r5, r3
    5680:	4367      	muls	r7, r4
    5682:	4363      	muls	r3, r4
    5684:	197f      	adds	r7, r7, r5
    5686:	0c34      	lsrs	r4, r6, #16
    5688:	19e4      	adds	r4, r4, r7
    568a:	469c      	mov	ip, r3
    568c:	42a5      	cmp	r5, r4
    568e:	d903      	bls.n	5698 <__aeabi_lmul+0x34>
    5690:	2380      	movs	r3, #128	; 0x80
    5692:	025b      	lsls	r3, r3, #9
    5694:	4698      	mov	r8, r3
    5696:	44c4      	add	ip, r8
    5698:	464b      	mov	r3, r9
    569a:	4351      	muls	r1, r2
    569c:	4343      	muls	r3, r0
    569e:	0436      	lsls	r6, r6, #16
    56a0:	0c36      	lsrs	r6, r6, #16
    56a2:	0c25      	lsrs	r5, r4, #16
    56a4:	0424      	lsls	r4, r4, #16
    56a6:	4465      	add	r5, ip
    56a8:	19a4      	adds	r4, r4, r6
    56aa:	1859      	adds	r1, r3, r1
    56ac:	1949      	adds	r1, r1, r5
    56ae:	0020      	movs	r0, r4
    56b0:	bc0c      	pop	{r2, r3}
    56b2:	4690      	mov	r8, r2
    56b4:	4699      	mov	r9, r3
    56b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000056b8 <__libc_init_array>:
    56b8:	b570      	push	{r4, r5, r6, lr}
    56ba:	2600      	movs	r6, #0
    56bc:	4d0c      	ldr	r5, [pc, #48]	; (56f0 <__libc_init_array+0x38>)
    56be:	4c0d      	ldr	r4, [pc, #52]	; (56f4 <__libc_init_array+0x3c>)
    56c0:	1b64      	subs	r4, r4, r5
    56c2:	10a4      	asrs	r4, r4, #2
    56c4:	42a6      	cmp	r6, r4
    56c6:	d109      	bne.n	56dc <__libc_init_array+0x24>
    56c8:	2600      	movs	r6, #0
    56ca:	f000 fd09 	bl	60e0 <_init>
    56ce:	4d0a      	ldr	r5, [pc, #40]	; (56f8 <__libc_init_array+0x40>)
    56d0:	4c0a      	ldr	r4, [pc, #40]	; (56fc <__libc_init_array+0x44>)
    56d2:	1b64      	subs	r4, r4, r5
    56d4:	10a4      	asrs	r4, r4, #2
    56d6:	42a6      	cmp	r6, r4
    56d8:	d105      	bne.n	56e6 <__libc_init_array+0x2e>
    56da:	bd70      	pop	{r4, r5, r6, pc}
    56dc:	00b3      	lsls	r3, r6, #2
    56de:	58eb      	ldr	r3, [r5, r3]
    56e0:	4798      	blx	r3
    56e2:	3601      	adds	r6, #1
    56e4:	e7ee      	b.n	56c4 <__libc_init_array+0xc>
    56e6:	00b3      	lsls	r3, r6, #2
    56e8:	58eb      	ldr	r3, [r5, r3]
    56ea:	4798      	blx	r3
    56ec:	3601      	adds	r6, #1
    56ee:	e7f2      	b.n	56d6 <__libc_init_array+0x1e>
    56f0:	000060ec 	.word	0x000060ec
    56f4:	000060ec 	.word	0x000060ec
    56f8:	000060ec 	.word	0x000060ec
    56fc:	000060f0 	.word	0x000060f0

00005700 <memcpy>:
    5700:	2300      	movs	r3, #0
    5702:	b510      	push	{r4, lr}
    5704:	429a      	cmp	r2, r3
    5706:	d100      	bne.n	570a <memcpy+0xa>
    5708:	bd10      	pop	{r4, pc}
    570a:	5ccc      	ldrb	r4, [r1, r3]
    570c:	54c4      	strb	r4, [r0, r3]
    570e:	3301      	adds	r3, #1
    5710:	e7f8      	b.n	5704 <memcpy+0x4>

00005712 <memset>:
    5712:	0003      	movs	r3, r0
    5714:	1882      	adds	r2, r0, r2
    5716:	4293      	cmp	r3, r2
    5718:	d100      	bne.n	571c <memset+0xa>
    571a:	4770      	bx	lr
    571c:	7019      	strb	r1, [r3, #0]
    571e:	3301      	adds	r3, #1
    5720:	e7f9      	b.n	5716 <memset+0x4>
	...

00005724 <srand>:
    5724:	4b10      	ldr	r3, [pc, #64]	; (5768 <srand+0x44>)
    5726:	b570      	push	{r4, r5, r6, lr}
    5728:	681c      	ldr	r4, [r3, #0]
    572a:	0005      	movs	r5, r0
    572c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    572e:	2b00      	cmp	r3, #0
    5730:	d115      	bne.n	575e <srand+0x3a>
    5732:	2018      	movs	r0, #24
    5734:	f000 facc 	bl	5cd0 <malloc>
    5738:	4b0c      	ldr	r3, [pc, #48]	; (576c <srand+0x48>)
    573a:	63a0      	str	r0, [r4, #56]	; 0x38
    573c:	8003      	strh	r3, [r0, #0]
    573e:	4b0c      	ldr	r3, [pc, #48]	; (5770 <srand+0x4c>)
    5740:	2201      	movs	r2, #1
    5742:	8043      	strh	r3, [r0, #2]
    5744:	4b0b      	ldr	r3, [pc, #44]	; (5774 <srand+0x50>)
    5746:	8083      	strh	r3, [r0, #4]
    5748:	4b0b      	ldr	r3, [pc, #44]	; (5778 <srand+0x54>)
    574a:	80c3      	strh	r3, [r0, #6]
    574c:	4b0b      	ldr	r3, [pc, #44]	; (577c <srand+0x58>)
    574e:	8103      	strh	r3, [r0, #8]
    5750:	2305      	movs	r3, #5
    5752:	8143      	strh	r3, [r0, #10]
    5754:	3306      	adds	r3, #6
    5756:	8183      	strh	r3, [r0, #12]
    5758:	2300      	movs	r3, #0
    575a:	6102      	str	r2, [r0, #16]
    575c:	6143      	str	r3, [r0, #20]
    575e:	2200      	movs	r2, #0
    5760:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5762:	611d      	str	r5, [r3, #16]
    5764:	615a      	str	r2, [r3, #20]
    5766:	bd70      	pop	{r4, r5, r6, pc}
    5768:	2000000c 	.word	0x2000000c
    576c:	0000330e 	.word	0x0000330e
    5770:	ffffabcd 	.word	0xffffabcd
    5774:	00001234 	.word	0x00001234
    5778:	ffffe66d 	.word	0xffffe66d
    577c:	ffffdeec 	.word	0xffffdeec

00005780 <rand>:
    5780:	4b15      	ldr	r3, [pc, #84]	; (57d8 <rand+0x58>)
    5782:	b510      	push	{r4, lr}
    5784:	681c      	ldr	r4, [r3, #0]
    5786:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5788:	2b00      	cmp	r3, #0
    578a:	d115      	bne.n	57b8 <rand+0x38>
    578c:	2018      	movs	r0, #24
    578e:	f000 fa9f 	bl	5cd0 <malloc>
    5792:	4b12      	ldr	r3, [pc, #72]	; (57dc <rand+0x5c>)
    5794:	63a0      	str	r0, [r4, #56]	; 0x38
    5796:	8003      	strh	r3, [r0, #0]
    5798:	4b11      	ldr	r3, [pc, #68]	; (57e0 <rand+0x60>)
    579a:	2201      	movs	r2, #1
    579c:	8043      	strh	r3, [r0, #2]
    579e:	4b11      	ldr	r3, [pc, #68]	; (57e4 <rand+0x64>)
    57a0:	8083      	strh	r3, [r0, #4]
    57a2:	4b11      	ldr	r3, [pc, #68]	; (57e8 <rand+0x68>)
    57a4:	80c3      	strh	r3, [r0, #6]
    57a6:	4b11      	ldr	r3, [pc, #68]	; (57ec <rand+0x6c>)
    57a8:	8103      	strh	r3, [r0, #8]
    57aa:	2305      	movs	r3, #5
    57ac:	8143      	strh	r3, [r0, #10]
    57ae:	3306      	adds	r3, #6
    57b0:	8183      	strh	r3, [r0, #12]
    57b2:	2300      	movs	r3, #0
    57b4:	6102      	str	r2, [r0, #16]
    57b6:	6143      	str	r3, [r0, #20]
    57b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    57ba:	4a0d      	ldr	r2, [pc, #52]	; (57f0 <rand+0x70>)
    57bc:	6920      	ldr	r0, [r4, #16]
    57be:	6961      	ldr	r1, [r4, #20]
    57c0:	4b0c      	ldr	r3, [pc, #48]	; (57f4 <rand+0x74>)
    57c2:	f7ff ff4f 	bl	5664 <__aeabi_lmul>
    57c6:	2201      	movs	r2, #1
    57c8:	2300      	movs	r3, #0
    57ca:	1880      	adds	r0, r0, r2
    57cc:	4159      	adcs	r1, r3
    57ce:	6120      	str	r0, [r4, #16]
    57d0:	6161      	str	r1, [r4, #20]
    57d2:	0048      	lsls	r0, r1, #1
    57d4:	0840      	lsrs	r0, r0, #1
    57d6:	bd10      	pop	{r4, pc}
    57d8:	2000000c 	.word	0x2000000c
    57dc:	0000330e 	.word	0x0000330e
    57e0:	ffffabcd 	.word	0xffffabcd
    57e4:	00001234 	.word	0x00001234
    57e8:	ffffe66d 	.word	0xffffe66d
    57ec:	ffffdeec 	.word	0xffffdeec
    57f0:	4c957f2d 	.word	0x4c957f2d
    57f4:	5851f42d 	.word	0x5851f42d

000057f8 <setbuf>:
    57f8:	424a      	negs	r2, r1
    57fa:	414a      	adcs	r2, r1
    57fc:	2380      	movs	r3, #128	; 0x80
    57fe:	b510      	push	{r4, lr}
    5800:	0052      	lsls	r2, r2, #1
    5802:	00db      	lsls	r3, r3, #3
    5804:	f000 f802 	bl	580c <setvbuf>
    5808:	bd10      	pop	{r4, pc}
	...

0000580c <setvbuf>:
    580c:	b5f0      	push	{r4, r5, r6, r7, lr}
    580e:	001d      	movs	r5, r3
    5810:	4b4f      	ldr	r3, [pc, #316]	; (5950 <setvbuf+0x144>)
    5812:	b085      	sub	sp, #20
    5814:	681e      	ldr	r6, [r3, #0]
    5816:	0004      	movs	r4, r0
    5818:	000f      	movs	r7, r1
    581a:	9200      	str	r2, [sp, #0]
    581c:	2e00      	cmp	r6, #0
    581e:	d005      	beq.n	582c <setvbuf+0x20>
    5820:	69b3      	ldr	r3, [r6, #24]
    5822:	2b00      	cmp	r3, #0
    5824:	d102      	bne.n	582c <setvbuf+0x20>
    5826:	0030      	movs	r0, r6
    5828:	f000 f994 	bl	5b54 <__sinit>
    582c:	4b49      	ldr	r3, [pc, #292]	; (5954 <setvbuf+0x148>)
    582e:	429c      	cmp	r4, r3
    5830:	d150      	bne.n	58d4 <setvbuf+0xc8>
    5832:	6874      	ldr	r4, [r6, #4]
    5834:	9b00      	ldr	r3, [sp, #0]
    5836:	2b02      	cmp	r3, #2
    5838:	d005      	beq.n	5846 <setvbuf+0x3a>
    583a:	2b01      	cmp	r3, #1
    583c:	d900      	bls.n	5840 <setvbuf+0x34>
    583e:	e084      	b.n	594a <setvbuf+0x13e>
    5840:	2d00      	cmp	r5, #0
    5842:	da00      	bge.n	5846 <setvbuf+0x3a>
    5844:	e081      	b.n	594a <setvbuf+0x13e>
    5846:	0021      	movs	r1, r4
    5848:	0030      	movs	r0, r6
    584a:	f000 f915 	bl	5a78 <_fflush_r>
    584e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5850:	2900      	cmp	r1, #0
    5852:	d008      	beq.n	5866 <setvbuf+0x5a>
    5854:	0023      	movs	r3, r4
    5856:	3344      	adds	r3, #68	; 0x44
    5858:	4299      	cmp	r1, r3
    585a:	d002      	beq.n	5862 <setvbuf+0x56>
    585c:	0030      	movs	r0, r6
    585e:	f000 fa41 	bl	5ce4 <_free_r>
    5862:	2300      	movs	r3, #0
    5864:	6363      	str	r3, [r4, #52]	; 0x34
    5866:	2300      	movs	r3, #0
    5868:	61a3      	str	r3, [r4, #24]
    586a:	6063      	str	r3, [r4, #4]
    586c:	89a3      	ldrh	r3, [r4, #12]
    586e:	061b      	lsls	r3, r3, #24
    5870:	d503      	bpl.n	587a <setvbuf+0x6e>
    5872:	6921      	ldr	r1, [r4, #16]
    5874:	0030      	movs	r0, r6
    5876:	f000 fa35 	bl	5ce4 <_free_r>
    587a:	89a3      	ldrh	r3, [r4, #12]
    587c:	4a36      	ldr	r2, [pc, #216]	; (5958 <setvbuf+0x14c>)
    587e:	4013      	ands	r3, r2
    5880:	81a3      	strh	r3, [r4, #12]
    5882:	9b00      	ldr	r3, [sp, #0]
    5884:	2b02      	cmp	r3, #2
    5886:	d05a      	beq.n	593e <setvbuf+0x132>
    5888:	ab03      	add	r3, sp, #12
    588a:	aa02      	add	r2, sp, #8
    588c:	0021      	movs	r1, r4
    588e:	0030      	movs	r0, r6
    5890:	f000 f9f6 	bl	5c80 <__swhatbuf_r>
    5894:	89a3      	ldrh	r3, [r4, #12]
    5896:	4318      	orrs	r0, r3
    5898:	81a0      	strh	r0, [r4, #12]
    589a:	2d00      	cmp	r5, #0
    589c:	d124      	bne.n	58e8 <setvbuf+0xdc>
    589e:	9d02      	ldr	r5, [sp, #8]
    58a0:	0028      	movs	r0, r5
    58a2:	f000 fa15 	bl	5cd0 <malloc>
    58a6:	9501      	str	r5, [sp, #4]
    58a8:	1e07      	subs	r7, r0, #0
    58aa:	d142      	bne.n	5932 <setvbuf+0x126>
    58ac:	9b02      	ldr	r3, [sp, #8]
    58ae:	9301      	str	r3, [sp, #4]
    58b0:	42ab      	cmp	r3, r5
    58b2:	d139      	bne.n	5928 <setvbuf+0x11c>
    58b4:	2001      	movs	r0, #1
    58b6:	4240      	negs	r0, r0
    58b8:	2302      	movs	r3, #2
    58ba:	89a2      	ldrh	r2, [r4, #12]
    58bc:	4313      	orrs	r3, r2
    58be:	81a3      	strh	r3, [r4, #12]
    58c0:	2300      	movs	r3, #0
    58c2:	60a3      	str	r3, [r4, #8]
    58c4:	0023      	movs	r3, r4
    58c6:	3347      	adds	r3, #71	; 0x47
    58c8:	6023      	str	r3, [r4, #0]
    58ca:	6123      	str	r3, [r4, #16]
    58cc:	2301      	movs	r3, #1
    58ce:	6163      	str	r3, [r4, #20]
    58d0:	b005      	add	sp, #20
    58d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58d4:	4b21      	ldr	r3, [pc, #132]	; (595c <setvbuf+0x150>)
    58d6:	429c      	cmp	r4, r3
    58d8:	d101      	bne.n	58de <setvbuf+0xd2>
    58da:	68b4      	ldr	r4, [r6, #8]
    58dc:	e7aa      	b.n	5834 <setvbuf+0x28>
    58de:	4b20      	ldr	r3, [pc, #128]	; (5960 <setvbuf+0x154>)
    58e0:	429c      	cmp	r4, r3
    58e2:	d1a7      	bne.n	5834 <setvbuf+0x28>
    58e4:	68f4      	ldr	r4, [r6, #12]
    58e6:	e7a5      	b.n	5834 <setvbuf+0x28>
    58e8:	2f00      	cmp	r7, #0
    58ea:	d0d9      	beq.n	58a0 <setvbuf+0x94>
    58ec:	69b3      	ldr	r3, [r6, #24]
    58ee:	2b00      	cmp	r3, #0
    58f0:	d102      	bne.n	58f8 <setvbuf+0xec>
    58f2:	0030      	movs	r0, r6
    58f4:	f000 f92e 	bl	5b54 <__sinit>
    58f8:	9b00      	ldr	r3, [sp, #0]
    58fa:	2b01      	cmp	r3, #1
    58fc:	d103      	bne.n	5906 <setvbuf+0xfa>
    58fe:	89a3      	ldrh	r3, [r4, #12]
    5900:	9a00      	ldr	r2, [sp, #0]
    5902:	431a      	orrs	r2, r3
    5904:	81a2      	strh	r2, [r4, #12]
    5906:	2008      	movs	r0, #8
    5908:	89a3      	ldrh	r3, [r4, #12]
    590a:	6027      	str	r7, [r4, #0]
    590c:	6127      	str	r7, [r4, #16]
    590e:	6165      	str	r5, [r4, #20]
    5910:	4018      	ands	r0, r3
    5912:	d018      	beq.n	5946 <setvbuf+0x13a>
    5914:	2001      	movs	r0, #1
    5916:	4018      	ands	r0, r3
    5918:	2300      	movs	r3, #0
    591a:	4298      	cmp	r0, r3
    591c:	d011      	beq.n	5942 <setvbuf+0x136>
    591e:	426d      	negs	r5, r5
    5920:	60a3      	str	r3, [r4, #8]
    5922:	61a5      	str	r5, [r4, #24]
    5924:	0018      	movs	r0, r3
    5926:	e7d3      	b.n	58d0 <setvbuf+0xc4>
    5928:	9801      	ldr	r0, [sp, #4]
    592a:	f000 f9d1 	bl	5cd0 <malloc>
    592e:	1e07      	subs	r7, r0, #0
    5930:	d0c0      	beq.n	58b4 <setvbuf+0xa8>
    5932:	2380      	movs	r3, #128	; 0x80
    5934:	89a2      	ldrh	r2, [r4, #12]
    5936:	9d01      	ldr	r5, [sp, #4]
    5938:	4313      	orrs	r3, r2
    593a:	81a3      	strh	r3, [r4, #12]
    593c:	e7d6      	b.n	58ec <setvbuf+0xe0>
    593e:	2000      	movs	r0, #0
    5940:	e7ba      	b.n	58b8 <setvbuf+0xac>
    5942:	60a5      	str	r5, [r4, #8]
    5944:	e7c4      	b.n	58d0 <setvbuf+0xc4>
    5946:	60a0      	str	r0, [r4, #8]
    5948:	e7c2      	b.n	58d0 <setvbuf+0xc4>
    594a:	2001      	movs	r0, #1
    594c:	4240      	negs	r0, r0
    594e:	e7bf      	b.n	58d0 <setvbuf+0xc4>
    5950:	2000000c 	.word	0x2000000c
    5954:	000060a0 	.word	0x000060a0
    5958:	fffff35c 	.word	0xfffff35c
    595c:	000060c0 	.word	0x000060c0
    5960:	00006080 	.word	0x00006080

00005964 <__sflush_r>:
    5964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5966:	898a      	ldrh	r2, [r1, #12]
    5968:	0005      	movs	r5, r0
    596a:	000c      	movs	r4, r1
    596c:	0713      	lsls	r3, r2, #28
    596e:	d460      	bmi.n	5a32 <__sflush_r+0xce>
    5970:	684b      	ldr	r3, [r1, #4]
    5972:	2b00      	cmp	r3, #0
    5974:	dc04      	bgt.n	5980 <__sflush_r+0x1c>
    5976:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5978:	2b00      	cmp	r3, #0
    597a:	dc01      	bgt.n	5980 <__sflush_r+0x1c>
    597c:	2000      	movs	r0, #0
    597e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5980:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5982:	2f00      	cmp	r7, #0
    5984:	d0fa      	beq.n	597c <__sflush_r+0x18>
    5986:	2300      	movs	r3, #0
    5988:	682e      	ldr	r6, [r5, #0]
    598a:	602b      	str	r3, [r5, #0]
    598c:	2380      	movs	r3, #128	; 0x80
    598e:	015b      	lsls	r3, r3, #5
    5990:	401a      	ands	r2, r3
    5992:	d034      	beq.n	59fe <__sflush_r+0x9a>
    5994:	6d60      	ldr	r0, [r4, #84]	; 0x54
    5996:	89a3      	ldrh	r3, [r4, #12]
    5998:	075b      	lsls	r3, r3, #29
    599a:	d506      	bpl.n	59aa <__sflush_r+0x46>
    599c:	6863      	ldr	r3, [r4, #4]
    599e:	1ac0      	subs	r0, r0, r3
    59a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    59a2:	2b00      	cmp	r3, #0
    59a4:	d001      	beq.n	59aa <__sflush_r+0x46>
    59a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    59a8:	1ac0      	subs	r0, r0, r3
    59aa:	0002      	movs	r2, r0
    59ac:	6a21      	ldr	r1, [r4, #32]
    59ae:	2300      	movs	r3, #0
    59b0:	0028      	movs	r0, r5
    59b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    59b4:	47b8      	blx	r7
    59b6:	89a1      	ldrh	r1, [r4, #12]
    59b8:	1c43      	adds	r3, r0, #1
    59ba:	d106      	bne.n	59ca <__sflush_r+0x66>
    59bc:	682b      	ldr	r3, [r5, #0]
    59be:	2b1d      	cmp	r3, #29
    59c0:	d831      	bhi.n	5a26 <__sflush_r+0xc2>
    59c2:	4a2c      	ldr	r2, [pc, #176]	; (5a74 <__sflush_r+0x110>)
    59c4:	40da      	lsrs	r2, r3
    59c6:	07d3      	lsls	r3, r2, #31
    59c8:	d52d      	bpl.n	5a26 <__sflush_r+0xc2>
    59ca:	2300      	movs	r3, #0
    59cc:	6063      	str	r3, [r4, #4]
    59ce:	6923      	ldr	r3, [r4, #16]
    59d0:	6023      	str	r3, [r4, #0]
    59d2:	04cb      	lsls	r3, r1, #19
    59d4:	d505      	bpl.n	59e2 <__sflush_r+0x7e>
    59d6:	1c43      	adds	r3, r0, #1
    59d8:	d102      	bne.n	59e0 <__sflush_r+0x7c>
    59da:	682b      	ldr	r3, [r5, #0]
    59dc:	2b00      	cmp	r3, #0
    59de:	d100      	bne.n	59e2 <__sflush_r+0x7e>
    59e0:	6560      	str	r0, [r4, #84]	; 0x54
    59e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    59e4:	602e      	str	r6, [r5, #0]
    59e6:	2900      	cmp	r1, #0
    59e8:	d0c8      	beq.n	597c <__sflush_r+0x18>
    59ea:	0023      	movs	r3, r4
    59ec:	3344      	adds	r3, #68	; 0x44
    59ee:	4299      	cmp	r1, r3
    59f0:	d002      	beq.n	59f8 <__sflush_r+0x94>
    59f2:	0028      	movs	r0, r5
    59f4:	f000 f976 	bl	5ce4 <_free_r>
    59f8:	2000      	movs	r0, #0
    59fa:	6360      	str	r0, [r4, #52]	; 0x34
    59fc:	e7bf      	b.n	597e <__sflush_r+0x1a>
    59fe:	2301      	movs	r3, #1
    5a00:	6a21      	ldr	r1, [r4, #32]
    5a02:	0028      	movs	r0, r5
    5a04:	47b8      	blx	r7
    5a06:	1c43      	adds	r3, r0, #1
    5a08:	d1c5      	bne.n	5996 <__sflush_r+0x32>
    5a0a:	682b      	ldr	r3, [r5, #0]
    5a0c:	2b00      	cmp	r3, #0
    5a0e:	d0c2      	beq.n	5996 <__sflush_r+0x32>
    5a10:	2b1d      	cmp	r3, #29
    5a12:	d001      	beq.n	5a18 <__sflush_r+0xb4>
    5a14:	2b16      	cmp	r3, #22
    5a16:	d101      	bne.n	5a1c <__sflush_r+0xb8>
    5a18:	602e      	str	r6, [r5, #0]
    5a1a:	e7af      	b.n	597c <__sflush_r+0x18>
    5a1c:	2340      	movs	r3, #64	; 0x40
    5a1e:	89a2      	ldrh	r2, [r4, #12]
    5a20:	4313      	orrs	r3, r2
    5a22:	81a3      	strh	r3, [r4, #12]
    5a24:	e7ab      	b.n	597e <__sflush_r+0x1a>
    5a26:	2340      	movs	r3, #64	; 0x40
    5a28:	430b      	orrs	r3, r1
    5a2a:	2001      	movs	r0, #1
    5a2c:	81a3      	strh	r3, [r4, #12]
    5a2e:	4240      	negs	r0, r0
    5a30:	e7a5      	b.n	597e <__sflush_r+0x1a>
    5a32:	690f      	ldr	r7, [r1, #16]
    5a34:	2f00      	cmp	r7, #0
    5a36:	d0a1      	beq.n	597c <__sflush_r+0x18>
    5a38:	680b      	ldr	r3, [r1, #0]
    5a3a:	600f      	str	r7, [r1, #0]
    5a3c:	1bdb      	subs	r3, r3, r7
    5a3e:	9301      	str	r3, [sp, #4]
    5a40:	2300      	movs	r3, #0
    5a42:	0792      	lsls	r2, r2, #30
    5a44:	d100      	bne.n	5a48 <__sflush_r+0xe4>
    5a46:	694b      	ldr	r3, [r1, #20]
    5a48:	60a3      	str	r3, [r4, #8]
    5a4a:	9b01      	ldr	r3, [sp, #4]
    5a4c:	2b00      	cmp	r3, #0
    5a4e:	dc00      	bgt.n	5a52 <__sflush_r+0xee>
    5a50:	e794      	b.n	597c <__sflush_r+0x18>
    5a52:	9b01      	ldr	r3, [sp, #4]
    5a54:	003a      	movs	r2, r7
    5a56:	6a21      	ldr	r1, [r4, #32]
    5a58:	0028      	movs	r0, r5
    5a5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5a5c:	47b0      	blx	r6
    5a5e:	2800      	cmp	r0, #0
    5a60:	dc03      	bgt.n	5a6a <__sflush_r+0x106>
    5a62:	2340      	movs	r3, #64	; 0x40
    5a64:	89a2      	ldrh	r2, [r4, #12]
    5a66:	4313      	orrs	r3, r2
    5a68:	e7df      	b.n	5a2a <__sflush_r+0xc6>
    5a6a:	9b01      	ldr	r3, [sp, #4]
    5a6c:	183f      	adds	r7, r7, r0
    5a6e:	1a1b      	subs	r3, r3, r0
    5a70:	9301      	str	r3, [sp, #4]
    5a72:	e7ea      	b.n	5a4a <__sflush_r+0xe6>
    5a74:	20400001 	.word	0x20400001

00005a78 <_fflush_r>:
    5a78:	690b      	ldr	r3, [r1, #16]
    5a7a:	b570      	push	{r4, r5, r6, lr}
    5a7c:	0005      	movs	r5, r0
    5a7e:	000c      	movs	r4, r1
    5a80:	2b00      	cmp	r3, #0
    5a82:	d101      	bne.n	5a88 <_fflush_r+0x10>
    5a84:	2000      	movs	r0, #0
    5a86:	bd70      	pop	{r4, r5, r6, pc}
    5a88:	2800      	cmp	r0, #0
    5a8a:	d004      	beq.n	5a96 <_fflush_r+0x1e>
    5a8c:	6983      	ldr	r3, [r0, #24]
    5a8e:	2b00      	cmp	r3, #0
    5a90:	d101      	bne.n	5a96 <_fflush_r+0x1e>
    5a92:	f000 f85f 	bl	5b54 <__sinit>
    5a96:	4b0b      	ldr	r3, [pc, #44]	; (5ac4 <_fflush_r+0x4c>)
    5a98:	429c      	cmp	r4, r3
    5a9a:	d109      	bne.n	5ab0 <_fflush_r+0x38>
    5a9c:	686c      	ldr	r4, [r5, #4]
    5a9e:	220c      	movs	r2, #12
    5aa0:	5ea3      	ldrsh	r3, [r4, r2]
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	d0ee      	beq.n	5a84 <_fflush_r+0xc>
    5aa6:	0021      	movs	r1, r4
    5aa8:	0028      	movs	r0, r5
    5aaa:	f7ff ff5b 	bl	5964 <__sflush_r>
    5aae:	e7ea      	b.n	5a86 <_fflush_r+0xe>
    5ab0:	4b05      	ldr	r3, [pc, #20]	; (5ac8 <_fflush_r+0x50>)
    5ab2:	429c      	cmp	r4, r3
    5ab4:	d101      	bne.n	5aba <_fflush_r+0x42>
    5ab6:	68ac      	ldr	r4, [r5, #8]
    5ab8:	e7f1      	b.n	5a9e <_fflush_r+0x26>
    5aba:	4b04      	ldr	r3, [pc, #16]	; (5acc <_fflush_r+0x54>)
    5abc:	429c      	cmp	r4, r3
    5abe:	d1ee      	bne.n	5a9e <_fflush_r+0x26>
    5ac0:	68ec      	ldr	r4, [r5, #12]
    5ac2:	e7ec      	b.n	5a9e <_fflush_r+0x26>
    5ac4:	000060a0 	.word	0x000060a0
    5ac8:	000060c0 	.word	0x000060c0
    5acc:	00006080 	.word	0x00006080

00005ad0 <_cleanup_r>:
    5ad0:	b510      	push	{r4, lr}
    5ad2:	4902      	ldr	r1, [pc, #8]	; (5adc <_cleanup_r+0xc>)
    5ad4:	f000 f8b2 	bl	5c3c <_fwalk_reent>
    5ad8:	bd10      	pop	{r4, pc}
    5ada:	46c0      	nop			; (mov r8, r8)
    5adc:	00005a79 	.word	0x00005a79

00005ae0 <std.isra.0>:
    5ae0:	2300      	movs	r3, #0
    5ae2:	b510      	push	{r4, lr}
    5ae4:	0004      	movs	r4, r0
    5ae6:	6003      	str	r3, [r0, #0]
    5ae8:	6043      	str	r3, [r0, #4]
    5aea:	6083      	str	r3, [r0, #8]
    5aec:	8181      	strh	r1, [r0, #12]
    5aee:	6643      	str	r3, [r0, #100]	; 0x64
    5af0:	81c2      	strh	r2, [r0, #14]
    5af2:	6103      	str	r3, [r0, #16]
    5af4:	6143      	str	r3, [r0, #20]
    5af6:	6183      	str	r3, [r0, #24]
    5af8:	0019      	movs	r1, r3
    5afa:	2208      	movs	r2, #8
    5afc:	305c      	adds	r0, #92	; 0x5c
    5afe:	f7ff fe08 	bl	5712 <memset>
    5b02:	4b05      	ldr	r3, [pc, #20]	; (5b18 <std.isra.0+0x38>)
    5b04:	6224      	str	r4, [r4, #32]
    5b06:	6263      	str	r3, [r4, #36]	; 0x24
    5b08:	4b04      	ldr	r3, [pc, #16]	; (5b1c <std.isra.0+0x3c>)
    5b0a:	62a3      	str	r3, [r4, #40]	; 0x28
    5b0c:	4b04      	ldr	r3, [pc, #16]	; (5b20 <std.isra.0+0x40>)
    5b0e:	62e3      	str	r3, [r4, #44]	; 0x2c
    5b10:	4b04      	ldr	r3, [pc, #16]	; (5b24 <std.isra.0+0x44>)
    5b12:	6323      	str	r3, [r4, #48]	; 0x30
    5b14:	bd10      	pop	{r4, pc}
    5b16:	46c0      	nop			; (mov r8, r8)
    5b18:	00005e59 	.word	0x00005e59
    5b1c:	00005e81 	.word	0x00005e81
    5b20:	00005eb9 	.word	0x00005eb9
    5b24:	00005ee5 	.word	0x00005ee5

00005b28 <__sfmoreglue>:
    5b28:	b570      	push	{r4, r5, r6, lr}
    5b2a:	2568      	movs	r5, #104	; 0x68
    5b2c:	1e4a      	subs	r2, r1, #1
    5b2e:	4355      	muls	r5, r2
    5b30:	000e      	movs	r6, r1
    5b32:	0029      	movs	r1, r5
    5b34:	3174      	adds	r1, #116	; 0x74
    5b36:	f000 f91f 	bl	5d78 <_malloc_r>
    5b3a:	1e04      	subs	r4, r0, #0
    5b3c:	d008      	beq.n	5b50 <__sfmoreglue+0x28>
    5b3e:	2100      	movs	r1, #0
    5b40:	002a      	movs	r2, r5
    5b42:	6001      	str	r1, [r0, #0]
    5b44:	6046      	str	r6, [r0, #4]
    5b46:	300c      	adds	r0, #12
    5b48:	60a0      	str	r0, [r4, #8]
    5b4a:	3268      	adds	r2, #104	; 0x68
    5b4c:	f7ff fde1 	bl	5712 <memset>
    5b50:	0020      	movs	r0, r4
    5b52:	bd70      	pop	{r4, r5, r6, pc}

00005b54 <__sinit>:
    5b54:	6983      	ldr	r3, [r0, #24]
    5b56:	b513      	push	{r0, r1, r4, lr}
    5b58:	0004      	movs	r4, r0
    5b5a:	2b00      	cmp	r3, #0
    5b5c:	d128      	bne.n	5bb0 <__sinit+0x5c>
    5b5e:	6483      	str	r3, [r0, #72]	; 0x48
    5b60:	64c3      	str	r3, [r0, #76]	; 0x4c
    5b62:	6503      	str	r3, [r0, #80]	; 0x50
    5b64:	4b13      	ldr	r3, [pc, #76]	; (5bb4 <__sinit+0x60>)
    5b66:	4a14      	ldr	r2, [pc, #80]	; (5bb8 <__sinit+0x64>)
    5b68:	681b      	ldr	r3, [r3, #0]
    5b6a:	6282      	str	r2, [r0, #40]	; 0x28
    5b6c:	9301      	str	r3, [sp, #4]
    5b6e:	4298      	cmp	r0, r3
    5b70:	d101      	bne.n	5b76 <__sinit+0x22>
    5b72:	2301      	movs	r3, #1
    5b74:	6183      	str	r3, [r0, #24]
    5b76:	0020      	movs	r0, r4
    5b78:	f000 f820 	bl	5bbc <__sfp>
    5b7c:	6060      	str	r0, [r4, #4]
    5b7e:	0020      	movs	r0, r4
    5b80:	f000 f81c 	bl	5bbc <__sfp>
    5b84:	60a0      	str	r0, [r4, #8]
    5b86:	0020      	movs	r0, r4
    5b88:	f000 f818 	bl	5bbc <__sfp>
    5b8c:	2200      	movs	r2, #0
    5b8e:	60e0      	str	r0, [r4, #12]
    5b90:	2104      	movs	r1, #4
    5b92:	6860      	ldr	r0, [r4, #4]
    5b94:	f7ff ffa4 	bl	5ae0 <std.isra.0>
    5b98:	2201      	movs	r2, #1
    5b9a:	2109      	movs	r1, #9
    5b9c:	68a0      	ldr	r0, [r4, #8]
    5b9e:	f7ff ff9f 	bl	5ae0 <std.isra.0>
    5ba2:	2202      	movs	r2, #2
    5ba4:	2112      	movs	r1, #18
    5ba6:	68e0      	ldr	r0, [r4, #12]
    5ba8:	f7ff ff9a 	bl	5ae0 <std.isra.0>
    5bac:	2301      	movs	r3, #1
    5bae:	61a3      	str	r3, [r4, #24]
    5bb0:	bd13      	pop	{r0, r1, r4, pc}
    5bb2:	46c0      	nop			; (mov r8, r8)
    5bb4:	0000607c 	.word	0x0000607c
    5bb8:	00005ad1 	.word	0x00005ad1

00005bbc <__sfp>:
    5bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bbe:	4b1e      	ldr	r3, [pc, #120]	; (5c38 <__sfp+0x7c>)
    5bc0:	0007      	movs	r7, r0
    5bc2:	681e      	ldr	r6, [r3, #0]
    5bc4:	69b3      	ldr	r3, [r6, #24]
    5bc6:	2b00      	cmp	r3, #0
    5bc8:	d102      	bne.n	5bd0 <__sfp+0x14>
    5bca:	0030      	movs	r0, r6
    5bcc:	f7ff ffc2 	bl	5b54 <__sinit>
    5bd0:	3648      	adds	r6, #72	; 0x48
    5bd2:	68b4      	ldr	r4, [r6, #8]
    5bd4:	6873      	ldr	r3, [r6, #4]
    5bd6:	3b01      	subs	r3, #1
    5bd8:	d504      	bpl.n	5be4 <__sfp+0x28>
    5bda:	6833      	ldr	r3, [r6, #0]
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d007      	beq.n	5bf0 <__sfp+0x34>
    5be0:	6836      	ldr	r6, [r6, #0]
    5be2:	e7f6      	b.n	5bd2 <__sfp+0x16>
    5be4:	220c      	movs	r2, #12
    5be6:	5ea5      	ldrsh	r5, [r4, r2]
    5be8:	2d00      	cmp	r5, #0
    5bea:	d00d      	beq.n	5c08 <__sfp+0x4c>
    5bec:	3468      	adds	r4, #104	; 0x68
    5bee:	e7f2      	b.n	5bd6 <__sfp+0x1a>
    5bf0:	2104      	movs	r1, #4
    5bf2:	0038      	movs	r0, r7
    5bf4:	f7ff ff98 	bl	5b28 <__sfmoreglue>
    5bf8:	6030      	str	r0, [r6, #0]
    5bfa:	2800      	cmp	r0, #0
    5bfc:	d1f0      	bne.n	5be0 <__sfp+0x24>
    5bfe:	230c      	movs	r3, #12
    5c00:	0004      	movs	r4, r0
    5c02:	603b      	str	r3, [r7, #0]
    5c04:	0020      	movs	r0, r4
    5c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c08:	2301      	movs	r3, #1
    5c0a:	0020      	movs	r0, r4
    5c0c:	425b      	negs	r3, r3
    5c0e:	81e3      	strh	r3, [r4, #14]
    5c10:	3302      	adds	r3, #2
    5c12:	81a3      	strh	r3, [r4, #12]
    5c14:	6665      	str	r5, [r4, #100]	; 0x64
    5c16:	6025      	str	r5, [r4, #0]
    5c18:	60a5      	str	r5, [r4, #8]
    5c1a:	6065      	str	r5, [r4, #4]
    5c1c:	6125      	str	r5, [r4, #16]
    5c1e:	6165      	str	r5, [r4, #20]
    5c20:	61a5      	str	r5, [r4, #24]
    5c22:	2208      	movs	r2, #8
    5c24:	0029      	movs	r1, r5
    5c26:	305c      	adds	r0, #92	; 0x5c
    5c28:	f7ff fd73 	bl	5712 <memset>
    5c2c:	6365      	str	r5, [r4, #52]	; 0x34
    5c2e:	63a5      	str	r5, [r4, #56]	; 0x38
    5c30:	64a5      	str	r5, [r4, #72]	; 0x48
    5c32:	64e5      	str	r5, [r4, #76]	; 0x4c
    5c34:	e7e6      	b.n	5c04 <__sfp+0x48>
    5c36:	46c0      	nop			; (mov r8, r8)
    5c38:	0000607c 	.word	0x0000607c

00005c3c <_fwalk_reent>:
    5c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5c3e:	0004      	movs	r4, r0
    5c40:	0007      	movs	r7, r0
    5c42:	2600      	movs	r6, #0
    5c44:	9101      	str	r1, [sp, #4]
    5c46:	3448      	adds	r4, #72	; 0x48
    5c48:	2c00      	cmp	r4, #0
    5c4a:	d101      	bne.n	5c50 <_fwalk_reent+0x14>
    5c4c:	0030      	movs	r0, r6
    5c4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5c50:	6863      	ldr	r3, [r4, #4]
    5c52:	68a5      	ldr	r5, [r4, #8]
    5c54:	9300      	str	r3, [sp, #0]
    5c56:	9b00      	ldr	r3, [sp, #0]
    5c58:	3b01      	subs	r3, #1
    5c5a:	9300      	str	r3, [sp, #0]
    5c5c:	d501      	bpl.n	5c62 <_fwalk_reent+0x26>
    5c5e:	6824      	ldr	r4, [r4, #0]
    5c60:	e7f2      	b.n	5c48 <_fwalk_reent+0xc>
    5c62:	89ab      	ldrh	r3, [r5, #12]
    5c64:	2b01      	cmp	r3, #1
    5c66:	d908      	bls.n	5c7a <_fwalk_reent+0x3e>
    5c68:	220e      	movs	r2, #14
    5c6a:	5eab      	ldrsh	r3, [r5, r2]
    5c6c:	3301      	adds	r3, #1
    5c6e:	d004      	beq.n	5c7a <_fwalk_reent+0x3e>
    5c70:	0029      	movs	r1, r5
    5c72:	0038      	movs	r0, r7
    5c74:	9b01      	ldr	r3, [sp, #4]
    5c76:	4798      	blx	r3
    5c78:	4306      	orrs	r6, r0
    5c7a:	3568      	adds	r5, #104	; 0x68
    5c7c:	e7eb      	b.n	5c56 <_fwalk_reent+0x1a>
	...

00005c80 <__swhatbuf_r>:
    5c80:	b570      	push	{r4, r5, r6, lr}
    5c82:	000e      	movs	r6, r1
    5c84:	001d      	movs	r5, r3
    5c86:	230e      	movs	r3, #14
    5c88:	5ec9      	ldrsh	r1, [r1, r3]
    5c8a:	b090      	sub	sp, #64	; 0x40
    5c8c:	0014      	movs	r4, r2
    5c8e:	2900      	cmp	r1, #0
    5c90:	da07      	bge.n	5ca2 <__swhatbuf_r+0x22>
    5c92:	2300      	movs	r3, #0
    5c94:	602b      	str	r3, [r5, #0]
    5c96:	89b3      	ldrh	r3, [r6, #12]
    5c98:	061b      	lsls	r3, r3, #24
    5c9a:	d411      	bmi.n	5cc0 <__swhatbuf_r+0x40>
    5c9c:	2380      	movs	r3, #128	; 0x80
    5c9e:	00db      	lsls	r3, r3, #3
    5ca0:	e00f      	b.n	5cc2 <__swhatbuf_r+0x42>
    5ca2:	aa01      	add	r2, sp, #4
    5ca4:	f000 f94a 	bl	5f3c <_fstat_r>
    5ca8:	2800      	cmp	r0, #0
    5caa:	dbf2      	blt.n	5c92 <__swhatbuf_r+0x12>
    5cac:	22f0      	movs	r2, #240	; 0xf0
    5cae:	9b02      	ldr	r3, [sp, #8]
    5cb0:	0212      	lsls	r2, r2, #8
    5cb2:	4013      	ands	r3, r2
    5cb4:	4a05      	ldr	r2, [pc, #20]	; (5ccc <__swhatbuf_r+0x4c>)
    5cb6:	189b      	adds	r3, r3, r2
    5cb8:	425a      	negs	r2, r3
    5cba:	4153      	adcs	r3, r2
    5cbc:	602b      	str	r3, [r5, #0]
    5cbe:	e7ed      	b.n	5c9c <__swhatbuf_r+0x1c>
    5cc0:	2340      	movs	r3, #64	; 0x40
    5cc2:	2000      	movs	r0, #0
    5cc4:	6023      	str	r3, [r4, #0]
    5cc6:	b010      	add	sp, #64	; 0x40
    5cc8:	bd70      	pop	{r4, r5, r6, pc}
    5cca:	46c0      	nop			; (mov r8, r8)
    5ccc:	ffffe000 	.word	0xffffe000

00005cd0 <malloc>:
    5cd0:	b510      	push	{r4, lr}
    5cd2:	4b03      	ldr	r3, [pc, #12]	; (5ce0 <malloc+0x10>)
    5cd4:	0001      	movs	r1, r0
    5cd6:	6818      	ldr	r0, [r3, #0]
    5cd8:	f000 f84e 	bl	5d78 <_malloc_r>
    5cdc:	bd10      	pop	{r4, pc}
    5cde:	46c0      	nop			; (mov r8, r8)
    5ce0:	2000000c 	.word	0x2000000c

00005ce4 <_free_r>:
    5ce4:	b570      	push	{r4, r5, r6, lr}
    5ce6:	0005      	movs	r5, r0
    5ce8:	2900      	cmp	r1, #0
    5cea:	d010      	beq.n	5d0e <_free_r+0x2a>
    5cec:	1f0c      	subs	r4, r1, #4
    5cee:	6823      	ldr	r3, [r4, #0]
    5cf0:	2b00      	cmp	r3, #0
    5cf2:	da00      	bge.n	5cf6 <_free_r+0x12>
    5cf4:	18e4      	adds	r4, r4, r3
    5cf6:	0028      	movs	r0, r5
    5cf8:	f000 f946 	bl	5f88 <__malloc_lock>
    5cfc:	4a1d      	ldr	r2, [pc, #116]	; (5d74 <_free_r+0x90>)
    5cfe:	6813      	ldr	r3, [r2, #0]
    5d00:	2b00      	cmp	r3, #0
    5d02:	d105      	bne.n	5d10 <_free_r+0x2c>
    5d04:	6063      	str	r3, [r4, #4]
    5d06:	6014      	str	r4, [r2, #0]
    5d08:	0028      	movs	r0, r5
    5d0a:	f000 f93e 	bl	5f8a <__malloc_unlock>
    5d0e:	bd70      	pop	{r4, r5, r6, pc}
    5d10:	42a3      	cmp	r3, r4
    5d12:	d909      	bls.n	5d28 <_free_r+0x44>
    5d14:	6821      	ldr	r1, [r4, #0]
    5d16:	1860      	adds	r0, r4, r1
    5d18:	4283      	cmp	r3, r0
    5d1a:	d1f3      	bne.n	5d04 <_free_r+0x20>
    5d1c:	6818      	ldr	r0, [r3, #0]
    5d1e:	685b      	ldr	r3, [r3, #4]
    5d20:	1841      	adds	r1, r0, r1
    5d22:	6021      	str	r1, [r4, #0]
    5d24:	e7ee      	b.n	5d04 <_free_r+0x20>
    5d26:	0013      	movs	r3, r2
    5d28:	685a      	ldr	r2, [r3, #4]
    5d2a:	2a00      	cmp	r2, #0
    5d2c:	d001      	beq.n	5d32 <_free_r+0x4e>
    5d2e:	42a2      	cmp	r2, r4
    5d30:	d9f9      	bls.n	5d26 <_free_r+0x42>
    5d32:	6819      	ldr	r1, [r3, #0]
    5d34:	1858      	adds	r0, r3, r1
    5d36:	42a0      	cmp	r0, r4
    5d38:	d10b      	bne.n	5d52 <_free_r+0x6e>
    5d3a:	6820      	ldr	r0, [r4, #0]
    5d3c:	1809      	adds	r1, r1, r0
    5d3e:	1858      	adds	r0, r3, r1
    5d40:	6019      	str	r1, [r3, #0]
    5d42:	4282      	cmp	r2, r0
    5d44:	d1e0      	bne.n	5d08 <_free_r+0x24>
    5d46:	6810      	ldr	r0, [r2, #0]
    5d48:	6852      	ldr	r2, [r2, #4]
    5d4a:	1841      	adds	r1, r0, r1
    5d4c:	6019      	str	r1, [r3, #0]
    5d4e:	605a      	str	r2, [r3, #4]
    5d50:	e7da      	b.n	5d08 <_free_r+0x24>
    5d52:	42a0      	cmp	r0, r4
    5d54:	d902      	bls.n	5d5c <_free_r+0x78>
    5d56:	230c      	movs	r3, #12
    5d58:	602b      	str	r3, [r5, #0]
    5d5a:	e7d5      	b.n	5d08 <_free_r+0x24>
    5d5c:	6821      	ldr	r1, [r4, #0]
    5d5e:	1860      	adds	r0, r4, r1
    5d60:	4282      	cmp	r2, r0
    5d62:	d103      	bne.n	5d6c <_free_r+0x88>
    5d64:	6810      	ldr	r0, [r2, #0]
    5d66:	6852      	ldr	r2, [r2, #4]
    5d68:	1841      	adds	r1, r0, r1
    5d6a:	6021      	str	r1, [r4, #0]
    5d6c:	6062      	str	r2, [r4, #4]
    5d6e:	605c      	str	r4, [r3, #4]
    5d70:	e7ca      	b.n	5d08 <_free_r+0x24>
    5d72:	46c0      	nop			; (mov r8, r8)
    5d74:	20000e0c 	.word	0x20000e0c

00005d78 <_malloc_r>:
    5d78:	2303      	movs	r3, #3
    5d7a:	b570      	push	{r4, r5, r6, lr}
    5d7c:	1ccd      	adds	r5, r1, #3
    5d7e:	439d      	bics	r5, r3
    5d80:	3508      	adds	r5, #8
    5d82:	0006      	movs	r6, r0
    5d84:	2d0c      	cmp	r5, #12
    5d86:	d21e      	bcs.n	5dc6 <_malloc_r+0x4e>
    5d88:	250c      	movs	r5, #12
    5d8a:	42a9      	cmp	r1, r5
    5d8c:	d81d      	bhi.n	5dca <_malloc_r+0x52>
    5d8e:	0030      	movs	r0, r6
    5d90:	f000 f8fa 	bl	5f88 <__malloc_lock>
    5d94:	4a25      	ldr	r2, [pc, #148]	; (5e2c <_malloc_r+0xb4>)
    5d96:	6814      	ldr	r4, [r2, #0]
    5d98:	0021      	movs	r1, r4
    5d9a:	2900      	cmp	r1, #0
    5d9c:	d119      	bne.n	5dd2 <_malloc_r+0x5a>
    5d9e:	4c24      	ldr	r4, [pc, #144]	; (5e30 <_malloc_r+0xb8>)
    5da0:	6823      	ldr	r3, [r4, #0]
    5da2:	2b00      	cmp	r3, #0
    5da4:	d103      	bne.n	5dae <_malloc_r+0x36>
    5da6:	0030      	movs	r0, r6
    5da8:	f000 f844 	bl	5e34 <_sbrk_r>
    5dac:	6020      	str	r0, [r4, #0]
    5dae:	0029      	movs	r1, r5
    5db0:	0030      	movs	r0, r6
    5db2:	f000 f83f 	bl	5e34 <_sbrk_r>
    5db6:	1c43      	adds	r3, r0, #1
    5db8:	d12c      	bne.n	5e14 <_malloc_r+0x9c>
    5dba:	230c      	movs	r3, #12
    5dbc:	0030      	movs	r0, r6
    5dbe:	6033      	str	r3, [r6, #0]
    5dc0:	f000 f8e3 	bl	5f8a <__malloc_unlock>
    5dc4:	e003      	b.n	5dce <_malloc_r+0x56>
    5dc6:	2d00      	cmp	r5, #0
    5dc8:	dadf      	bge.n	5d8a <_malloc_r+0x12>
    5dca:	230c      	movs	r3, #12
    5dcc:	6033      	str	r3, [r6, #0]
    5dce:	2000      	movs	r0, #0
    5dd0:	bd70      	pop	{r4, r5, r6, pc}
    5dd2:	680b      	ldr	r3, [r1, #0]
    5dd4:	1b5b      	subs	r3, r3, r5
    5dd6:	d41a      	bmi.n	5e0e <_malloc_r+0x96>
    5dd8:	2b0b      	cmp	r3, #11
    5dda:	d903      	bls.n	5de4 <_malloc_r+0x6c>
    5ddc:	600b      	str	r3, [r1, #0]
    5dde:	18cc      	adds	r4, r1, r3
    5de0:	6025      	str	r5, [r4, #0]
    5de2:	e003      	b.n	5dec <_malloc_r+0x74>
    5de4:	428c      	cmp	r4, r1
    5de6:	d10e      	bne.n	5e06 <_malloc_r+0x8e>
    5de8:	6863      	ldr	r3, [r4, #4]
    5dea:	6013      	str	r3, [r2, #0]
    5dec:	0030      	movs	r0, r6
    5dee:	f000 f8cc 	bl	5f8a <__malloc_unlock>
    5df2:	0020      	movs	r0, r4
    5df4:	2207      	movs	r2, #7
    5df6:	300b      	adds	r0, #11
    5df8:	1d23      	adds	r3, r4, #4
    5dfa:	4390      	bics	r0, r2
    5dfc:	1ac3      	subs	r3, r0, r3
    5dfe:	d0e7      	beq.n	5dd0 <_malloc_r+0x58>
    5e00:	425a      	negs	r2, r3
    5e02:	50e2      	str	r2, [r4, r3]
    5e04:	e7e4      	b.n	5dd0 <_malloc_r+0x58>
    5e06:	684b      	ldr	r3, [r1, #4]
    5e08:	6063      	str	r3, [r4, #4]
    5e0a:	000c      	movs	r4, r1
    5e0c:	e7ee      	b.n	5dec <_malloc_r+0x74>
    5e0e:	000c      	movs	r4, r1
    5e10:	6849      	ldr	r1, [r1, #4]
    5e12:	e7c2      	b.n	5d9a <_malloc_r+0x22>
    5e14:	2303      	movs	r3, #3
    5e16:	1cc4      	adds	r4, r0, #3
    5e18:	439c      	bics	r4, r3
    5e1a:	42a0      	cmp	r0, r4
    5e1c:	d0e0      	beq.n	5de0 <_malloc_r+0x68>
    5e1e:	1a21      	subs	r1, r4, r0
    5e20:	0030      	movs	r0, r6
    5e22:	f000 f807 	bl	5e34 <_sbrk_r>
    5e26:	1c43      	adds	r3, r0, #1
    5e28:	d1da      	bne.n	5de0 <_malloc_r+0x68>
    5e2a:	e7c6      	b.n	5dba <_malloc_r+0x42>
    5e2c:	20000e0c 	.word	0x20000e0c
    5e30:	20000e10 	.word	0x20000e10

00005e34 <_sbrk_r>:
    5e34:	2300      	movs	r3, #0
    5e36:	b570      	push	{r4, r5, r6, lr}
    5e38:	4c06      	ldr	r4, [pc, #24]	; (5e54 <_sbrk_r+0x20>)
    5e3a:	0005      	movs	r5, r0
    5e3c:	0008      	movs	r0, r1
    5e3e:	6023      	str	r3, [r4, #0]
    5e40:	f7fc f9ae 	bl	21a0 <_sbrk>
    5e44:	1c43      	adds	r3, r0, #1
    5e46:	d103      	bne.n	5e50 <_sbrk_r+0x1c>
    5e48:	6823      	ldr	r3, [r4, #0]
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d000      	beq.n	5e50 <_sbrk_r+0x1c>
    5e4e:	602b      	str	r3, [r5, #0]
    5e50:	bd70      	pop	{r4, r5, r6, pc}
    5e52:	46c0      	nop			; (mov r8, r8)
    5e54:	20000f98 	.word	0x20000f98

00005e58 <__sread>:
    5e58:	b570      	push	{r4, r5, r6, lr}
    5e5a:	000c      	movs	r4, r1
    5e5c:	250e      	movs	r5, #14
    5e5e:	5f49      	ldrsh	r1, [r1, r5]
    5e60:	f000 f894 	bl	5f8c <_read_r>
    5e64:	2800      	cmp	r0, #0
    5e66:	db03      	blt.n	5e70 <__sread+0x18>
    5e68:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5e6a:	181b      	adds	r3, r3, r0
    5e6c:	6563      	str	r3, [r4, #84]	; 0x54
    5e6e:	bd70      	pop	{r4, r5, r6, pc}
    5e70:	89a3      	ldrh	r3, [r4, #12]
    5e72:	4a02      	ldr	r2, [pc, #8]	; (5e7c <__sread+0x24>)
    5e74:	4013      	ands	r3, r2
    5e76:	81a3      	strh	r3, [r4, #12]
    5e78:	e7f9      	b.n	5e6e <__sread+0x16>
    5e7a:	46c0      	nop			; (mov r8, r8)
    5e7c:	ffffefff 	.word	0xffffefff

00005e80 <__swrite>:
    5e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e82:	001f      	movs	r7, r3
    5e84:	898b      	ldrh	r3, [r1, #12]
    5e86:	0005      	movs	r5, r0
    5e88:	000c      	movs	r4, r1
    5e8a:	0016      	movs	r6, r2
    5e8c:	05db      	lsls	r3, r3, #23
    5e8e:	d505      	bpl.n	5e9c <__swrite+0x1c>
    5e90:	230e      	movs	r3, #14
    5e92:	5ec9      	ldrsh	r1, [r1, r3]
    5e94:	2200      	movs	r2, #0
    5e96:	2302      	movs	r3, #2
    5e98:	f000 f862 	bl	5f60 <_lseek_r>
    5e9c:	89a3      	ldrh	r3, [r4, #12]
    5e9e:	4a05      	ldr	r2, [pc, #20]	; (5eb4 <__swrite+0x34>)
    5ea0:	0028      	movs	r0, r5
    5ea2:	4013      	ands	r3, r2
    5ea4:	81a3      	strh	r3, [r4, #12]
    5ea6:	0032      	movs	r2, r6
    5ea8:	230e      	movs	r3, #14
    5eaa:	5ee1      	ldrsh	r1, [r4, r3]
    5eac:	003b      	movs	r3, r7
    5eae:	f000 f81f 	bl	5ef0 <_write_r>
    5eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5eb4:	ffffefff 	.word	0xffffefff

00005eb8 <__sseek>:
    5eb8:	b570      	push	{r4, r5, r6, lr}
    5eba:	000c      	movs	r4, r1
    5ebc:	250e      	movs	r5, #14
    5ebe:	5f49      	ldrsh	r1, [r1, r5]
    5ec0:	f000 f84e 	bl	5f60 <_lseek_r>
    5ec4:	89a3      	ldrh	r3, [r4, #12]
    5ec6:	1c42      	adds	r2, r0, #1
    5ec8:	d103      	bne.n	5ed2 <__sseek+0x1a>
    5eca:	4a05      	ldr	r2, [pc, #20]	; (5ee0 <__sseek+0x28>)
    5ecc:	4013      	ands	r3, r2
    5ece:	81a3      	strh	r3, [r4, #12]
    5ed0:	bd70      	pop	{r4, r5, r6, pc}
    5ed2:	2280      	movs	r2, #128	; 0x80
    5ed4:	0152      	lsls	r2, r2, #5
    5ed6:	4313      	orrs	r3, r2
    5ed8:	81a3      	strh	r3, [r4, #12]
    5eda:	6560      	str	r0, [r4, #84]	; 0x54
    5edc:	e7f8      	b.n	5ed0 <__sseek+0x18>
    5ede:	46c0      	nop			; (mov r8, r8)
    5ee0:	ffffefff 	.word	0xffffefff

00005ee4 <__sclose>:
    5ee4:	b510      	push	{r4, lr}
    5ee6:	230e      	movs	r3, #14
    5ee8:	5ec9      	ldrsh	r1, [r1, r3]
    5eea:	f000 f815 	bl	5f18 <_close_r>
    5eee:	bd10      	pop	{r4, pc}

00005ef0 <_write_r>:
    5ef0:	b570      	push	{r4, r5, r6, lr}
    5ef2:	0005      	movs	r5, r0
    5ef4:	0008      	movs	r0, r1
    5ef6:	0011      	movs	r1, r2
    5ef8:	2200      	movs	r2, #0
    5efa:	4c06      	ldr	r4, [pc, #24]	; (5f14 <_write_r+0x24>)
    5efc:	6022      	str	r2, [r4, #0]
    5efe:	001a      	movs	r2, r3
    5f00:	f7fc f926 	bl	2150 <_write>
    5f04:	1c43      	adds	r3, r0, #1
    5f06:	d103      	bne.n	5f10 <_write_r+0x20>
    5f08:	6823      	ldr	r3, [r4, #0]
    5f0a:	2b00      	cmp	r3, #0
    5f0c:	d000      	beq.n	5f10 <_write_r+0x20>
    5f0e:	602b      	str	r3, [r5, #0]
    5f10:	bd70      	pop	{r4, r5, r6, pc}
    5f12:	46c0      	nop			; (mov r8, r8)
    5f14:	20000f98 	.word	0x20000f98

00005f18 <_close_r>:
    5f18:	2300      	movs	r3, #0
    5f1a:	b570      	push	{r4, r5, r6, lr}
    5f1c:	4c06      	ldr	r4, [pc, #24]	; (5f38 <_close_r+0x20>)
    5f1e:	0005      	movs	r5, r0
    5f20:	0008      	movs	r0, r1
    5f22:	6023      	str	r3, [r4, #0]
    5f24:	f7fc f94e 	bl	21c4 <_close>
    5f28:	1c43      	adds	r3, r0, #1
    5f2a:	d103      	bne.n	5f34 <_close_r+0x1c>
    5f2c:	6823      	ldr	r3, [r4, #0]
    5f2e:	2b00      	cmp	r3, #0
    5f30:	d000      	beq.n	5f34 <_close_r+0x1c>
    5f32:	602b      	str	r3, [r5, #0]
    5f34:	bd70      	pop	{r4, r5, r6, pc}
    5f36:	46c0      	nop			; (mov r8, r8)
    5f38:	20000f98 	.word	0x20000f98

00005f3c <_fstat_r>:
    5f3c:	2300      	movs	r3, #0
    5f3e:	b570      	push	{r4, r5, r6, lr}
    5f40:	4c06      	ldr	r4, [pc, #24]	; (5f5c <_fstat_r+0x20>)
    5f42:	0005      	movs	r5, r0
    5f44:	0008      	movs	r0, r1
    5f46:	0011      	movs	r1, r2
    5f48:	6023      	str	r3, [r4, #0]
    5f4a:	f7fc f93e 	bl	21ca <_fstat>
    5f4e:	1c43      	adds	r3, r0, #1
    5f50:	d103      	bne.n	5f5a <_fstat_r+0x1e>
    5f52:	6823      	ldr	r3, [r4, #0]
    5f54:	2b00      	cmp	r3, #0
    5f56:	d000      	beq.n	5f5a <_fstat_r+0x1e>
    5f58:	602b      	str	r3, [r5, #0]
    5f5a:	bd70      	pop	{r4, r5, r6, pc}
    5f5c:	20000f98 	.word	0x20000f98

00005f60 <_lseek_r>:
    5f60:	b570      	push	{r4, r5, r6, lr}
    5f62:	0005      	movs	r5, r0
    5f64:	0008      	movs	r0, r1
    5f66:	0011      	movs	r1, r2
    5f68:	2200      	movs	r2, #0
    5f6a:	4c06      	ldr	r4, [pc, #24]	; (5f84 <_lseek_r+0x24>)
    5f6c:	6022      	str	r2, [r4, #0]
    5f6e:	001a      	movs	r2, r3
    5f70:	f7fc f930 	bl	21d4 <_lseek>
    5f74:	1c43      	adds	r3, r0, #1
    5f76:	d103      	bne.n	5f80 <_lseek_r+0x20>
    5f78:	6823      	ldr	r3, [r4, #0]
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	d000      	beq.n	5f80 <_lseek_r+0x20>
    5f7e:	602b      	str	r3, [r5, #0]
    5f80:	bd70      	pop	{r4, r5, r6, pc}
    5f82:	46c0      	nop			; (mov r8, r8)
    5f84:	20000f98 	.word	0x20000f98

00005f88 <__malloc_lock>:
    5f88:	4770      	bx	lr

00005f8a <__malloc_unlock>:
    5f8a:	4770      	bx	lr

00005f8c <_read_r>:
    5f8c:	b570      	push	{r4, r5, r6, lr}
    5f8e:	0005      	movs	r5, r0
    5f90:	0008      	movs	r0, r1
    5f92:	0011      	movs	r1, r2
    5f94:	2200      	movs	r2, #0
    5f96:	4c06      	ldr	r4, [pc, #24]	; (5fb0 <_read_r+0x24>)
    5f98:	6022      	str	r2, [r4, #0]
    5f9a:	001a      	movs	r2, r3
    5f9c:	f7fc f8b6 	bl	210c <_read>
    5fa0:	1c43      	adds	r3, r0, #1
    5fa2:	d103      	bne.n	5fac <_read_r+0x20>
    5fa4:	6823      	ldr	r3, [r4, #0]
    5fa6:	2b00      	cmp	r3, #0
    5fa8:	d000      	beq.n	5fac <_read_r+0x20>
    5faa:	602b      	str	r3, [r5, #0]
    5fac:	bd70      	pop	{r4, r5, r6, pc}
    5fae:	46c0      	nop			; (mov r8, r8)
    5fb0:	20000f98 	.word	0x20000f98
    5fb4:	42000800 	.word	0x42000800
    5fb8:	42000c00 	.word	0x42000c00
    5fbc:	42001000 	.word	0x42001000
    5fc0:	42001400 	.word	0x42001400
    5fc4:	42001800 	.word	0x42001800
    5fc8:	42001c00 	.word	0x42001c00
    5fcc:	000013ea 	.word	0x000013ea
    5fd0:	000013e6 	.word	0x000013e6
    5fd4:	000013e6 	.word	0x000013e6
    5fd8:	00001448 	.word	0x00001448
    5fdc:	00001448 	.word	0x00001448
    5fe0:	000013fe 	.word	0x000013fe
    5fe4:	000013f0 	.word	0x000013f0
    5fe8:	00001404 	.word	0x00001404
    5fec:	00001436 	.word	0x00001436
    5ff0:	00001684 	.word	0x00001684
    5ff4:	00001664 	.word	0x00001664
    5ff8:	00001664 	.word	0x00001664
    5ffc:	000016f0 	.word	0x000016f0
    6000:	00001676 	.word	0x00001676
    6004:	00001692 	.word	0x00001692
    6008:	00001668 	.word	0x00001668
    600c:	000016a0 	.word	0x000016a0
    6010:	000016e0 	.word	0x000016e0
    6014:	42002c00 	.word	0x42002c00
    6018:	42003000 	.word	0x42003000
    601c:	42003400 	.word	0x42003400
    6020:	0000009c 	.word	0x0000009c
    6024:	726f6f43 	.word	0x726f6f43
    6028:	616e6964 	.word	0x616e6964
    602c:	00726f74 	.word	0x00726f74
    6030:	74736554 	.word	0x74736554
    6034:	75636553 	.word	0x75636553
    6038:	79746972 	.word	0x79746972
    603c:	3079654b 	.word	0x3079654b
    6040:	00000000 	.word	0x00000000
    6044:	00003714 	.word	0x00003714
    6048:	000038d0 	.word	0x000038d0
    604c:	00003920 	.word	0x00003920
    6050:	00003abc 	.word	0x00003abc
    6054:	00003ac4 	.word	0x00003ac4
    6058:	00004042 	.word	0x00004042
    605c:	0000404a 	.word	0x0000404a
    6060:	00004062 	.word	0x00004062
    6064:	00004082 	.word	0x00004082
    6068:	0000404a 	.word	0x0000404a
    606c:	000040a4 	.word	0x000040a4
    6070:	0000404a 	.word	0x0000404a
    6074:	000040e8 	.word	0x000040e8

00006078 <tc_interrupt_vectors.11908>:
    6078:	00141312                                ....

0000607c <_global_impure_ptr>:
    607c:	20000010                                ... 

00006080 <__sf_fake_stderr>:
	...

000060a0 <__sf_fake_stdin>:
	...

000060c0 <__sf_fake_stdout>:
	...

000060e0 <_init>:
    60e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60e2:	46c0      	nop			; (mov r8, r8)
    60e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    60e6:	bc08      	pop	{r3}
    60e8:	469e      	mov	lr, r3
    60ea:	4770      	bx	lr

000060ec <__init_array_start>:
    60ec:	000000dd 	.word	0x000000dd

000060f0 <_fini>:
    60f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60f2:	46c0      	nop			; (mov r8, r8)
    60f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    60f6:	bc08      	pop	{r3}
    60f8:	469e      	mov	lr, r3
    60fa:	4770      	bx	lr

000060fc <__fini_array_start>:
    60fc:	000000b5 	.word	0x000000b5
